{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/occ/occ-models/occ-endpoints.model.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/anonymous-consents/connectors/converters.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/anonymous-consents-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/utils/merging-subject.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/util/applicable.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/cart/config/cart-config.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/services/cart-config.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","Config","InjectionToken","ConfigChunk","DefaultConfigChunk","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configurationFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","Optional","NgModule","imports","CommonModule","declarations","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityLoaderResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","entityLoaderStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","LoadClientToken","_super","_this","StateUtils.LoaderLoadAction","LoadClientTokenFail","StateUtils.LoaderFailAction","LoadClientTokenSuccess","StateUtils.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","invokeWithUserId","cb","take","subscribe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","providedIn","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfig","useExisting","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","getLoadStrategy","loadStrategy","SemanticPathService","routingConfigService","urlParser","ROOT_URL","paths","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","semanticRoute","getSemanticRoute","ɵ1$1","context","getPageContext","ɵ2","nextState","getNextPageContext","ɵ3","isNavigating","ɵ4","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","SiteContextConfig","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","val","unsubscribe","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","CustomEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeURIComponent","decodeValue","OccConfig","OccEndpointsService","baseSiteService","_activeBaseSite","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","forEach","httpParamsOptions","encoder","queryParamsFromEndpoint","fromString","httpParams_1","HttpParams","toString","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","AuthConfig","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserAuthenticationTokenService","loadToken","encodeURI","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","ImageType","VariantType","PriceType","VariantQualifier","NotificationType","DeferLoadingStrategy","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateUtils.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","AnonymousConsentCheckUpdatedVersions","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateUtils.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateUtils.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateUtils.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateUtils.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","checkConsentVersions","AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","consentsUpdated","newConsents","previousConsents","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entries","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","cartId","productCode","quantity","toAdd","code","qty","update","entryNumber","pickupStore","patch","remove","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","OccCartAdapter","loadAll","pluck","oldCartId","toMergeCartGuid","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","getCartEndpoint","cartEndpoint","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","_d","component","_e","e_3","_f","comp","flexType","e_5","CmsOccModule","CmsPageAdapter","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","substr","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_g","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","default","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","radius","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","ANONYMOUS_CONSENT_NORMALIZER","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","loadAnonymousConsents","head","observe","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","orderCode","orderId","loadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","PRODUCT_INTERESTS_NORMALIZER","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","AnonymousConsentNormalizer","anonymousConsentsService","OccReturnRequestNormalizer","returnEntries","OccUserInterestsNormalizer","results","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","OccUserInterestsAdapter","getInterests","notificationType","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","headers$1","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","occConfig","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsConfig","AnonymousConsentsInterceptor","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","MergingSubject","subscriptionsToSources","output$","Observable","consumer","bindAllSourcesToConsumer","unbindAllSourcesFromConsumer","share","bindSourceToConsumer","unbindSourceFromConsumer","subscriptionToSource","EventService","eventsMeta","eventType","source$","eventMeta","getEventMeta","mergingSubject","getValidatedEventStream","getInputSubject","inputSubject$","Subject","validateEventType","createEventMeta","createFrom","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","factory","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","exports","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateUtils.entityLoaderStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateUtils.EntityLoadAction","CancelOrderFail","StateUtils.EntityFailAction","CancelOrderSuccess","StateUtils.EntitySuccessAction","ResetCancelOrderProcess","StateUtils.EntityLoaderResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4$1","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","checkConsentVersions$","concatMap","currentConsents","currentConsentVersions","templateVersion","newConsentVersions","detectUpdatedVersion","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","loadAnonymousConsentTemplates$","currentConsentTemplates","newConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","currentVersions","newVersions","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","BehaviorSubject","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","subscribeChanges","subscribeRouting","replaceState","onContextInitialized","contextInitialized","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","setContextParamsFromRoute","ngOnDestroy","initializeContext","langService","currService","configInit","siteContextRoutesHandler","contextServiceProviders","APP_INITIALIZER","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","persist$","SiteContextActions.SET_ACTIVE_LANGUAGE","switchMapTo","NEVER","activateLanguage$","bufferCount","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","SiteContextActions.SET_ACTIVE_CURRENCY","activateCurrency$","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","HttpResponseStatus","GlobalMessageConfig","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$r","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","hasMatch","errorResponse","responseStatus","BadGatewayHandler","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","getPriority","getCartIdByUserId","isCartNotFoundError","subjectType","subject","getWishlistName","customerId","isTempCartId","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","handleVoucherOperationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","_errorResponse","resolveApplicable","applicables","matchParams","priorityParams","matchedApplicables","applicable","lastPriority","Infinity","currPriority","HttpErrorInterceptor","handlers","handleErrorResponse","handler","getResponseHandler","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","getAsmState","getAsmUi","ɵ0$s","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$l","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentErrorHandlingService","asmAuthService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","CustomerSupportAgentTokenInterceptor","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$v","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$n","wishList","getWishListId","ɵ2$g","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","CREATE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","RemoveCart","DeleteCart","DeleteCartSuccess","DeleteCartFail","SetTempCart","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","LoadWishListFail","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","CartActions.MergeCart","loadCart","CartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","CartActions.AddEmailToCart","CartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","isJustLoggedIn","loadOrMerge","initActiveCart","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","getLoading","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","withdrawOn","notifier","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","cartModification","CartActions.CartAddEntrySuccess","from","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","CartConnector","CartEffects","cartConnector","loadCart$","groupBy","group$","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","err","createCart$","CartActions.CREATE_CART","conditionalActions","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","CartActions.ResetCartDetails","addEmail$","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","deleteCart$","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","description","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","resetWishList$","MultiCartSelectors.getWishListId","wishListId","activeCartReducer","cartEntitiesReducer","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","CartEventBuilder","activeCartService","registerAddEntry","registerMapped","CartAddEntryEvent","CartAddEntrySuccessEvent","CartAddEntryFailEvent","eventStream$","getAction","actionType","CartEventModule","_CartEventBuilder","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$w","componentsContextSelectorFactory","componentsState","StateUtils.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","StateUtils.initialLoaderState","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","getPageState","ɵ3$9","getPageStateIndex","ɵ4$3","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","MultiCartEffects","setTempCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","CartConfig","CartVoucherService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","CartConfigService","isSelectiveCartEnabled","selectiveCart","SelectiveCartService","userService","cartConfigService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","isEnabled","WishListService","createWishList","getWishList","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$9","initialState$a","cardTypesEntities","deliveryMode","supported","orderDetails","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","steps","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","CheckoutActions.ClearCheckoutData","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","CheckoutActions.LoadCheckoutDetails","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","getDeliveryAddressSelector","getDeliveryModeSelector","getPaymentDetailsSelector","getOrderDetailsSelector","getCheckoutState","checkoutState","getCheckoutStepsState","ɵ4$4","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getAddressVerificationResultsState","ɵ0$A","getAddressVerificationResults","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$q","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","setDeliveryAddress","userId_5","cartId_4","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","cart_1","activeCart","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","configValidatorFactory","configInitializer","validators","ConfigValidatorModule","ConfigValidatorModule_1","configInitializerFactory","ConfigInitializerModule","ConfigInitializerModule_1","CmsStructureConfig","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentConnector","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","uidsLeft","components_1","components_1_1","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","reverse","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","getRouteName","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesConfig","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$c","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","firstChild","x","guardName","pageLabel","urlSegment","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","inject","NavigationEntryItemEffects","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$d","pageContextReducer","newItem","compItems","initialState$f","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","SmartEditService","cmsService","zone","isPreviewPage","_launchedInSmartEdit","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","classList","attr","classes","classItem","run","isLaunchedInSmartEdit","NgZone","DynamicAttributeService","smartEditService","addDynamicAttributes","element","renderer","cmsRenderingContext","componentData","slotData","groupProps","propName","propValue","setAttribute","toLowerCase","FeaturesConfig","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","isFeatureEnabled","feature","featureConfig","FeatureConfigService","isLevel","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","I18nConfig","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","defaultI18nConfig","debug","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","_data","i18nextProviders","ɵ0$C","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","subscriber","isInitialized","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$D","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","PersonalizationConfig","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$E","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$h","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$r","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","merge","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$i","productReference","initialState$j","initialScopedLoaderState","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","StoreFinderConfig","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$I","getFindStoresEntities","ɵ1$s","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","createElement","parseParams","async","addEventListener","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","initialState$k","countryEntities","initialState$l","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$s","titleEntities","initialState$t","initialState$u","updatedConsentTemplate_1","initialState$v","updatedDetails","sorts","initialState$w","coupons","initialState$x","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$y","returnRequests","initialState$z","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityLoaderResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n  loaderErrorSelector,\n  loaderSuccessSelector,\n} from '../loader';\n\nexport function entityLoaderStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderValueSelector(entityState);\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderLoadingSelector(entityState);\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderErrorSelector(entityState);\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderSuccessSelector(entityState);\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityLoaderStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map((userToken) => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getOccUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../../config/config.module';\n\nexport const enum RouteLoadStrategy {\n  /**\n   * Don't reload the data on navigation if it was loaded before\n   */\n  ONCE = 'once',\n  /**\n   * Always reload the data on navigation\n   */\n  ALWAYS = 'always',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n\n    /**\n     * Global load strategy which is used as a fallback for loading data on each navigation\n     */\n    loadStrategy?: RouteLoadStrategy;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteConfig } from './routes-config';\nimport { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  constructor(protected config: RoutingConfig) {}\n\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig = this.config?.routing?.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n\n  getLoadStrategy(): RouteLoadStrategy {\n    return this.config?.routing?.loadStrategy ?? RouteLoadStrategy.ALWAYS;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getSemanticRoute: MemoizedSelector<any, string> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.semanticRoute) || ''\n);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n  semanticRoute?: string;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap((baseSite) => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { CustomEncoder } from '../adapters/cart/custom.encoder';\nimport { OccConfig } from '../config/occ-config';\nimport { DEFAULT_SCOPE } from '../occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private _activeBaseSite: string;\n\n  private get activeBaseSite(): string {\n    return (\n      this._activeBaseSite ??\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this._activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope?: string\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions = { encoder: new CustomEncoder() };\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = {\n          ...httpParamsOptions,\n          ...{ fromString: queryParamsFromEndpoint },\n        };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope?: string): string {\n    const endpointsConfig = this.config.backend?.occ?.endpoints;\n    const endpointConfig = endpointsConfig[endpoint];\n\n    if (scope) {\n      if (endpointConfig?.[scope]) {\n        return endpointConfig?.[scope];\n      }\n      if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {\n        return endpointConfig;\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return (\n      (typeof endpointConfig === 'string'\n        ? endpointConfig\n        : endpointConfig?.[DEFAULT_SCOPE]) || endpoint\n    );\n  }\n}\n","export const DEFAULT_SCOPE = 'default';\n\nexport interface OccEndpoint {\n  default?: string;\n  [scope: string]: string;\n}\n\nexport interface ProductOccEndpoint extends OccEndpoint {\n  list?: string;\n  details?: string;\n  attributes?: string;\n  variants?: string;\n}\n\nexport interface OccEndpoints {\n  /**\n   * Client login (get authorization token)\n   *\n   * @member {string}\n   */\n  login?: string | OccEndpoint;\n\n  /**\n   * Client logout (revoke authorization token)\n   *\n   * @member {string}\n   */\n  revoke?: string | OccEndpoint;\n\n  /**\n   * Get product details for scope\n   *\n   * @member Object\n   */\n  product?: string | ProductOccEndpoint;\n  /**\n   * Get reviews for a product\n   *\n   * @member {string}\n   */\n  productReviews?: string | OccEndpoint;\n  /**\n   * Get a list of product references\n   *\n   * @member {string}\n   */\n  productReferences?: string | OccEndpoint;\n  /**\n   * Get a list of products and additional data\n   *\n   * @member {string}\n   */\n  productSearch?: string | OccEndpoint;\n  /**\n   * Get a list of available suggestions\n   *\n   * @member {string}\n   */\n  productSuggestions?: string | OccEndpoint;\n  /**\n   * Get CMS component details\n   *\n   * @member {string}\n   */\n  component?: string | OccEndpoint;\n  /**\n   * Get a list of CMS component details\n   *\n   * @member {string}\n   */\n  components?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  pages?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  page?: string | OccEndpoint;\n  /**\n   * Get all carts\n   *\n   * @member {string} [carts]\n   */\n  carts?: string | OccEndpoint;\n  /**\n   * Get a cart with a given identifier\n   *\n   * @member {string} [cart]\n   */\n  cart?: string | OccEndpoint;\n  /**\n   * Creates or restore a cart for a user\n   *\n   * @member {string} [createCart]\n   */\n  createCart?: string | OccEndpoint;\n  /**\n   * Deletes a cart with a given cart id\n   *\n   * @member {string} [deleteCart]\n   */\n  deleteCart?: string | OccEndpoint;\n  /**\n   * Adds a product to the cart\n   *\n   * @member {string} [addEntries]\n   */\n  addEntries?: string | OccEndpoint;\n  /**\n   * Update quantity and store the details of a cart entry\n   *\n   * @member {string} [updateEntries]\n   */\n  updateEntries?: string | OccEndpoint;\n  /**\n   * Deletes cart entry\n   *\n   * @member {string} [removeEntries]\n   */\n  removeEntries?: string | OccEndpoint;\n  /**\n   * Assign email to cart\n   *\n   * @member {string} [addEmail]\n   */\n  addEmail?: string | OccEndpoint;\n  /**\n   * Get a store location\n   *\n   * @member {string} [page]\n   */\n  store?: string | OccEndpoint;\n  /**\n   * Get a list of store locations\n   *\n   * @member {string} [page]\n   */\n  stores?: string | OccEndpoint;\n  /**\n   * Gets a store location count per country and regions\n   *\n   * @member {string} [page]\n   */\n  storescounts?: string | OccEndpoint;\n  /**\n   * Get a list of available languages\n   *\n   * @member {string}\n   */\n  languages?: string | OccEndpoint;\n  /**\n   * Get a list of available currencies\n   *\n   * @member {string}\n   */\n  currencies?: string | OccEndpoint;\n  /**\n   * Get a list of countries\n   *\n   * @member {string}\n   */\n  countries?: string | OccEndpoint;\n  /**\n   * Fetch the list of regions for the provided country\n   *\n   * @member {string}\n   */\n  regions?: string | OccEndpoint;\n  /**\n   * Titles used for user's personal info.\n   *\n   * @member {string}\n   */\n  titles?: string | OccEndpoint;\n  /**\n   * Get user details\n   *\n   * @member {string}\n   */\n  user?: string | OccEndpoint;\n  /**\n   * Register a new user.\n   *\n   * @member {string}\n   */\n  userRegister?: string | OccEndpoint;\n  /**\n   * Request an email to reset the password\n   *\n   * @member {string}\n   */\n  userForgotPassword?: string | OccEndpoint;\n  /**\n   * Reset the password once the email is recieved.\n   *\n   * @member {string}\n   */\n  userResetPassword?: string | OccEndpoint;\n  /**\n   * Update the user id with which the user authenticates.\n   *\n   * @member {string}\n   */\n  userUpdateLoginId?: string | OccEndpoint;\n  /**\n   * Update the user's password\n   *\n   * @member {string}\n   */\n  userUpdatePassword?: string | OccEndpoint;\n  /**\n   * Payment details root endpoint.\n   *\n   * @member {string}\n   */\n  paymentDetailsAll?: string | OccEndpoint;\n  /**\n   * Endpoint for a specific payment method.\n   *\n   * @member {string}\n   */\n  paymentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for the list of one user's orders\n   *\n   * @member {string}\n   */\n  orderHistory?: string | OccEndpoint;\n  /**\n   * Endpoint for the details of one user's order\n   *\n   * @member {string}\n   */\n  orderDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for anonymous consent templates\n   *\n   * @member {string}\n   */\n  anonymousConsentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for consent templates\n   *\n   * @member {string}\n   */\n  consentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's consents\n   *\n   * @member {string}\n   */\n  consents?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific previously given consent.\n   *\n   * @member {string}\n   */\n  consentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's addresses\n   *\n   * @member {string}\n   */\n  addresses?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific address\n   *\n   * @member {string}\n   */\n  addressDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for address verification\n   *\n   * @member {string}\n   */\n  addressVerification?: string | OccEndpoint;\n  /**\n   * Endpoint for consignment tracking\n   *\n   * @member {string}\n   */\n  consignmentTracking?: string | OccEndpoint;\n  /**\n   * Endpoint for asm customer search\n   *\n   * @member {string}\n   */\n  asmCustomerSearch?: string | OccEndpoint;\n  /**\n   * Endpoint for cart voucher\n   *\n   * @member {string}\n   */\n  cartVoucher?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  customerCoupons?: string | OccEndpoint;\n  /**\n   * Endpoint for claiming coupon\n   *\n   * @member {string}\n   */\n  claimCoupon?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  couponNotification?: string | OccEndpoint;\n  /**\n   * Explicitly saves a cart\n   *\n   * @member {string}\n   */\n  saveCart?: string | OccEndpoint;\n  /**\n   * Endpoint for notification preference\n   *\n   * @member {string}\n   */\n  notificationPreference?: string | OccEndpoint;\n  /**\n   * Endpoint for product interests\n   *\n   * @member {string}\n   */\n  productInterests?: string | OccEndpoint;\n  /**\n   * Endpoint for getting product interests\n   *\n   * @member {string}\n   */\n  getProductInterests?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancel an order\n   */\n  cancelOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for creating order return request\n   */\n  returnOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for user's order return requests\n   */\n  orderReturns?: string | OccEndpoint;\n\n  /**\n   * Endpoint for order return request details\n   */\n  orderReturnDetail?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancelling return request\n   */\n  cancelReturn?: string | OccEndpoint;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientAuthenticationTokenService {\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAuthenticationTokenService {\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError((error) =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  templateVersion?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [provideDefaultConfig(defaultAuthConfig), ...interceptors],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { Injectable, StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { Config } from '../../config/config.module';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [componentType: string]: CmsComponentMapping;\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n\n  cmsComponents?: CMSComponentConfig;\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { StateUtils } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: StateUtils.LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\nexport const ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS =\n  '[Anonymous Consents] Check Updated Versions';\n\nexport class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport class AnonymousConsentCheckUpdatedVersions {\n  readonly type = ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS;\n  constructor() {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated\n  | AnonymousConsentCheckUpdatedVersions;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(\n      tap(() => this.checkConsentVersions()),\n      map(([dismissed, updated]) => !dismissed || updated)\n    );\n  }\n\n  /**\n   * Dispatches an action to trigger the check\n   * whether the anonymous consent version have been updated\n   */\n  private checkConsentVersions(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.AnonymousConsentCheckUpdatedVersions()\n    );\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    if (!Array.isArray(source.contentSlots.contentSlot)) {\n      source.contentSlots.contentSlot = [source.contentSlots.contentSlot];\n    }\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behaviour, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter((facet) => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find((value) => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount = topValues\n          ? topValues.length\n          : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product: {\n          default:\n            'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(\n      query,\n      searchConfig,\n      longitudeLatitude,\n      radius\n    ).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String(radius);\n    } else {\n      params['query'] = query;\n    }\n\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { AnonymousConsent } from '../../model/consent.model';\nimport { Converter } from '../../util/converter.service';\n\nexport const ANONYMOUS_CONSENT_NORMALIZER = new InjectionToken<\n  Converter<string, AnonymousConsent[]>\n>('AnonymousConsentNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> {\n    // using the endpoint that doesn't set caching headers\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http\n      .head<Occ.ConsentTemplateList>(url, { observe: 'response' })\n      .pipe(\n        catchError((error) => throwError(error)),\n        map((response) => response.headers.get(ANONYMOUS_CONSENTS_HEADER)),\n        this.converter.pipeable(ANONYMOUS_CONSENT_NORMALIZER)\n      );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n\n  /**\n   * Loads anonymous consents in an optimal way.\n   */\n  // TODO{#8158} - make this method required by removing the the `?` after the method name\n  abstract loadAnonymousConsents?(): Observable<AnonymousConsent[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnonymousConsentsService } from '../../../../anonymous-consents/facade/anonymous-consents.service';\nimport { AnonymousConsent } from '../../../../model/consent.model';\nimport { Converter } from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentNormalizer\n  implements Converter<string, AnonymousConsent[]> {\n  constructor(protected anonymousConsentsService: AnonymousConsentsService) {}\n\n  convert(source: string, target: AnonymousConsent[] = []): AnonymousConsent[] {\n    target = this.anonymousConsentsService.decodeAndDeserialize(source);\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ANONYMOUS_CONSENT_NORMALIZER } from '../../../anonymous-consents/connectors/converters';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { AnonymousConsentNormalizer } from './converters/anonymous-consents-normalizer';\nimport { OccReturnRequestNormalizer } from './converters/occ-return-request-normalizer';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n    {\n      provide: ANONYMOUS_CONSENT_NORMALIZER,\n      useExisting: AnonymousConsentNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/rest/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENTS_HEADER,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.anonymousConsentsService.getConsents().pipe(\n      take(1),\n      withLatestFrom(this.authService.isUserLoggedIn()),\n      switchMap(([consents, isUserLoggedIn]) => {\n        if (!this.isOccUrl(request.url)) {\n          return next.handle(request);\n        }\n\n        const clonedRequest = this.handleRequest(consents, request);\n        return next.handle(clonedRequest).pipe(\n          tap((event) => {\n            if (\n              event instanceof HttpResponse &&\n              event.url.startsWith(\n                this.occEndpoints.getUrl('anonymousConsentTemplates')\n              )\n            ) {\n              this.handleResponse(\n                isUserLoggedIn,\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                consents\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Observable, Subscriber, Subscription } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n// PRIVATE API\n\n/**\n * Allows for dynamic adding and removing source observables\n * and exposes them as one merged observable at a property `output$`.\n *\n * Thanks to the `share()` operator used inside, it subscribes to source observables\n * only when someone subscribes to it. And it unsubscribes from source observables\n * when the counter of consumers drops to 0.\n *\n * **To avoid memory leaks**, all manually added sources should be manually removed\n * when not plan to emit values anymore. In particular closed event sources won't be\n * automatically removed.\n */\nexport class MergingSubject<T> {\n  /**\n   * List of already added sources (but not removed yet)\n   */\n  private sources: Observable<T>[] = [];\n\n  /**\n   * For each source: it stores a subscription responsible for\n   * passing all values from source to the consumer\n   */\n  private subscriptionsToSources = new Map<Observable<T>, Subscription>();\n\n  /**\n   * Observable with all sources merged.\n   *\n   * Only after subscribing to it, under the hood it subscribes to the source observables.\n   * When the number of subscribers drops to 0, it unsubscribes from all source observables.\n   * But if later on something subscribes to it again, it subscribes to the source observables again.\n   *\n   * It multicasts the emissions for each subscriber.\n   */\n  readonly output$: Observable<T> = new Observable<T>((consumer) => {\n    // There can be only 0 or 1 consumer of this observable coming from the `share()` operator\n    // that is piped right after this observable.\n    // `share()` not only multicasts the results but also  When all end-subscribers unsubscribe from `share()` operator, it will unsubscribe\n    // from this observable (by the nature `refCount`-nature of the `share()` operator).\n\n    this.consumer = consumer;\n    this.bindAllSourcesToConsumer(consumer);\n\n    return () => {\n      this.consumer = null;\n      this.unbindAllSourcesFromConsumer();\n    };\n  }).pipe(share());\n\n  /**\n   * Reference to the subscriber coming from the `share()` operator piped to the `output$` observable.\n   * For more, see docs of the `output$` observable;\n   */\n  private consumer: Subscriber<any> = null;\n\n  /**\n   * Registers the given source to pass its values to the `output$` observable.\n   *\n   * It does nothing, when the source has been already added (but not removed yet).\n   */\n  add(source: Observable<T>): void {\n    if (this.has(source)) {\n      return;\n    }\n\n    if (this.consumer) {\n      this.bindSourceToConsumer(source, this.consumer);\n    }\n    this.sources.push(source);\n  }\n\n  /**\n   * Starts passing all values from already added sources to consumer\n   */\n  private bindAllSourcesToConsumer(consumer: Subscriber<T>) {\n    this.sources.forEach((source) =>\n      this.bindSourceToConsumer(source, consumer)\n    );\n  }\n\n  /**\n   * Stops passing all values from already added sources to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindAllSourcesFromConsumer() {\n    this.sources.forEach((source) => this.unbindSourceFromConsumer(source));\n  }\n\n  /**\n   * Starts passing all values from a single source to consumer\n   */\n  private bindSourceToConsumer(source: Observable<T>, consumer: Subscriber<T>) {\n    const subscriptionToSource = source.subscribe((val) => consumer.next(val)); // passes all emissions from source to consumer\n    this.subscriptionsToSources.set(source, subscriptionToSource);\n  }\n\n  /**\n   * Stops passing all values from a single source to consumer\n   * (if any consumer is active at the moment)\n   */\n  private unbindSourceFromConsumer(source: Observable<T>) {\n    const subscriptionToSource = this.subscriptionsToSources.get(source);\n    if (subscriptionToSource !== undefined) {\n      subscriptionToSource.unsubscribe();\n      this.subscriptionsToSources.delete(source);\n    }\n  }\n\n  /**\n   * Unregisters the given source so it stops passing its values to `output$` observable.\n   *\n   * Should be used when a source is no longer maintained **to avoid memory leaks**.\n   */\n  remove(source: Observable<T>): void {\n    // clear binding from source to consumer (if any consumer exists at the moment)\n    this.unbindSourceFromConsumer(source);\n\n    // remove source from array\n    let i: number;\n    if ((i = this.sources.findIndex((s) => s === source)) !== -1) {\n      this.sources.splice(i, 1);\n    }\n  }\n\n  /**\n   * Returns whether the given source has been already addded\n   */\n  has(source: Observable<T>): boolean {\n    return this.sources.includes(source);\n  }\n}\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { MergingSubject } from './utils/merging-subject';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * A custom subject that allows for dynamic adding and removing sources to be merged as an output\n   */\n  mergingSubject: MergingSubject<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const eventMeta = this.getEventMeta(eventType);\n    if (eventMeta.mergingSubject.has(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      eventMeta.mergingSubject.add(source$);\n    }\n\n    return () => eventMeta.mergingSubject.remove(source$);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    let output$ = this.getEventMeta(eventType).mergingSubject.output$;\n    if (isDevMode()) {\n      output$ = this.getValidatedEventStream(output$, eventType);\n    }\n    return output$;\n  }\n\n  /**\n   * Dispatches an instance of an individual event.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      mergingSubject: new MergingSubject(),\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private getValidatedEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Type } from '@angular/core';\n\n/**\n * Creates an instance of the given class and fills its properties with the given data.\n *\n * @param type reference to the class\n * @param data object with properties to be copied to the class\n */\nexport function createFrom<T>(type: Type<T>, data: T): T {\n  return Object.assign(new type(), data);\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { createFrom } from '../../util/create-from';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory\n      ? factory(action)\n      : createFrom(eventType, action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateUtils.entityLoaderStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { StateUtils } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: StateUtils.LoaderState<Address[]>;\n  consents: StateUtils.LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: StateUtils.LoaderState<PaymentDetails[]>;\n  orders: StateUtils.LoaderState<OrderHistoryList>;\n  order: StateUtils.LoaderState<Order>;\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: StateUtils.LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: StateUtils.LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: StateUtils.LoaderState<NotificationPreference[]>;\n  productInterests: StateUtils.LoaderState<ProductInterestSearchResult>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateUtils.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateUtils.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateUtils.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateUtils.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityLoaderResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityLoaderResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityLoaderResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityLoaderResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateUtils.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateUtils.loaderSuccessSelector(state),\n    loading: StateUtils.loaderLoadingSelector(state),\n    regions: StateUtils.loaderValueSelector(state).entities,\n    country: StateUtils.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateUtils.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateUtils.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderLoadingSelector);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderSuccessSelector);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n\n  loadAnonymousConsents(): Observable<AnonymousConsent[]> | null {\n    // TODO{#8158} - remove the conditional check, and just `return this.adapter.loadAnonymousConsents()`\n    return this.adapter.loadAnonymousConsents\n      ? this.adapter.loadAnonymousConsents()\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  checkConsentVersions$: Observable<\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplates\n    | AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail\n    | Observable<never>\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS),\n    withLatestFrom(this.anonymousConsentService.getConsents()),\n    concatMap(([_, currentConsents]) => {\n      // TODO{#8158} - remove this if block\n      if (!this.anonymousConsentTemplatesConnector.loadAnonymousConsents()) {\n        return of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates());\n      }\n\n      return this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsents()\n        .pipe(\n          map((newConsents) => {\n            const currentConsentVersions = currentConsents.map(\n              (consent) => consent.templateVersion\n            );\n            const newConsentVersions = newConsents.map(\n              (consent) => consent.templateVersion\n            );\n\n            return this.detectUpdatedVersion(\n              currentConsentVersions,\n              newConsentVersions\n            );\n          }),\n          switchMap((updated) =>\n            updated\n              ? of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates())\n              : EMPTY\n          ),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    withLatestFrom(this.anonymousConsentService.getTemplates()),\n    concatMap(([_, currentConsentTemplates]) =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          mergeMap((newConsentTemplates) => {\n            let updated = false;\n            if (\n              currentConsentTemplates &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      (action) =>\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Compares the given versions and determines if there's a mismatch,\n   * in which case `true` is returned.\n   *\n   * @param currentVersions versions of the current consents\n   * @param newVersions versions of the new consents\n   */\n  private detectUpdatedVersion(\n    currentVersions: number[],\n    newVersions: number[]\n  ): boolean {\n    if (currentVersions.length !== newVersions.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newVersions.length; i++) {\n      if (currentVersions[i] !== newVersions[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n\n  /**\n   * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\n   * - `subscribeChanges` method triggers a navigation on update of site context state\n   * - `subscribeRouting` method updates the site context state on navigation\n   */\n  private isNavigating = false;\n\n  /**\n   * Initializes the two-way synchronization between the site context state and the URL.\n   *\n   * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.\n   */\n  init(): Promise<void> {\n    return new Promise((resolve) => {\n      this.router = this.injector.get<Router>(Router);\n\n      this.location = this.injector.get<Location>(Location);\n      const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n      if (routingParams.length) {\n        this.subscribeChanges(routingParams);\n        this.subscribeRouting(resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * After each change of the site context state, it modifies the current URL in place.\n   * But it happens only for the parameters configured to be persisted in the URL.\n   */\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * After each Angular NavigationStart event it updates the site context state based on\n   * site context params encoded in the anticipated URL.\n   *\n   * In particular, it's responsible for initializing the state of the context params\n   * on page start, reading the values from the URL.\n   *\n   * @param onContextInitialized notify that the initialization of the context was done based on the URL\n   */\n  private subscribeRouting(onContextInitialized: Function) {\n    let contextInitialized = false;\n\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n\n            if (!contextInitialized) {\n              contextInitialized = true;\n              onContextInitialized();\n            }\n          }\n        })\n    );\n  }\n\n  /**\n   * Updates the site context state based on the context params encoded in the given URL\n   *\n   * @param url URL with encoded context params\n   */\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService,\n  siteContextRoutesHandler: SiteContextRoutesHandler\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init().then(() => {\n        baseSiteService.initialize();\n        langService.initialize();\n        currService.initialize();\n      });\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n      SiteContextRoutesHandler,\n    ],\n    multi: true,\n  },\n];\n","import { Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveLanguage } from '../selectors/languages.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.state.select(getActiveLanguage).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.LanguageChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveCurrency } from '../selectors/currencies.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.state.select(getActiveCurrency).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.CurrencyChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateUtils } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\nimport { Applicable, Priority } from '../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler implements Applicable {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  responseStatus?: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n\n  /**\n   * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\n   * a priority can be added to distinguish multiple handles for the same response status.\n   */\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return errorResponse.status === this.responseStatus;\n  }\n\n  abstract getPriority?(): Priority;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { ErrorModel } from '../../model';\nimport { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\n/**\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\n */\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\n/**\n * Check if cart is selective (save for later) based on id.\n */\nexport function isSelectiveCart(cartId = ''): boolean {\n  return cartId.startsWith('selectivecart');\n}\n\n/**\n * Check if the returned error is of type notFound.\n *\n * We additionally check if the cart is not a selective cart.\n * For selective cart this error can happen only when extension is disabled.\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\n * However if that happens we want to handle these errors silently.\n */\nexport function isCartNotFoundError(error: ErrorModel): boolean {\n  return (\n    error.reason === 'notFound' &&\n    error.subjectType === 'cart' &&\n    !isSelectiveCart(error.subject)\n  );\n}\n\n/**\n * Compute wishlist cart name for customer.\n */\nexport function getWishlistName(customerId: string): string {\n  return `wishlist${customerId}`;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart life cycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { isCartNotFoundError } from '../../../../cart/utils/utils';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { Priority } from '../../../../util/applicable';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n    this.handleVoucherOperationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => isCartNotFoundError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleVoucherOperationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter(\n        (e) =>\n          e.message === 'coupon.invalid.code.provided' &&\n          e.type === 'VoucherOperationError'\n      )\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.invalidCodeProvided' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Unknown Error Handler works as an fallback, to handle errors that were\n * not handled by any other error handlers\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  /**\n   * hasMatch always returns true, to mach all errors\n   */\n  hasMatch(_errorResponse): boolean {\n    return true;\n  }\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n\n  /**\n   * Fallback priority assures that the handler is used as a last resort\n   */\n  getPriority() {\n    return Priority.FALLBACK;\n  }\n}\n","export const enum Priority {\n  /**\n   * Used as fallback, when there is no other matches\n   */\n  FALLBACK = -50,\n  /**\n   * Used mainly in libraries, easy overridable\n   */\n  LOW = -10,\n  /**\n   * Default priority\n   */\n  NORMAL = 0,\n  /**\n   * High priority for matches that should take precedence\n   */\n  HIGH = 10,\n}\n\n/**\n * Base interface for implementing applicables in a consistent way\n *\n * Applicables are mainly used to find best matching one from multi provided\n * classes, like handlers, resolvers, etc.\n */\nexport interface Applicable {\n  /**\n   * Returns true if applicable can be used to handle specified condition\n   */\n  hasMatch?(...params): boolean;\n\n  /**\n   * Returns priority or score for specified applicable.\n   *\n   * If multiple applicables can be applied to specified condition, the one\n   * with highest priority or score wins.\n   */\n  getPriority?(...params): Priority | number;\n}\n\n/**\n * Helper logic to resolve best matching Applicable\n *\n * Finding best match is a two step process:\n * 1. Find all matching applicables\n *    - all applicables for which hasMatch(...matchParams) will return true\n *    - all applicables without hasMatch method (implicit always match)\n * 2. Find the applicable with highest priority\n *    - applicable with highest getPriority(...priorityParams) will win\n *    - applicable without getPriority method is treated as Priotity.NORMAL or 0\n *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins\n *\n * @param applicables - array or applicable-like instancese\n * @param matchParams - array of parameters passed for hasMatch calls\n * @param priorityParams - array of parameters passed for getPriority calls\n */\nexport function resolveApplicable<T extends Applicable>(\n  applicables: T[] = [],\n  matchParams: any[] = [],\n  priorityParams: any[] = []\n): T | undefined {\n  const matchedApplicables = applicables.filter(\n    (applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams)\n  );\n\n  if (matchedApplicables.length < 2) {\n    return matchedApplicables[0];\n  }\n\n  let lastPriority = -Infinity;\n  return matchedApplicables.reduce((acc, curr) => {\n    const currPriority = curr.getPriority\n      ? curr.getPriority(...priorityParams)\n      : Priority.NORMAL;\n    if (lastPriority > currPriority) {\n      return acc;\n    }\n    lastPriority = currPriority;\n    return curr;\n  }, undefined);\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\nimport { resolveApplicable } from '../../util/applicable';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    return resolveApplicable(this.handlers, [response]);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [provideDefaultConfigFactory(defaultGlobalMessageConfigFactory)],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [...interceptors, provideDefaultConfig(defaultAsmConfig)],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi): void {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\nimport { Applicable } from '../../util/applicable';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver implements Applicable {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n\n  hasMatch(page: Page): boolean {\n    return this.getScore(page) > 0;\n  }\n\n  getPriority(page: Page): number {\n    return this.getScore(page);\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n// TODO(#7241): Drop after event system implementation for cart vouchers\n/**\n * Add voucher process const\n * @deprecated since 2.0\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { OrderEntry } from '../../../model/order.model';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      deliveryModeChanged: boolean;\n      entry: OrderEntry;\n      quantityAdded: number;\n      statusCode: string;\n      statusMessage: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      error: any;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// TODO(#7241): Remove when switching to event system for vouchers\n/**\n * Resets add voucher process\n *\n * @deprecated since 2.0\n */\nexport class CartResetAddVoucher extends EntityLoaderResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport type MultiCartActions =\n  | SetTempCart\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadWishListPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   */\n  customerId: string;\n  /**\n   * When we try load wishlist for the first time we don't know cart id.\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\n   */\n  tempCartId: string;\n}\n\nexport class LoadWishList extends EntityLoadAction {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: LoadWishListPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface LoadWishListSuccessPayload {\n  cart: Cart;\n  userId: string;\n  /**\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\n   * we get temporary cartId that was used to keep track of loading state.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  tempCartId?: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Wish list cart id. Extracted from cart content (code property).\n   */\n  cartId: string;\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: LoadWishListSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadWishListFailPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Cart id used as a store entity key. This could point either to some\n   * temporary cart used to track loading/error state or to normal wish list entity.\n   */\n  cartId: string;\n  error: any;\n}\n\nexport class LoadWishListFail extends EntityFailAction {\n  readonly type = LOAD_WISH_LIST_FAIL;\n  constructor(public payload: LoadWishListFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess\n  | LoadWishListFail;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActiveCartService {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map((cartId) => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n      if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n        if (this.isJustLoggedIn(userId)) {\n          this.loadOrMerge(this.cartId);\n        }\n      }\n      this.previousUserId = userId;\n    });\n\n    this.activeCartId$.subscribe((cartId) => {\n      this.cartId = cartId;\n    });\n\n    this.initActiveCart();\n  }\n\n  private initActiveCart() {\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap((cart) => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map((cart) => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart loading state\n   */\n  getLoading(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cartEntity) => cartEntity.loading),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter((cartState) => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap((cartState) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        (cartState) =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap((cartState) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter((cartState) => !this.isCartCreating(cartState)),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe((cartState) => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartModification } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (cartModification: CartModification) =>\n              new CartActions.CartAddEntrySuccess({\n                ...payload,\n                ...(cartModification as Required<CartModification>),\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(\n          payload.userId,\n          payload.cartId,\n          payload.entryNumber,\n          payload.quantity\n        )\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddVoucherFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map((action: CartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            mergeMap((cart: Cart) => {\n              let actions = [];\n              if (cart) {\n                actions.push(\n                  new CartActions.LoadCartSuccess({\n                    ...payload,\n                    cart,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                  })\n                );\n\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\n                  );\n                }\n              } else {\n                actions = [\n                  new CartActions.LoadCartFail({\n                    ...payload,\n                    error: {},\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // Reload in case of expired coupon.\n                  return of(new CartActions.LoadCart({ ...payload }));\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) =>\n                    isCartNotFoundError(err) ||\n                    err.reason === 'UnknownResourceError'\n                );\n                if (cartNotFoundErrors.length > 0) {\n                  // Remove cart as it doesn't exist on backend (selective cart always exists).\n                  return of(\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\n                  );\n                }\n              }\n              return of(\n                new CartActions.LoadCartFail({\n                  ...payload,\n                  error: makeErrorSerializable(error),\n                })\n              );\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new CartActions.MergeCartSuccess({\n                  extraData: payload.extraData,\n                  userId: payload.userId,\n                  tempCartId: payload.tempCartId,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                ...payload,\n                cart,\n                cartId: getCartIdByUserId(cart, payload.userId),\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  @Effect()\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [new CartActions.ResetCartDetails()];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.ADD_EMAIL_TO_CART),\n    map((action: CartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CartActions.AddEmailToCartSuccess({\n                ...payload,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.AddEmailToCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.DELETE_CART),\n    map((action: CartActions.DeleteCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new CartActions.DeleteCartSuccess({ ...payload });\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.DeleteCartFail({\n              ...payload,\n              error: makeErrorSerializable(error),\n            }),\n            // Error might happen in higher backend layer and cart could still be removed.\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n            new CartActions.LoadCart({\n              ...payload,\n            }),\n          ])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.RemoveCart\n    | CartActions.CreateWishList\n    | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId, tempCartId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === getWishlistName(customerId)\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                  tempCartId,\n                  customerId,\n                  cartId: getCartIdByUserId(wishList, userId),\n                }),\n                new CartActions.RemoveCart({ cartId: tempCartId }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: getWishlistName(customerId),\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.LoadWishListFail({\n              userId,\n              cartId: tempCartId,\n              customerId,\n              error: makeErrorSerializable(error),\n            }),\n          ])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({\n              cart: wishList,\n              userId,\n              cartId: getCartIdByUserId(wishList, userId),\n            }),\n          ]),\n          catchError((error) =>\n            from([\n              new CartActions.LoadWishListFail({\n                userId,\n                cartId: wishListId,\n                error: makeErrorSerializable(error),\n              }),\n            ])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS:\n      if (action.payload?.cartId === state) {\n        return activeCartInitialState;\n      }\n      return state;\n    case CartActions.CLEAR_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { OrderEntry } from '../../model/order.model';\n\n/**\n * Base cart event. Most cart events should have `cartId` and `userId`.\n */\nexport interface CartEvent {\n  cartId: string;\n  userId: string;\n}\n\n// =====================================================================\n\nexport class CartAddEntryEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n  entry: OrderEntry;\n  quantityAdded: number;\n  deliveryModeChanged: boolean;\n}\n\nexport class CartAddEntryFailEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\nimport { createFrom } from '../../util/create-from';\nimport { ActiveCartService } from '../facade/active-cart.service';\nimport { CartActions } from '../store/index';\nimport {\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n} from './cart.events';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerAddEntry();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry() {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      withLatestFrom(this.activeCartService.getActiveCartId()),\n      filter(\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\n      ),\n      map(([action]) => createFrom(mapping.event, action.payload))\n    );\n\n    return this.event.register(mapping.event, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {}\n}\n","import { CmsComponent } from '../../model';\nimport { StateUtils } from '../../state/index';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = StateUtils.EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: StateUtils.LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: StateUtils.EntityLoaderState<string>;\n  product: StateUtils.EntityLoaderState<string>;\n  category: StateUtils.EntityLoaderState<string>;\n  catalog: StateUtils.EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: StateUtils.EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: StateUtils.EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error?: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateUtils } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateUtils.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateUtils.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      StateUtils.initialLoaderState\n  );\n};\n\n/**\n * This selector will return:\n *   - true: component for this context exists\n *   - false: component for this context doesn't exist\n *   - undefined: if the exists status for component is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean | undefined> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) => StateUtils.loaderValueSelector(loaderState)\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent | undefined> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\n/**\n * This selector will return:\n *   - CmsComponent instance: if we have component data for specified context\n *   - null: if there is no component data for specified context\n *   - undefined: if status of component data for specified context is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent | null | undefined> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      switch (exists) {\n        case true:\n          return componentState;\n        case false:\n          return null;\n        case undefined:\n          return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  StateUtils.EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateUtils.entityLoaderStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateUtils.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): StateUtils.EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateUtils.entityLoaderStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateUtils.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots?: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent | null>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      filter((component) => component !== undefined)\n    ) as Observable<T | null>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: (state) => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\n    })\n  );\n\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { CartEventModule } from './event/cart-event.module';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule, CartEventModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CartConfig {\n  cart?: {\n    selectiveCart?: {\n      enabled?: boolean;\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process error flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process success flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process loading flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Reset add voucher process\n   * @deprecated since 2.0\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartConfig } from '../config/cart-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConfigService {\n  constructor(protected config: CartConfig) {}\n\n  isSelectiveCartEnabled(): boolean {\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartConfigService } from '../services/cart-config.service';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService,\n    protected cartConfigService: CartConfigService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  /**\n   * Indicates if selectiveCart feature is enabled based on cart configuration.\n   */\n  isEnabled(): boolean {\n    return this.cartConfigService.isSelectiveCartEnabled();\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getWishlistName } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(\n      new CartActions.LoadWishList({\n        userId,\n        customerId,\n        tempCartId: getWishlistName(customerId),\n      })\n    );\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.CheckoutClearMiscsData(),\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                ...payload,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (cartId && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map((loadedComponents) => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(\n      switchMap((components) => {\n        const actions: (\n          | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n          | CmsActions.LoadCmsComponentFail\n        )[] = [];\n        const uidsLeft = new Set<string>(componentUids);\n        for (const component of components) {\n          actions.push(\n            new CmsActions.LoadCmsComponentSuccess({\n              component,\n              uid: component.uid,\n              pageContext,\n            })\n          );\n          uidsLeft.delete(component.uid);\n        }\n        // we have to emit LoadCmsComponentFail for all component's uids that\n        // are missing from the response\n        uidsLeft.forEach((uid) => {\n          actions.push(\n            new CmsActions.LoadCmsComponentFail({\n              uid,\n              pageContext,\n            })\n          );\n        });\n        return from(actions);\n      }),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n    semanticRoute: '',\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    const { url } = routerState;\n    const { queryParams } = routerState.root;\n\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n    let semanticRoute: string;\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n      if (state.data.routeName) {\n        semanticRoute = state.data.routeName;\n      }\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n    const { params } = state;\n\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n        semanticRoute = 'product';\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n        semanticRoute = 'category';\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n        semanticRoute = 'brand';\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return {\n      url,\n      queryParams,\n      params,\n      context,\n      cmsRequired,\n      semanticRoute,\n    };\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state: boolean | undefined,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, filter, map, switchMap } from 'rxjs/operators';\nimport { resolveApplicable } from '../../util/applicable';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: Observable<PageMeta>[] = Object.keys(\n      this.resolverMethods\n    )\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      debounceTime(0), // avoid partial data emissions when all methods resolve at the same time\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    return resolveApplicable(this.resolvers, [page], [page]);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n  private _launchedInSmartEdit = false;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this._launchedInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter((site) => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe((site) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchedInSmartEdit(): boolean {\n    return this._launchedInSmartEdit;\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\nimport { SmartEditService } from '../../smart-edit/services/smart-edit.service';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { ContentSlotData } from '../model/content-slot-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  constructor(protected smartEditService: SmartEditService) {}\n\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param element: slot or cms component element\n   * @param renderer\n   * @param cmsRenderingContext: an object containing properties in each cms item response data\n   */\n  addDynamicAttributes(\n    element: Element,\n    renderer: Renderer2,\n    cmsRenderingContext: {\n      componentData?: ContentSlotComponentData;\n      slotData?: ContentSlotData;\n    }\n  ): void {\n    const properties =\n      cmsRenderingContext.componentData?.properties ||\n      cmsRenderingContext.slotData?.properties;\n\n    if (properties && this.smartEditService.isLaunchedInSmartEdit()) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  isDevMode,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\nimport { TranslationService } from './translation.service';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if (!input) {\n      if (isDevMode()) {\n        console.error(\n          `The given input for the cxTranslate pipe (${input}) is invalid and cannot be translated`\n        );\n      }\n      return;\n    }\n\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { HttpClient } from '@angular/common/http';\nimport i18next, { InitOptions } from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode } from '@angular/core';\nimport i18next from 'i18next';\nimport { Observable } from 'rxjs';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\nimport { TranslationService } from '../translation.service';\n\n@Injectable({ providedIn: 'root' })\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (!i18next.isInitialized) {\n          return;\n        }\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { CxDatePipe } from './date.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { TranslatePipe } from './translate.pipe';\nimport { TranslationService } from './translation.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: TranslationService, useExisting: I18nextTranslationService },\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, (state) => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(getOpenIdTokenState, StateUtils.loaderValueSelector);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderLoadingSelector);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderSuccessSelector);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderErrorSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError((error) => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<\n    KymaActions.LoadOpenIdToken\n  > = this.actions$.pipe(\n    ofType<KymaActions.LoadOpenIdTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n      )\n    ),\n    map(\n      ([, loginAction]) =>\n        new KymaActions.LoadOpenIdToken({\n          username: loginAction.payload.userId,\n          password: loginAction.payload.password,\n        })\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap((payload) =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError((error) =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [provideDefaultConfig(defaultKymaConfig)],\n})\nexport class KymaModule {}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { Page } from '../../cms/model/page.model';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  StateUtils.EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, StateUtils.LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    (details) =>\n      StateUtils.entityLoaderStateSelector(details, code)[scope] ||\n      StateUtils.initialLoaderState\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap((references) => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\nimport { DEFAULT_SCOPE } from '../../occ/occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = DEFAULT_SCOPE\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY)?.zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> => {\n    if (action && action.meta && action.meta.entityType === entityType) {\n      return {\n        ...state,\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\n      };\n    }\n    return state;\n  };\n}\n","import {\n  EntityScopedLoaderState,\n  ScopedLoaderState,\n} from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityScopedLoaderState<T>,\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\n) => EntityScopedLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [...pageTitleResolvers],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl?: string;\n    apiKey?: string;\n    scale?: number;\n    selectedMarkerScale?: number;\n    radius?: number;\n  };\n}\n","import { StateUtils } from '../../state/utils';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: StateUtils.LoaderState<FindStoresState>;\n  viewAllStores: StateUtils.LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n      radius?: number;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateUtils.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   * @param radius radius of the scope from the center point\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean,\n    radius?: number\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n              radius: radius,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n          radius: radius,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   */\n  public load(src: string, params?: Object, callback?: EventListener): void {\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n    radius: 50000,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude,\n          payload.radius\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [provideDefaultConfig(defaultStoreFinderConfig)],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadUserOrders({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequestList({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) => {\n            error.error?.errors.forEach((err) =>\n              this.globalMessageService.add(\n                err.message,\n                GlobalMessageType.MSG_TYPE_ERROR\n              )\n            );\n\n            return of(\n              new UserActions.CancelOrderFail(makeErrorSerializable(error))\n            );\n          })\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateUtils } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateUtils.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","export const testestsd = 'sare';\n"]}