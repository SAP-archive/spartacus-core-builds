import { __assign } from "tslib";
import { CheckoutActions } from '../actions/index';
export var initialState = {
    entities: {},
    selected: undefined,
};
export function reducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case CheckoutActions.LOAD_PAYMENT_TYPES_SUCCESS: {
            var paymentTypes = action.payload;
            var entities = paymentTypes.reduce(function (paymentTypesEntities, name) {
                var _a;
                return __assign(__assign({}, paymentTypesEntities), (_a = {}, _a[name.code] = name, _a));
            }, __assign({}, state.entities));
            return __assign(__assign({}, state), { entities: entities });
        }
        case CheckoutActions.SET_PAYMENT_TYPE_SUCCESS: {
            return __assign(__assign({}, state), { selected: action.payload.paymentType.code });
        }
        case CheckoutActions.CLEAR_CHECKOUT_DATA: {
            return __assign(__assign({}, state), { selected: undefined });
        }
        case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {
            return initialState;
        }
    }
    return state;
}
export var getPaymentTypesEntites = function (state) {
    return state.entities;
};
export var getSelectedPaymentType = function (state) {
    return state.selected;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC10eXBlcy5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NoZWNrb3V0L3N0b3JlL3JlZHVjZXJzL3BheW1lbnQtdHlwZXMucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR25ELE1BQU0sQ0FBQyxJQUFNLFlBQVksR0FBc0I7SUFDN0MsUUFBUSxFQUFFLEVBQUU7SUFDWixRQUFRLEVBQUUsU0FBUztDQUNwQixDQUFDO0FBRUYsTUFBTSxVQUFVLE9BQU8sQ0FDckIsS0FBb0IsRUFDcEIsTUFHMEM7SUFKMUMsc0JBQUEsRUFBQSxvQkFBb0I7SUFNcEIsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssZUFBZSxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFDL0MsSUFBTSxZQUFZLEdBQWtCLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDbkQsSUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FDbEMsVUFDRSxvQkFBcUQsRUFDckQsSUFBaUI7O2dCQUVqQiw2QkFDSyxvQkFBb0IsZ0JBQ3RCLElBQUksQ0FBQyxJQUFJLElBQUcsSUFBSSxPQUNqQjtZQUNKLENBQUMsZUFFSSxLQUFLLENBQUMsUUFBUSxFQUVwQixDQUFDO1lBRUYsNkJBQ0ssS0FBSyxLQUNSLFFBQVEsVUFBQSxJQUNSO1NBQ0g7UUFFRCxLQUFLLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQzdDLDZCQUNLLEtBQUssS0FDUixRQUFRLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUN6QztTQUNIO1FBRUQsS0FBSyxlQUFlLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUN4Qyw2QkFDSyxLQUFLLEtBQ1IsUUFBUSxFQUFFLFNBQVMsSUFDbkI7U0FDSDtRQUVELEtBQUssZUFBZSxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUMsT0FBTyxZQUFZLENBQUM7U0FDckI7S0FDRjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLHNCQUFzQixHQUFHLFVBQUMsS0FBd0I7SUFDN0QsT0FBQSxLQUFLLENBQUMsUUFBUTtBQUFkLENBQWMsQ0FBQztBQUNqQixNQUFNLENBQUMsSUFBTSxzQkFBc0IsR0FBRyxVQUFDLEtBQXdCO0lBQzdELE9BQUEsS0FBSyxDQUFDLFFBQVE7QUFBZCxDQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXltZW50VHlwZSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2NhcnQubW9kZWwnO1xuaW1wb3J0IHsgQ2hlY2tvdXRBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5pbXBvcnQgeyBQYXltZW50VHlwZXNTdGF0ZSB9IGZyb20gJy4uL2NoZWNrb3V0LXN0YXRlJztcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogUGF5bWVudFR5cGVzU3RhdGUgPSB7XG4gIGVudGl0aWVzOiB7fSxcbiAgc2VsZWN0ZWQ6IHVuZGVmaW5lZCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyKFxuICBzdGF0ZSA9IGluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOlxuICAgIHwgQ2hlY2tvdXRBY3Rpb25zLlBheW1lbnRUeXBlc0FjdGlvblxuICAgIHwgQ2hlY2tvdXRBY3Rpb25zLkNsZWFyQ2hlY2tvdXREYXRhXG4gICAgfCBDaGVja291dEFjdGlvbnMuQ2hlY2tvdXRDbGVhck1pc2NzRGF0YVxuKTogUGF5bWVudFR5cGVzU3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBDaGVja291dEFjdGlvbnMuTE9BRF9QQVlNRU5UX1RZUEVTX1NVQ0NFU1M6IHtcbiAgICAgIGNvbnN0IHBheW1lbnRUeXBlczogUGF5bWVudFR5cGVbXSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgY29uc3QgZW50aXRpZXMgPSBwYXltZW50VHlwZXMucmVkdWNlKFxuICAgICAgICAoXG4gICAgICAgICAgcGF5bWVudFR5cGVzRW50aXRpZXM6IHsgW2NvZGU6IHN0cmluZ106IFBheW1lbnRUeXBlIH0sXG4gICAgICAgICAgbmFtZTogUGF5bWVudFR5cGVcbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnBheW1lbnRUeXBlc0VudGl0aWVzLFxuICAgICAgICAgICAgW25hbWUuY29kZV06IG5hbWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC4uLnN0YXRlLmVudGl0aWVzLFxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZW50aXRpZXMsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgQ2hlY2tvdXRBY3Rpb25zLlNFVF9QQVlNRU5UX1RZUEVfU1VDQ0VTUzoge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHNlbGVjdGVkOiBhY3Rpb24ucGF5bG9hZC5wYXltZW50VHlwZS5jb2RlLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIENoZWNrb3V0QWN0aW9ucy5DTEVBUl9DSEVDS09VVF9EQVRBOiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc2VsZWN0ZWQ6IHVuZGVmaW5lZCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY2FzZSBDaGVja291dEFjdGlvbnMuQ0hFQ0tPVVRfQ0xFQVJfTUlTQ1NfREFUQToge1xuICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRQYXltZW50VHlwZXNFbnRpdGVzID0gKHN0YXRlOiBQYXltZW50VHlwZXNTdGF0ZSkgPT5cbiAgc3RhdGUuZW50aXRpZXM7XG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWRQYXltZW50VHlwZSA9IChzdGF0ZTogUGF5bWVudFR5cGVzU3RhdGUpID0+XG4gIHN0YXRlLnNlbGVjdGVkO1xuIl19