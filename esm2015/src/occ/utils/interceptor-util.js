import { HttpHeaders } from '@angular/common/http';
export const USE_CLIENT_TOKEN = 'cx-use-client-token';
export const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';
export const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';
export class InterceptorUtil {
    static createHeader(headerName, interceptorParam, headers) {
        if (headers) {
            return headers.append(headerName, JSON.stringify(interceptorParam));
        }
        headers = new HttpHeaders().set(headerName, JSON.stringify(interceptorParam));
        return headers;
    }
    static removeHeader(headerName, request) {
        const updatedHeaders = request.headers.delete(headerName);
        return request.clone({ headers: updatedHeaders });
    }
    static getInterceptorParam(headerName, headers) {
        const rawValue = headers.get(headerName);
        if (rawValue) {
            return JSON.parse(rawValue);
        }
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJjZXB0b3ItdXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzcGFydGFjdXMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9vY2MvdXRpbHMvaW50ZXJjZXB0b3ItdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFFaEUsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcscUJBQXFCLENBQUM7QUFDdEQsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQUcsc0JBQXNCLENBQUM7QUFDdkUsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcscUJBQXFCLENBQUM7QUFFN0QsTUFBTSxPQUFPLGVBQWU7SUFDMUIsTUFBTSxDQUFDLFlBQVksQ0FDakIsVUFBa0IsRUFDbEIsZ0JBQW1CLEVBQ25CLE9BQXFCO1FBRXJCLElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztTQUNyRTtRQUNELE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FDN0IsVUFBVSxFQUNWLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FDakMsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUNqQixVQUFrQixFQUNsQixPQUF5QjtRQUV6QixNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixDQUFJLFVBQWtCLEVBQUUsT0FBb0I7UUFDcEUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6QyxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM3QjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBIZWFkZXJzLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuZXhwb3J0IGNvbnN0IFVTRV9DTElFTlRfVE9LRU4gPSAnY3gtdXNlLWNsaWVudC10b2tlbic7XG5leHBvcnQgY29uc3QgVVNFX0NVU1RPTUVSX1NVUFBPUlRfQUdFTlRfVE9LRU4gPSAnY3gtdXNlLWNzYWdlbnQtdG9rZW4nO1xuZXhwb3J0IGNvbnN0IFRPS0VOX1JFVk9DQVRJT05fSEVBREVSID0gJ2N4LXRva2VuLXJldm9jYXRpb24nO1xuXG5leHBvcnQgY2xhc3MgSW50ZXJjZXB0b3JVdGlsIHtcbiAgc3RhdGljIGNyZWF0ZUhlYWRlcjxUPihcbiAgICBoZWFkZXJOYW1lOiBzdHJpbmcsXG4gICAgaW50ZXJjZXB0b3JQYXJhbTogVCxcbiAgICBoZWFkZXJzPzogSHR0cEhlYWRlcnNcbiAgKTogSHR0cEhlYWRlcnMge1xuICAgIGlmIChoZWFkZXJzKSB7XG4gICAgICByZXR1cm4gaGVhZGVycy5hcHBlbmQoaGVhZGVyTmFtZSwgSlNPTi5zdHJpbmdpZnkoaW50ZXJjZXB0b3JQYXJhbSkpO1xuICAgIH1cbiAgICBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuc2V0KFxuICAgICAgaGVhZGVyTmFtZSxcbiAgICAgIEpTT04uc3RyaW5naWZ5KGludGVyY2VwdG9yUGFyYW0pXG4gICAgKTtcbiAgICByZXR1cm4gaGVhZGVycztcbiAgfVxuXG4gIHN0YXRpYyByZW1vdmVIZWFkZXIoXG4gICAgaGVhZGVyTmFtZTogc3RyaW5nLFxuICAgIHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT5cbiAgKTogSHR0cFJlcXVlc3Q8YW55PiB7XG4gICAgY29uc3QgdXBkYXRlZEhlYWRlcnMgPSByZXF1ZXN0LmhlYWRlcnMuZGVsZXRlKGhlYWRlck5hbWUpO1xuICAgIHJldHVybiByZXF1ZXN0LmNsb25lKHsgaGVhZGVyczogdXBkYXRlZEhlYWRlcnMgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0SW50ZXJjZXB0b3JQYXJhbTxUPihoZWFkZXJOYW1lOiBzdHJpbmcsIGhlYWRlcnM6IEh0dHBIZWFkZXJzKTogVCB7XG4gICAgY29uc3QgcmF3VmFsdWUgPSBoZWFkZXJzLmdldChoZWFkZXJOYW1lKTtcbiAgICBpZiAocmF3VmFsdWUpIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHJhd1ZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuIl19