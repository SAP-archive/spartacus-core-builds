import { __decorate } from "tslib";
import { GlobalMessageService } from '../../facade/global-message.service';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../facade/global-message.service";
let HttpErrorHandler = class HttpErrorHandler {
    constructor(globalMessageService) {
        this.globalMessageService = globalMessageService;
    }
    /**
     * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status
     * a priority can be added to distinguish multiple handles for the same response status.
     */
    hasMatch(errorResponse) {
        return errorResponse.status === this.responseStatus;
    }
};
HttpErrorHandler.ctorParameters = () => [
    { type: GlobalMessageService }
];
HttpErrorHandler.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpErrorHandler_Factory() { return new HttpErrorHandler(i0.ɵɵinject(i1.GlobalMessageService)); }, token: HttpErrorHandler, providedIn: "root" });
HttpErrorHandler = __decorate([
    Injectable({
        providedIn: 'root',
    })
], HttpErrorHandler);
export { HttpErrorHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1lcnJvci5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNwYXJ0YWN1cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2dsb2JhbC1tZXNzYWdlL2h0dHAtaW50ZXJjZXB0b3JzL2hhbmRsZXJzL2h0dHAtZXJyb3IuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBTTNDLElBQXNCLGdCQUFnQixHQUF0QyxNQUFzQixnQkFBZ0I7SUFDcEMsWUFBc0Isb0JBQTBDO1FBQTFDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7SUFBRyxDQUFDO0lBbUJwRTs7O09BR0c7SUFDSCxRQUFRLENBQUMsYUFBZ0M7UUFDdkMsT0FBTyxhQUFhLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDdEQsQ0FBQztDQUdGLENBQUE7O1lBNUI2QyxvQkFBb0I7OztBQUQ1QyxnQkFBZ0I7SUFIckMsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztHQUNvQixnQkFBZ0IsQ0E2QnJDO1NBN0JxQixnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBHbG9iYWxNZXNzYWdlU2VydmljZSB9IGZyb20gJy4uLy4uL2ZhY2FkZS9nbG9iYWwtbWVzc2FnZS5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcGxpY2FibGUsIFByaW9yaXR5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9hcHBsaWNhYmxlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEh0dHBFcnJvckhhbmRsZXIgaW1wbGVtZW50cyBBcHBsaWNhYmxlIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGdsb2JhbE1lc3NhZ2VTZXJ2aWNlOiBHbG9iYWxNZXNzYWdlU2VydmljZSkge31cblxuICAvKipcbiAgICogVGhlIGh0dHAgcmVzcG9uc2Ugc3RhdHVzIG51bWJlciB3aGljaCBpcyBoYW5kbGVkIGJ5IHRoaXMgaGFuZGxlci5cbiAgICogSW1wbGVtZW50YXRpb25zIGNhbiBzZXQgdGhlIHJlc3BvbnNlIHN0YXR1cyBudW1iZXIsIGkuZS4gNDA0LCBzbyB0aGF0XG4gICAqIHRoZSBoYW5kbGVyIGNhbiBiZSBmb3VuZCBieSB0aGUgZXJyb3IgaW50ZXJjZXB0b3IuXG4gICAqL1xuICByZXNwb25zZVN0YXR1cz86IG51bWJlcjtcblxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgZXJyb3IgcmVzcG9uc2UgZm9yIHRoZSByZXNwb3NlIHN0YXR1cyB0aGF0IGlzIHJlZ2lzdGVyIGZvciB0aGUgaGFuZGxlclxuICAgKiBAcGFyYW0geyBIdHRwUmVxdWVzdDxhbnk+IH0gcmVxdWVzdCA6IGh0dHAgcmVxdWVzdFxuICAgKiBAcGFyYW0geyBIdHRwRXJyb3JSZXNwb25zZSB9IGVycm9yUmVzcG9uc2UgOiBIdHRwIGVycm9yIHJlc3BvbnNlXG4gICAqL1xuICBhYnN0cmFjdCBoYW5kbGVFcnJvcihcbiAgICByZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LFxuICAgIGVycm9yUmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXJzIGFyZSBtYXRjaGVkIGJ5IHRoZSBlcnJvciBgcmVzcG9uc2VTdGF0dXNgIChpLmUuIDQwNCkuIE9uIHRvcCBvZiB0aGUgbWF0Y2hpbmcgc3RhdHVzXG4gICAqIGEgcHJpb3JpdHkgY2FuIGJlIGFkZGVkIHRvIGRpc3Rpbmd1aXNoIG11bHRpcGxlIGhhbmRsZXMgZm9yIHRoZSBzYW1lIHJlc3BvbnNlIHN0YXR1cy5cbiAgICovXG4gIGhhc01hdGNoKGVycm9yUmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGVycm9yUmVzcG9uc2Uuc3RhdHVzID09PSB0aGlzLnJlc3BvbnNlU3RhdHVzO1xuICB9XG5cbiAgYWJzdHJhY3QgZ2V0UHJpb3JpdHk/KCk6IFByaW9yaXR5O1xufVxuIl19