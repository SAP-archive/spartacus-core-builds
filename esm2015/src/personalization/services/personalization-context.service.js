import { Injectable } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import { CmsService } from '../../cms/facade/cms.service';
import { PersonalizationConfig } from '../config/personalization-config';
import * as i0 from "@angular/core";
import * as i1 from "../config/personalization-config";
import * as i2 from "../../cms/facade/cms.service";
export class PersonalizationContextService {
    constructor(config, cmsService) {
        this.config = config;
        this.cmsService = cmsService;
    }
    getPersonalizationContext() {
        return this.cmsService.getCurrentPage().pipe(filter(Boolean), map((page) => page.slots[this.config.personalization.context.slotPosition]), filter(Boolean), map((slot) => slot.components.find((i) => i.uid === this.config.personalization.context.componentId)), filter(Boolean), map((component) => this.buildPersonalizationContext(component.properties.script.data)));
    }
    buildPersonalizationContext(data) {
        const context = JSON.parse(atob(data));
        context.actions.forEach((action) => {
            Object.keys(action).forEach((key) => {
                action[key] = atob(action[key]);
            });
        });
        for (let i = 0; i < context.segments.length; i++) {
            context.segments[i] = atob(context.segments[i]);
        }
        return context;
    }
}
PersonalizationContextService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PersonalizationContextService_Factory() { return new PersonalizationContextService(i0.ɵɵinject(i1.PersonalizationConfig), i0.ɵɵinject(i2.CmsService)); }, token: PersonalizationContextService, providedIn: "root" });
PersonalizationContextService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PersonalizationContextService.ctorParameters = () => [
    { type: PersonalizationConfig },
    { type: CmsService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc29uYWxpemF0aW9uLWNvbnRleHQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL3BlcnNvbmFsaXphdGlvbi9zZXJ2aWNlcy9wZXJzb25hbGl6YXRpb24tY29udGV4dC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFJMUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7QUFNekUsTUFBTSxPQUFPLDZCQUE2QjtJQUN4QyxZQUNZLE1BQTZCLEVBQzdCLFVBQXNCO1FBRHRCLFdBQU0sR0FBTixNQUFNLENBQXVCO1FBQzdCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFDL0IsQ0FBQztJQUVKLHlCQUF5QjtRQUN2QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUMxQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ2YsR0FBRyxDQUNELENBQUMsSUFBVSxFQUFFLEVBQUUsQ0FDYixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FDL0QsRUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ2YsR0FBRyxDQUFDLENBQUMsSUFBcUIsRUFBRSxFQUFFLENBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUNsQixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUNqRSxDQUNGLEVBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLEdBQUcsQ0FBQyxDQUFDLFNBQW1DLEVBQUUsRUFBRSxDQUMxQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQ25FLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTywyQkFBMkIsQ0FBQyxJQUFZO1FBQzlDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdkMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNsQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDaEQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7OztZQXhDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQUxRLHFCQUFxQjtZQUpyQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDbXNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY21zL2ZhY2FkZS9jbXMuc2VydmljZSc7XG5pbXBvcnQgeyBDb250ZW50U2xvdENvbXBvbmVudERhdGEgfSBmcm9tICcuLi8uLi9jbXMvbW9kZWwvY29udGVudC1zbG90LWNvbXBvbmVudC1kYXRhLm1vZGVsJztcbmltcG9ydCB7IENvbnRlbnRTbG90RGF0YSB9IGZyb20gJy4uLy4uL2Ntcy9tb2RlbC9jb250ZW50LXNsb3QtZGF0YS5tb2RlbCc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnLi4vLi4vY21zL21vZGVsL3BhZ2UubW9kZWwnO1xuaW1wb3J0IHsgUGVyc29uYWxpemF0aW9uQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL3BlcnNvbmFsaXphdGlvbi1jb25maWcnO1xuaW1wb3J0IHsgUGVyc29uYWxpemF0aW9uQ29udGV4dCB9IGZyb20gJy4uL21vZGVsL3BlcnNvbmFsaXphdGlvbi1jb250ZXh0Lm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFBlcnNvbmFsaXphdGlvbkNvbnRleHRTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGNvbmZpZzogUGVyc29uYWxpemF0aW9uQ29uZmlnLFxuICAgIHByb3RlY3RlZCBjbXNTZXJ2aWNlOiBDbXNTZXJ2aWNlXG4gICkge31cblxuICBnZXRQZXJzb25hbGl6YXRpb25Db250ZXh0KCk6IE9ic2VydmFibGU8UGVyc29uYWxpemF0aW9uQ29udGV4dD4ge1xuICAgIHJldHVybiB0aGlzLmNtc1NlcnZpY2UuZ2V0Q3VycmVudFBhZ2UoKS5waXBlKFxuICAgICAgZmlsdGVyKEJvb2xlYW4pLFxuICAgICAgbWFwKFxuICAgICAgICAocGFnZTogUGFnZSkgPT5cbiAgICAgICAgICBwYWdlLnNsb3RzW3RoaXMuY29uZmlnLnBlcnNvbmFsaXphdGlvbi5jb250ZXh0LnNsb3RQb3NpdGlvbl1cbiAgICAgICksXG4gICAgICBmaWx0ZXIoQm9vbGVhbiksXG4gICAgICBtYXAoKHNsb3Q6IENvbnRlbnRTbG90RGF0YSkgPT5cbiAgICAgICAgc2xvdC5jb21wb25lbnRzLmZpbmQoXG4gICAgICAgICAgKGkpID0+IGkudWlkID09PSB0aGlzLmNvbmZpZy5wZXJzb25hbGl6YXRpb24uY29udGV4dC5jb21wb25lbnRJZFxuICAgICAgICApXG4gICAgICApLFxuICAgICAgZmlsdGVyKEJvb2xlYW4pLFxuICAgICAgbWFwKChjb21wb25lbnQ6IENvbnRlbnRTbG90Q29tcG9uZW50RGF0YSkgPT5cbiAgICAgICAgdGhpcy5idWlsZFBlcnNvbmFsaXphdGlvbkNvbnRleHQoY29tcG9uZW50LnByb3BlcnRpZXMuc2NyaXB0LmRhdGEpXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRQZXJzb25hbGl6YXRpb25Db250ZXh0KGRhdGE6IHN0cmluZyk6IFBlcnNvbmFsaXphdGlvbkNvbnRleHQge1xuICAgIGNvbnN0IGNvbnRleHQgPSBKU09OLnBhcnNlKGF0b2IoZGF0YSkpO1xuICAgIGNvbnRleHQuYWN0aW9ucy5mb3JFYWNoKChhY3Rpb24pID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKGFjdGlvbikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGFjdGlvbltrZXldID0gYXRvYihhY3Rpb25ba2V5XSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRleHQuc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnRleHQuc2VnbWVudHNbaV0gPSBhdG9iKGNvbnRleHQuc2VnbWVudHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbiAgfVxufVxuIl19