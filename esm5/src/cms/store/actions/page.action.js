import { __extends } from "tslib";
import { StateEntityLoaderActions } from '../../../state/utils/index';
export var LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';
export var LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';
export var LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';
export var CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';
export var CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';
var LoadCmsPageData = /** @class */ (function (_super) {
    __extends(LoadCmsPageData, _super);
    function LoadCmsPageData(payload) {
        var _this = _super.call(this, payload.type, payload.id) || this;
        _this.payload = payload;
        _this.type = LOAD_CMS_PAGE_DATA;
        return _this;
    }
    return LoadCmsPageData;
}(StateEntityLoaderActions.EntityLoadAction));
export { LoadCmsPageData };
var LoadCmsPageDataFail = /** @class */ (function (_super) {
    __extends(LoadCmsPageDataFail, _super);
    function LoadCmsPageDataFail(pageContext, error) {
        var _this = _super.call(this, pageContext.type, pageContext.id, error) || this;
        _this.type = LOAD_CMS_PAGE_DATA_FAIL;
        return _this;
    }
    return LoadCmsPageDataFail;
}(StateEntityLoaderActions.EntityFailAction));
export { LoadCmsPageDataFail };
var LoadCmsPageDataSuccess = /** @class */ (function (_super) {
    __extends(LoadCmsPageDataSuccess, _super);
    function LoadCmsPageDataSuccess(pageContext, payload) {
        var _this = _super.call(this, pageContext.type, pageContext.id, payload) || this;
        _this.type = LOAD_CMS_PAGE_DATA_SUCCESS;
        return _this;
    }
    return LoadCmsPageDataSuccess;
}(StateEntityLoaderActions.EntitySuccessAction));
export { LoadCmsPageDataSuccess };
var CmsSetPageSuccessIndex = /** @class */ (function (_super) {
    __extends(CmsSetPageSuccessIndex, _super);
    function CmsSetPageSuccessIndex(pageContext, payload) {
        var _this = _super.call(this, pageContext.type, pageContext.id, payload) || this;
        _this.type = CMS_SET_PAGE_SUCCESS_INDEX;
        return _this;
    }
    return CmsSetPageSuccessIndex;
}(StateEntityLoaderActions.EntitySuccessAction));
export { CmsSetPageSuccessIndex };
var CmsSetPageFailIndex = /** @class */ (function (_super) {
    __extends(CmsSetPageFailIndex, _super);
    function CmsSetPageFailIndex(pageContext, payload) {
        var _this = _super.call(this, pageContext.type, pageContext.id) || this;
        _this.payload = payload;
        _this.type = CMS_SET_PAGE_FAIL_INDEX;
        return _this;
    }
    return CmsSetPageFailIndex;
}(StateEntityLoaderActions.EntityFailAction));
export { CmsSetPageFailIndex };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5hY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL2FjdGlvbnMvcGFnZS5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3RFLE1BQU0sQ0FBQyxJQUFNLGtCQUFrQixHQUFHLHNCQUFzQixDQUFDO0FBQ3pELE1BQU0sQ0FBQyxJQUFNLHVCQUF1QixHQUFHLDJCQUEyQixDQUFDO0FBQ25FLE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUFHLDhCQUE4QixDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxJQUFNLDBCQUEwQixHQUFHLDhCQUE4QixDQUFDO0FBQ3pFLE1BQU0sQ0FBQyxJQUFNLHVCQUF1QixHQUFHLDJCQUEyQixDQUFDO0FBRW5FO0lBQXFDLG1DQUF5QztJQUU1RSx5QkFBbUIsT0FBb0I7UUFBdkMsWUFDRSxrQkFBTSxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FDaEM7UUFGa0IsYUFBTyxHQUFQLE9BQU8sQ0FBYTtRQUQ5QixVQUFJLEdBQUcsa0JBQWtCLENBQUM7O0lBR25DLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUFMRCxDQUFxQyx3QkFBd0IsQ0FBQyxnQkFBZ0IsR0FLN0U7O0FBRUQ7SUFBeUMsdUNBQXlDO0lBRWhGLDZCQUFZLFdBQXdCLEVBQUUsS0FBVTtRQUFoRCxZQUNFLGtCQUFNLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsU0FDL0M7UUFIUSxVQUFJLEdBQUcsdUJBQXVCLENBQUM7O0lBR3hDLENBQUM7SUFDSCwwQkFBQztBQUFELENBQUMsQUFMRCxDQUF5Qyx3QkFBd0IsQ0FBQyxnQkFBZ0IsR0FLakY7O0FBRUQ7SUFBNEMsMENBQTRDO0lBRXRGLGdDQUFZLFdBQXdCLEVBQUUsT0FBYTtRQUFuRCxZQUNFLGtCQUFNLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsU0FDakQ7UUFIUSxVQUFJLEdBQUcsMEJBQTBCLENBQUM7O0lBRzNDLENBQUM7SUFDSCw2QkFBQztBQUFELENBQUMsQUFMRCxDQUE0Qyx3QkFBd0IsQ0FBQyxtQkFBbUIsR0FLdkY7O0FBRUQ7SUFBNEMsMENBQTRDO0lBRXRGLGdDQUFZLFdBQXdCLEVBQUUsT0FBYTtRQUFuRCxZQUNFLGtCQUFNLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsU0FDakQ7UUFIUSxVQUFJLEdBQUcsMEJBQTBCLENBQUM7O0lBRzNDLENBQUM7SUFDSCw2QkFBQztBQUFELENBQUMsQUFMRCxDQUE0Qyx3QkFBd0IsQ0FBQyxtQkFBbUIsR0FLdkY7O0FBRUQ7SUFBeUMsdUNBQXlDO0lBRWhGLDZCQUFZLFdBQXdCLEVBQVMsT0FBZTtRQUE1RCxZQUNFLGtCQUFNLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQyxTQUN4QztRQUY0QyxhQUFPLEdBQVAsT0FBTyxDQUFRO1FBRG5ELFVBQUksR0FBRyx1QkFBdUIsQ0FBQzs7SUFHeEMsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQUxELENBQXlDLHdCQUF3QixDQUFDLGdCQUFnQixHQUtqRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vcm91dGluZy9pbmRleCc7XG5pbXBvcnQgeyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnLi4vLi4vbW9kZWwvcGFnZS5tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBMT0FEX0NNU19QQUdFX0RBVEEgPSAnW0Ntc10gTG9hZCBQYWdlIERhdGEnO1xuZXhwb3J0IGNvbnN0IExPQURfQ01TX1BBR0VfREFUQV9GQUlMID0gJ1tDbXNdIExvYWQgUGFnZSBEYXRhIEZhaWwnO1xuZXhwb3J0IGNvbnN0IExPQURfQ01TX1BBR0VfREFUQV9TVUNDRVNTID0gJ1tDbXNdIExvYWQgUGFnZSBEYXRhIFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IENNU19TRVRfUEFHRV9TVUNDRVNTX0lOREVYID0gJ1tDbXNdIFNldCBQYWdlIFN1Y2Nlc3MgSW5kZXgnO1xuZXhwb3J0IGNvbnN0IENNU19TRVRfUEFHRV9GQUlMX0lOREVYID0gJ1tDbXNdIFNldCBQYWdlIEZhaWwgSW5kZXgnO1xuXG5leHBvcnQgY2xhc3MgTG9hZENtc1BhZ2VEYXRhIGV4dGVuZHMgU3RhdGVFbnRpdHlMb2FkZXJBY3Rpb25zLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9DTVNfUEFHRV9EQVRBO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogUGFnZUNvbnRleHQpIHtcbiAgICBzdXBlcihwYXlsb2FkLnR5cGUsIHBheWxvYWQuaWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkQ21zUGFnZURhdGFGYWlsIGV4dGVuZHMgU3RhdGVFbnRpdHlMb2FkZXJBY3Rpb25zLkVudGl0eUZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9DTVNfUEFHRV9EQVRBX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dCwgZXJyb3I6IGFueSkge1xuICAgIHN1cGVyKHBhZ2VDb250ZXh0LnR5cGUsIHBhZ2VDb250ZXh0LmlkLCBlcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRDbXNQYWdlRGF0YVN1Y2Nlc3MgZXh0ZW5kcyBTdGF0ZUVudGl0eUxvYWRlckFjdGlvbnMuRW50aXR5U3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NNU19QQUdFX0RBVEFfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocGFnZUNvbnRleHQ6IFBhZ2VDb250ZXh0LCBwYXlsb2FkOiBQYWdlKSB7XG4gICAgc3VwZXIocGFnZUNvbnRleHQudHlwZSwgcGFnZUNvbnRleHQuaWQsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbXNTZXRQYWdlU3VjY2Vzc0luZGV4IGV4dGVuZHMgU3RhdGVFbnRpdHlMb2FkZXJBY3Rpb25zLkVudGl0eVN1Y2Nlc3NBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ01TX1NFVF9QQUdFX1NVQ0NFU1NfSU5ERVg7XG4gIGNvbnN0cnVjdG9yKHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dCwgcGF5bG9hZDogUGFnZSkge1xuICAgIHN1cGVyKHBhZ2VDb250ZXh0LnR5cGUsIHBhZ2VDb250ZXh0LmlkLCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ21zU2V0UGFnZUZhaWxJbmRleCBleHRlbmRzIFN0YXRlRW50aXR5TG9hZGVyQWN0aW9ucy5FbnRpdHlGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IENNU19TRVRfUEFHRV9GQUlMX0lOREVYO1xuICBjb25zdHJ1Y3RvcihwYWdlQ29udGV4dDogUGFnZUNvbnRleHQsIHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihwYWdlQ29udGV4dC50eXBlLCBwYWdlQ29udGV4dC5pZCk7XG4gIH1cbn1cblxuLy8gYWN0aW9uIHR5cGVzXG5leHBvcnQgdHlwZSBDbXNQYWdlQWN0aW9uID1cbiAgfCBMb2FkQ21zUGFnZURhdGFcbiAgfCBMb2FkQ21zUGFnZURhdGFGYWlsXG4gIHwgTG9hZENtc1BhZ2VEYXRhU3VjY2Vzc1xuICB8IENtc1NldFBhZ2VGYWlsSW5kZXg7XG4iXX0=