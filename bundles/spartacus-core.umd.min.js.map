{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/core/src/config/utils/deep-merge.ts","ng://@spartacus/core/src/config/config.module.ts","ng://@spartacus/core/src/anonymous-consents/config/default-anonymous-consents-config.ts","ng://@spartacus/core/src/auth/config/default-auth-config.ts","ng://@spartacus/core/src/occ/utils/interceptor-util.ts","ng://@spartacus/core/src/state/utils/entity/entity.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.action.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.action.ts","ng://@spartacus/core/src/state/utils/loader/loader.reducer.ts","ng://@spartacus/core/src/state/utils/loader/loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity/entity.reducer.ts","ng://@spartacus/core/src/state/utils/entity-loader/entity-loader.reducer.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.action.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.action.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/processes-loader/processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.selectors.ts","ng://@spartacus/core/src/state/utils/entity-processes-loader/entity-processes-loader.reducer.ts","ng://@spartacus/core/src/state/utils/entity/entity.selectors.ts","ng://@spartacus/core/src/state/utils/get-state-slice.ts","ng://@spartacus/core/src/auth/store/actions/client-token.action.ts","ng://@spartacus/core/src/auth/store/auth-state.ts","ng://@spartacus/core/src/auth/store/actions/login-logout.action.ts","ng://@spartacus/core/src/auth/store/actions/user-token.action.ts","ng://@spartacus/core/src/auth/store/selectors/feature.selector.ts","ng://@spartacus/core/src/auth/store/selectors/client-token.selectors.ts","ng://@spartacus/core/src/auth/store/selectors/user-token.selectors.ts","ng://@spartacus/core/src/auth/facade/auth.service.ts","ng://@spartacus/core/src/occ/utils/occ-constants.ts","ng://@spartacus/core/src/auth/services/client-error/client-error-handling.service.ts","ng://@spartacus/core/src/window/window-ref.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url-parsing.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/path-utils.ts","ng://@spartacus/core/src/routing/configurable-routes/config/routing-config.ts","ng://@spartacus/core/src/routing/configurable-routes/routing-config.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/semantic-path.service.ts","ng://@spartacus/core/src/routing/store/actions/router.action.ts","ng://@spartacus/core/src/routing/store/selectors/routing.selector.ts","ng://@spartacus/core/src/routing/store/routing-state.ts","ng://@spartacus/core/src/routing/facade/routing.service.ts","ng://@spartacus/core/src/auth/services/user-error/user-error-handling.service.ts","ng://@spartacus/core/src/auth/http-interceptors/auth-error.interceptor.ts","ng://@spartacus/core/src/config/utils/dynamic-template.ts","ng://@spartacus/core/src/site-context/config/context-config-utils.ts","ng://@spartacus/core/src/state/config/state-config.ts","ng://@spartacus/core/src/site-context/config/site-context-config.ts","ng://@spartacus/core/src/site-context/store/actions/base-site.action.ts","ng://@spartacus/core/src/site-context/store/actions/currencies.action.ts","ng://@spartacus/core/src/site-context/store/actions/languages.action.ts","ng://@spartacus/core/src/site-context/store/selectors/site-context.selector.ts","ng://@spartacus/core/src/site-context/store/state.ts","ng://@spartacus/core/src/site-context/store/selectors/base-site.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/currencies.selectors.ts","ng://@spartacus/core/src/site-context/store/selectors/languages.selectors.ts","ng://@spartacus/core/src/site-context/facade/base-site.service.ts","ng://@spartacus/core/src/site-context/providers/context-ids.ts","ng://@spartacus/core/src/occ/adapters/cart/custom.encoder.ts","ng://@spartacus/core/src/occ/config/occ-config.ts","ng://@spartacus/core/src/occ/services/occ-endpoints.service.ts","ng://@spartacus/core/src/occ/occ-models/occ-endpoints.model.ts","ng://@spartacus/core/src/auth/http-interceptors/client-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/user-token.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/token-revocation.interceptor.ts","ng://@spartacus/core/src/auth/http-interceptors/index.ts","ng://@spartacus/core/src/auth/config/auth-config.ts","ng://@spartacus/core/src/auth/services/client-authentication/client-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/user-authentication/user-authentication-token.service.ts","ng://@spartacus/core/src/auth/services/index.ts","ng://@spartacus/core/src/state/config/default-state-config.ts","ng://@spartacus/core/src/state/reducers/storage-sync.reducer.ts","ng://@spartacus/core/src/state/reducers/transfer-state.reducer.ts","ng://@spartacus/core/src/state/reducers/index.ts","ng://@spartacus/core/src/state/state.module.ts","ng://@spartacus/core/src/util/serialization-utils.ts","ng://@spartacus/core/src/auth/store/effects/client-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/user-token.effect.ts","ng://@spartacus/core/src/auth/store/effects/index.ts","ng://@spartacus/core/src/auth/store/reducers/user-token.reducer.ts","ng://@spartacus/core/src/auth/store/reducers/index.ts","ng://@spartacus/core/src/auth/store/auth-store.module.ts","ng://@spartacus/core/src/model/address.model.ts","ng://@spartacus/core/src/model/cart.model.ts","ng://@spartacus/core/src/model/cms.model.ts","ng://@spartacus/core/src/model/consent.model.ts","ng://@spartacus/core/src/model/image.model.ts","ng://@spartacus/core/src/model/product.model.ts","ng://@spartacus/core/src/auth/auth.module.ts","ng://@spartacus/core/src/auth/guards/auth-redirect.service.ts","ng://@spartacus/core/src/auth/guards/auth.guard.ts","ng://@spartacus/core/src/auth/guards/not-auth.guard.ts","ng://@spartacus/core/src/model/product-interest.model.ts","ng://@spartacus/core/src/cms/config/cms-config.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-state.ts","ng://@spartacus/core/src/anonymous-consents/store/actions/anonymous-consents.action.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/feature.selector.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-templates.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consent-ui.selectors.ts","ng://@spartacus/core/src/anonymous-consents/store/selectors/anonymous-consents.selectors.ts","ng://@spartacus/core/src/anonymous-consents/facade/anonymous-consents.service.ts","ng://@spartacus/core/src/asm/connectors/asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/default-occ-asm-config.ts","ng://@spartacus/core/src/asm/config/asm-config.ts","ng://@spartacus/core/src/asm/connectors/converters.ts","ng://@spartacus/core/src/util/converter.service.ts","ng://@spartacus/core/src/occ/adapters/asm/occ-asm.adapter.ts","ng://@spartacus/core/src/occ/adapters/asm/asm-occ.module.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/cart/converters.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.adapter.ts","ng://@spartacus/core/src/product/connectors/product/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/converters/occ-cart-normalizer.ts","ng://@spartacus/core/src/occ/adapters/cart/default-occ-cart-config.ts","ng://@spartacus/core/src/cart/connectors/entry/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-entry.adapter.ts","ng://@spartacus/core/src/cart/connectors/voucher/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart-voucher.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-cart.adapter.ts","ng://@spartacus/core/src/cart/connectors/save-cart/converters.ts","ng://@spartacus/core/src/occ/adapters/cart/occ-save-cart.adapter.ts","ng://@spartacus/core/src/occ/adapters/cart/cart-occ.module.ts","ng://@spartacus/core/src/checkout/connectors/checkout/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout.adapter.ts","ng://@spartacus/core/src/checkout/connectors/delivery/converters.ts","ng://@spartacus/core/src/user/connectors/address/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/converters.ts","ng://@spartacus/core/src/occ/adapters/checkout/occ-checkout-payment.adapter.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/converters/occ-order-normalizer.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.adapter.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.adapter.ts","ng://@spartacus/core/src/occ/adapters/checkout/checkout-occ.module.ts","ng://@spartacus/core/src/cms/connectors/page/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/converters.ts","ng://@spartacus/core/src/occ/adapters/cms/occ-cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/converters/occ-cms-page-normalizer.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.adapter.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.adapter.ts","ng://@spartacus/core/src/occ/adapters/cms/cms-occ.module.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-image-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-reference-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-search-page-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/occ-product-references-list-normalizer.ts","ng://@spartacus/core/src/occ/adapters/product/converters/product-name-normalizer.ts","ng://@spartacus/core/src/product/connectors/references/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/converters.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product-search.adapter.ts","ng://@spartacus/core/src/occ/utils/occ-fields.ts","ng://@spartacus/core/src/occ/services/occ-fields.service.ts","ng://@spartacus/core/src/product/model/product-scope.ts","ng://@spartacus/core/src/occ/services/occ-requests-optimizer.service.ts","ng://@spartacus/core/src/occ/adapters/product/occ-product.adapter.ts","ng://@spartacus/core/src/product/connectors/product/product.adapter.ts","ng://@spartacus/core/src/product/connectors/references/product-references.adapter.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.adapter.ts","ng://@spartacus/core/src/product/connectors/search/product-search.adapter.ts","ng://@spartacus/core/src/occ/adapters/product/default-occ-product-config.ts","ng://@spartacus/core/src/occ/adapters/product/product-occ.module.ts","ng://@spartacus/core/src/site-context/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/site-context/occ-site.adapter.ts","ng://@spartacus/core/src/site-context/connectors/site.adapter.ts","ng://@spartacus/core/src/occ/adapters/site-context/default-occ-site-context-config.ts","ng://@spartacus/core/src/site-context/facade/currency.service.ts","ng://@spartacus/core/src/site-context/facade/language.service.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context.interceptor.ts","ng://@spartacus/core/src/occ/adapters/site-context/site-context-occ.module.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/default-occ-store-finder-config.ts","ng://@spartacus/core/src/store-finder/connectors/store-finder.connector.ts","ng://@spartacus/core/src/store-finder/connectors/converters.ts","ng://@spartacus/core/src/occ/adapters/store-finder/occ-store-finder.adapter.ts","ng://@spartacus/core/src/occ/adapters/store-finder/store-finder-occ.module.ts","ng://@spartacus/core/src/user/connectors/consent/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-address.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-order.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user.adapter.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.adapter.ts","ng://@spartacus/core/src/user/connectors/address/user-address.adapter.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.adapter.ts","ng://@spartacus/core/src/user/connectors/order/user-order.adapter.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.adapter.ts","ng://@spartacus/core/src/user/connectors/user/user.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/default-occ-user-config.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-customer-coupon.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/notification-preference/converters.ts","ng://@spartacus/core/src/user/connectors/notification-preference/user-notification-preference.connector.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-notification-preference.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/converters.ts","ng://@spartacus/core/src/occ/adapters/user/occ-user-interests.adapter.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.adapter.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-user-interests-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/converters/occ-return-request-normalizer.ts","ng://@spartacus/core/src/occ/adapters/user/user-occ.module.ts","ng://@spartacus/core/src/occ/config-loader/java-reg-exp-converter.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.ts","ng://@spartacus/core/src/ssr/ssr.providers.ts","ng://@spartacus/core/src/occ/config-loader/occ-loaded-config-converter.ts","ng://@spartacus/core/src/occ/config-loader/occ-sites-config-loader.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.service.ts","ng://@spartacus/core/src/occ/config-loader/occ-config-loader.module.ts","ng://@spartacus/core/src/occ/config/config-from-meta-tag-factory.ts","ng://@spartacus/core/src/occ/config/default-occ-config.ts","ng://@spartacus/core/src/occ/config/occ-config-validator.ts","ng://@spartacus/core/src/occ/interceptors/with-credentials.interceptor.ts","ng://@spartacus/core/src/occ/occ-models/occ.models.ts","ng://@spartacus/core/src/config/config-validator/config-validator.ts","ng://@spartacus/core/src/occ/occ.module.ts","ng://@spartacus/core/src/occ/services/loading-scopes.service.ts","ng://@spartacus/core/src/anonymous-consents/config/anonymous-consents-config.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/anonymous-consents-interceptor.ts","ng://@spartacus/core/src/anonymous-consents/http-interceptors/index.ts","ng://@spartacus/core/src/event/event.service.ts","ng://@spartacus/core/src/util/create-from.ts","ng://@spartacus/core/src/state/event/state-event.service.ts","ng://@spartacus/core/src/state/services/state-persistence.service.ts","ng://@spartacus/core/src/process/store/selectors/process.selectors.ts","ng://@spartacus/core/src/process/store/selectors/feature.selector.ts","ng://@spartacus/core/src/process/store/process-state.ts","ng://@spartacus/core/src/user/store/actions/billing-countries.action.ts","ng://@spartacus/core/src/user/store/actions/consignment-tracking.action.ts","ng://@spartacus/core/src/user/store/actions/delivery-countries.action.ts","ng://@spartacus/core/src/user/store/actions/forgot-password.action.ts","ng://@spartacus/core/src/user/store/user-state.ts","ng://@spartacus/core/src/user/store/actions/order-details.action.ts","ng://@spartacus/core/src/user/store/actions/payment-methods.action.ts","ng://@spartacus/core/src/user/store/actions/regions.action.ts","ng://@spartacus/core/src/user/store/actions/reset-password.action.ts","ng://@spartacus/core/src/user/store/actions/titles.action.ts","ng://@spartacus/core/src/user/store/actions/update-email.action.ts","ng://@spartacus/core/src/user/store/actions/update-password.action.ts","ng://@spartacus/core/src/user/store/actions/user-addresses.action.ts","ng://@spartacus/core/src/user/store/actions/user-consents.action.ts","ng://@spartacus/core/src/user/store/actions/user-details.action.ts","ng://@spartacus/core/src/user/store/actions/user-misc.action.ts","ng://@spartacus/core/src/user/store/actions/user-orders.action.ts","ng://@spartacus/core/src/user/store/actions/user-register.action.ts","ng://@spartacus/core/src/user/store/actions/customer-coupon.action.ts","ng://@spartacus/core/src/user/store/actions/notification-preference.action.ts","ng://@spartacus/core/src/user/store/actions/product-interests.actions.ts","ng://@spartacus/core/src/user/store/actions/order-return-request.action.ts","ng://@spartacus/core/src/user/store/selectors/feature.selector.ts","ng://@spartacus/core/src/user/store/selectors/billing-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/consignment-tracking.selectors.ts","ng://@spartacus/core/src/user/store/selectors/delivery-countries.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/order-return-request.selectors.ts","ng://@spartacus/core/src/user/store/selectors/payment-methods.selectors.ts","ng://@spartacus/core/src/user/store/selectors/regions.selectors.ts","ng://@spartacus/core/src/user/store/selectors/reset-password.selectors.ts","ng://@spartacus/core/src/user/store/selectors/titles.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-addresses.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-consents.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-details.selectors.ts","ng://@spartacus/core/src/user/store/selectors/user-orders.selectors.ts","ng://@spartacus/core/src/user/store/selectors/customer-coupons.selectors.ts","ng://@spartacus/core/src/user/store/selectors/notification-preference.selectors.ts","ng://@spartacus/core/src/user/store/selectors/product-interests.selectors.ts","ng://@spartacus/core/src/user/facade/user-consent.service.ts","ng://@spartacus/core/src/anonymous-consents/connectors/anonymous-consent-templates.connector.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/anonymous-consents.effect.ts","ng://@spartacus/core/src/anonymous-consents/store/effects/index.ts","ng://@spartacus/core/src/site-context/connectors/site.connector.ts","ng://@spartacus/core/src/site-context/providers/context-service-map.ts","ng://@spartacus/core/src/site-context/config/base-site-config-validator.ts","ng://@spartacus/core/src/site-context/config/default-site-context-config.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.service.ts","ng://@spartacus/core/src/site-context/services/site-context-params.service.ts","ng://@spartacus/core/src/site-context/services/site-context-url-serializer.ts","ng://@spartacus/core/src/site-context/services/site-context-routes-handler.ts","ng://@spartacus/core/src/site-context/providers/context-service-providers.ts","ng://@spartacus/core/src/site-context/providers/site-context-params-providers.ts","ng://@spartacus/core/src/site-context/store/effects/languages.effect.ts","ng://@spartacus/core/src/site-context/store/effects/currencies.effect.ts","ng://@spartacus/core/src/site-context/store/effects/base-site.effect.ts","ng://@spartacus/core/src/site-context/store/effects/index.ts","ng://@spartacus/core/src/site-context/store/reducers/base-site.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/currencies.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/languages.reducer.ts","ng://@spartacus/core/src/site-context/store/reducers/index.ts","ng://@spartacus/core/src/site-context/store/site-context-store.module.ts","ng://@spartacus/core/src/site-context/site-context.module.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-banner.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents-update.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/anonymous-consents.reducer.ts","ng://@spartacus/core/src/anonymous-consents/store/reducers/index.ts","ng://@spartacus/core/src/anonymous-consents/store/anonymous-consents-store.module.ts","ng://@spartacus/core/src/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/core/src/asm/config/default-asm-config.ts","ng://@spartacus/core/src/asm/store/asm-state.ts","ng://@spartacus/core/src/asm/connectors/asm.connector.ts","ng://@spartacus/core/src/asm/store/actions/asm-ui.action.ts","ng://@spartacus/core/src/asm/store/actions/customer.action.ts","ng://@spartacus/core/src/asm/store/actions/csagent-token.action.ts","ng://@spartacus/core/src/asm/store/effects/customer.effect.ts","ng://@spartacus/core/src/asm/store/effects/csagent-token.effect.ts","ng://@spartacus/core/src/asm/store/effects/index.ts","ng://@spartacus/core/src/asm/store/reducers/asm-ui.reducer.ts","ng://@spartacus/core/src/asm/store/reducers/index.ts","ng://@spartacus/core/src/asm/store/asm-store.module.ts","ng://@spartacus/core/src/global-message/models/global-message.model.ts","ng://@spartacus/core/src/global-message/models/response-status.model.ts","ng://@spartacus/core/src/global-message/config/global-message-config.ts","ng://@spartacus/core/src/global-message/store/actions/global-message.actions.ts","ng://@spartacus/core/src/global-message/store/selectors/feature.selector.ts","ng://@spartacus/core/src/global-message/store/global-message-state.ts","ng://@spartacus/core/src/global-message/store/selectors/global-message.selectors.ts","ng://@spartacus/core/src/global-message/facade/global-message.service.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/http-error.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-gateway/bad-gateway.handler.ts","ng://@spartacus/core/src/cart/utils/utils.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/bad-request/bad-request.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/conflict/conflict.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/forbidden/forbidden.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/gateway/gateway-timeout.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/internal-server/internal-server.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/not-found/not-found.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unauthorized/unauthorized.handler.ts","ng://@spartacus/core/src/global-message/http-interceptors/handlers/unknown-error/unknown-error.handler.ts","ng://@spartacus/core/src/util/applicable.ts","ng://@spartacus/core/src/global-message/http-interceptors/http-error.interceptor.ts","ng://@spartacus/core/src/global-message/http-interceptors/index.ts","ng://@spartacus/core/src/global-message/store/reducers/global-message.reducer.ts","ng://@spartacus/core/src/global-message/store/reducers/index.ts","ng://@spartacus/core/src/global-message/store/global-message-store.module.ts","ng://@spartacus/core/src/util/compare-equal-objects.ts","ng://@spartacus/core/src/global-message/store/effects/global-message.effect.ts","ng://@spartacus/core/src/global-message/config/default-global-message-config.ts","ng://@spartacus/core/src/global-message/global-message.module.ts","ng://@spartacus/core/src/asm/store/selectors/feature.selector.ts","ng://@spartacus/core/src/asm/store/selectors/asm-ui.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/customer-search.selectors.ts","ng://@spartacus/core/src/asm/store/selectors/csagent-token.selectors.ts","ng://@spartacus/core/src/asm/facade/asm-auth.service.ts","ng://@spartacus/core/src/asm/services/csagent-error-handling.service.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-auth-error.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/csagent-token.interceptor.ts","ng://@spartacus/core/src/asm/http-interceptors/index.ts","ng://@spartacus/core/src/asm/asm.module.ts","ng://@spartacus/core/src/asm/facade/asm.service.ts","ng://@spartacus/core/src/cms/page/page-meta.resolver.ts","ng://@spartacus/core/src/util/regex-pattern.ts","ng://@spartacus/core/src/cart/store/multi-cart-state.ts","ng://@spartacus/core/src/cart/store/selectors/multi-cart.selector.ts","ng://@spartacus/core/src/cart/store/actions/cart-entry.action.ts","ng://@spartacus/core/src/cart/store/actions/cart-voucher.action.ts","ng://@spartacus/core/src/cart/store/actions/cart.action.ts","ng://@spartacus/core/src/cart/store/actions/multi-cart.action.ts","ng://@spartacus/core/src/cart/store/actions/wish-list.action.ts","ng://@spartacus/core/src/cart/facade/multi-cart.service.ts","ng://@spartacus/core/src/cart/facade/active-cart.service.ts","ng://@spartacus/core/src/util/withdraw-on.ts","ng://@spartacus/core/src/cart/connectors/entry/cart-entry.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-entry.effect.ts","ng://@spartacus/core/src/cart/connectors/voucher/cart-voucher.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart-voucher.effect.ts","ng://@spartacus/core/src/checkout/store/actions/address-verification.action.ts","ng://@spartacus/core/src/checkout/store/actions/card-types.action.ts","ng://@spartacus/core/src/checkout/store/checkout-state.ts","ng://@spartacus/core/src/checkout/store/actions/checkout.action.ts","ng://@spartacus/core/src/cart/connectors/cart/cart.connector.ts","ng://@spartacus/core/src/cart/store/effects/cart.effect.ts","ng://@spartacus/core/src/cart/connectors/save-cart/save-cart.connecter.ts","ng://@spartacus/core/src/cart/store/effects/wish-list.effect.ts","ng://@spartacus/core/src/cart/store/reducers/multi-cart.reducer.ts","ng://@spartacus/core/src/cart/store/reducers/index.ts","ng://@spartacus/core/src/cart/event/cart.events.ts","ng://@spartacus/core/src/cart/event/cart-event.builder.ts","ng://@spartacus/core/src/cart/event/cart-event.module.ts","ng://@spartacus/core/src/cart/facade/cart-voucher.service.ts","ng://@spartacus/core/src/user/facade/user.service.ts","ng://@spartacus/core/src/cart/config/cart-config.ts","ng://@spartacus/core/src/cart/services/cart-config.service.ts","ng://@spartacus/core/src/cart/facade/selective-cart.service.ts","ng://@spartacus/core/src/cart/facade/wish-list.service.ts","ng://@spartacus/core/src/cms/store/cms-state.ts","ng://@spartacus/core/src/cms/store/actions/components.action.ts","ng://@spartacus/core/src/cms/store/actions/navigation-entry-item.action.ts","ng://@spartacus/core/src/cms/store/actions/page.action.ts","ng://@spartacus/core/src/cms/store/selectors/feature.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/components.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/navigation-entry-item.selectors.ts","ng://@spartacus/core/src/cms/store/selectors/page.selectors.ts","ng://@spartacus/core/src/cms/utils/cms-utils.ts","ng://@spartacus/core/src/cms/model/page.model.ts","ng://@spartacus/core/src/cms/facade/cms.service.ts","ng://@spartacus/core/src/cart/services/cart-page-meta.resolver.ts","ng://@spartacus/core/src/cart/services/multi-cart-state-persistence.service.ts","ng://@spartacus/core/src/cart/store/effects/multi-cart.effect.ts","ng://@spartacus/core/src/cart/store/multi-cart-store.module.ts","ng://@spartacus/core/src/cart/cart.module.ts","ng://@spartacus/core/src/checkout/store/reducers/address-verification.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/checkout.selectors.ts","ng://@spartacus/core/src/checkout/store/selectors/address-verification.selectors.ts","ng://@spartacus/core/src/checkout/store/reducers/card-types.reducer.ts","ng://@spartacus/core/src/checkout/store/selectors/card-types.selectors.ts","ng://@spartacus/core/src/checkout/facade/checkout.service.ts","ng://@spartacus/core/src/i18n/translation.service.ts","ng://@spartacus/core/src/checkout/services/checkout-page-meta.resolver.ts","ng://@spartacus/core/src/checkout/store/reducers/checkout.reducer.ts","ng://@spartacus/core/src/checkout/store/reducers/index.ts","ng://@spartacus/core/src/user/connectors/address/user-address.connector.ts","ng://@spartacus/core/src/checkout/store/effects/address-verification.effect.ts","ng://@spartacus/core/src/checkout/connectors/payment/checkout-payment.connector.ts","ng://@spartacus/core/src/checkout/store/effects/card-types.effect.ts","ng://@spartacus/core/src/checkout/connectors/checkout/checkout.connector.ts","ng://@spartacus/core/src/checkout/connectors/delivery/checkout-delivery.connector.ts","ng://@spartacus/core/src/checkout/store/effects/checkout.effect.ts","ng://@spartacus/core/src/checkout/store/effects/index.ts","ng://@spartacus/core/src/checkout/store/checkout-store.module.ts","ng://@spartacus/core/src/checkout/checkout.module.ts","ng://@spartacus/core/src/checkout/facade/checkout-delivery.service.ts","ng://@spartacus/core/src/checkout/facade/checkout-payment.service.ts","ng://@spartacus/core/src/cms/config/default-cms-config.ts","ng://@spartacus/core/src/cms/page/content-page-meta.resolver.ts","ng://@spartacus/core/src/cms/page/page.module.ts","ng://@spartacus/core/src/util/buffer-debounce-time.ts","ng://@spartacus/core/src/config/test-config.module.ts","ng://@spartacus/core/src/config/utils/get-cookie.ts","ng://@spartacus/core/src/config/config-validator/config-validator.module.ts","ng://@spartacus/core/src/config/config-initializer/config-initializer.module.ts","ng://@spartacus/core/src/cms/config/cms-structure.config.ts","ng://@spartacus/core/src/cms/services/cms-structure-config.service.ts","ng://@spartacus/core/src/cms/connectors/component/cms-component.connector.ts","ng://@spartacus/core/src/cms/store/effects/components.effect.ts","ng://@spartacus/core/src/util/glob-utils.ts","ng://@spartacus/core/src/util/glob.service.ts","ng://@spartacus/core/src/routing/services/url-matcher.service.ts","ng://@spartacus/core/src/routing/configurable-routes/configurable-routes.service.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/product-url.pipe.ts","ng://@spartacus/core/src/routing/configurable-routes/url-translation/url.module.ts","ng://@spartacus/core/src/routing/external-routes/external-routes-config.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.guard.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.providers.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.service.ts","ng://@spartacus/core/src/routing/external-routes/external-routes.module.ts","ng://@spartacus/core/src/routing/models/page-context.model.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.service.ts","ng://@spartacus/core/src/routing/protected-routes/protected-routes.guard.ts","ng://@spartacus/core/src/routing/store/effects/router.effect.ts","ng://@spartacus/core/src/routing/store/effects/index.ts","ng://@spartacus/core/src/routing/store/reducers/router.reducer.ts","ng://@spartacus/core/src/routing/routing.module.ts","ng://@spartacus/core/src/routing/url-matcher/default-url-matcher.ts","ng://@spartacus/core/src/cms/store/effects/navigation-entry-item.effect.ts","ng://@spartacus/core/src/cms/connectors/page/cms-page.connector.ts","ng://@spartacus/core/src/cms/store/effects/page.effect.ts","ng://@spartacus/core/src/cms/store/effects/index.ts","ng://@spartacus/core/src/cms/store/reducers/components.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/navigation-entry-item.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-data.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/page-index.reducer.ts","ng://@spartacus/core/src/cms/store/reducers/index.ts","ng://@spartacus/core/src/cms/store/cms-store.module.ts","ng://@spartacus/core/src/cms/cms.module.ts","ng://@spartacus/core/src/cms/facade/page-meta.service.ts","ng://@spartacus/core/src/smart-edit/services/smart-edit.service.ts","ng://@spartacus/core/src/cms/services/dynamic-attribute.service.ts","ng://@spartacus/core/src/features-config/config/features-config.ts","ng://@spartacus/core/src/features-config/utils/feature-config-utils.ts","ng://@spartacus/core/src/features-config/services/feature-config.service.ts","ng://@spartacus/core/src/features-config/directives/feature-level.directive.ts","ng://@spartacus/core/src/features-config/directives/feature.directive.ts","ng://@spartacus/core/src/features-config/features-config.module.ts","ng://@spartacus/core/src/i18n/date.pipe.ts","ng://@spartacus/core/src/i18n/translate.pipe.ts","ng://@spartacus/core/src/i18n/config/i18n-config.ts","ng://@spartacus/core/src/i18n/translation-chunk.service.ts","ng://@spartacus/core/src/i18n/config/default-i18n-config.ts","ng://@spartacus/core/src/i18n/i18next/i18next-init.ts","ng://@spartacus/core/src/i18n/i18next/i18next-providers.ts","ng://@spartacus/core/src/i18n/i18next/i18next-translation.service.ts","ng://@spartacus/core/src/i18n/i18n.module.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.ts","ng://@spartacus/core/src/i18n/testing/mock-translate.pipe.ts","ng://@spartacus/core/src/i18n/testing/mock-translation.service.ts","ng://@spartacus/core/src/i18n/testing/mock-date.pipe.ts","ng://@spartacus/core/src/i18n/testing/i18n-testing.module.ts","ng://@spartacus/core/src/kyma/config/kyma-config.ts","ng://@spartacus/core/src/kyma/store/kyma-state.ts","ng://@spartacus/core/src/kyma/store/actions/open-id-token.action.ts","ng://@spartacus/core/src/kyma/store/selectors/feature.selector.ts","ng://@spartacus/core/src/kyma/store/selectors/open-id-token.selectors.ts","ng://@spartacus/core/src/kyma/facade/kyma.service.ts","ng://@spartacus/core/src/kyma/config/default-kyma-config.ts","ng://@spartacus/core/src/kyma/services/open-id-token/open-id-token.service.ts","ng://@spartacus/core/src/kyma/services/index.ts","ng://@spartacus/core/src/kyma/store/effects/open-id-token.effect.ts","ng://@spartacus/core/src/kyma/store/effects/index.ts","ng://@spartacus/core/src/kyma/store/reducers/index.ts","ng://@spartacus/core/src/kyma/store/kyma-store.module.ts","ng://@spartacus/core/src/kyma/kyma.module.ts","ng://@spartacus/core/src/personalization/config/default-personalization-config.ts","ng://@spartacus/core/src/personalization/config/personalization-config.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-id.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/occ-personalization-time.interceptor.ts","ng://@spartacus/core/src/personalization/http-interceptors/index.ts","ng://@spartacus/core/src/personalization/personalization.module.ts","ng://@spartacus/core/src/personalization/services/personalization-context.service.ts","ng://@spartacus/core/src/process/store/reducers/index.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.actions.ts","ng://@spartacus/core/src/process/store/process-store.module.ts","ng://@spartacus/core/src/process/process.module.ts","ng://@spartacus/core/src/product/connectors/product/product.connector.ts","ng://@spartacus/core/src/product/connectors/references/product-references.connector.ts","ng://@spartacus/core/src/product/connectors/reviews/product-reviews.connector.ts","ng://@spartacus/core/src/product/connectors/search/product-search.connector.ts","ng://@spartacus/core/src/product/store/actions/product-references.action.ts","ng://@spartacus/core/src/product/store/actions/product-reviews.action.ts","ng://@spartacus/core/src/product/store/actions/product-search.action.ts","ng://@spartacus/core/src/product/store/actions/product.action.ts","ng://@spartacus/core/src/product/store/product-state.ts","ng://@spartacus/core/src/product/store/selectors/feature.selector.ts","ng://@spartacus/core/src/product/store/selectors/product-references.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product-reviews.selectors.ts","ng://@spartacus/core/src/product/store/reducers/product-search.reducer.ts","ng://@spartacus/core/src/product/store/selectors/product-search.selectors.ts","ng://@spartacus/core/src/product/store/selectors/product.selectors.ts","ng://@spartacus/core/src/product/facade/product-reference.service.ts","ng://@spartacus/core/src/product/facade/product-review.service.ts","ng://@spartacus/core/src/product/facade/product-search.service.ts","ng://@spartacus/core/src/product/services/product-loading.service.ts","ng://@spartacus/core/src/product/facade/product.service.ts","ng://@spartacus/core/src/product/facade/searchbox.service.ts","ng://@spartacus/core/src/product/services/category-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/coupon-search-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/product-page-meta.resolver.ts","ng://@spartacus/core/src/product/services/search-page-meta.resolver.ts","ng://@spartacus/core/src/product/store/effects/product-references.effect.ts","ng://@spartacus/core/src/product/store/effects/product-reviews.effect.ts","ng://@spartacus/core/src/product/store/effects/product-search.effect.ts","ng://@spartacus/core/src/product/store/effects/product.effect.ts","ng://@spartacus/core/src/product/store/effects/index.ts","ng://@spartacus/core/src/product/store/reducers/product-references.reducer.ts","ng://@spartacus/core/src/product/store/reducers/product-reviews.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/scoped-loader.reducer.ts","ng://@spartacus/core/src/state/utils/scoped-loader/entity-scoped-loader.reducer.ts","ng://@spartacus/core/src/product/store/reducers/index.ts","ng://@spartacus/core/src/product/store/product-store.module.ts","ng://@spartacus/core/src/product/product.module.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/cms-ticket.interceptor.ts","ng://@spartacus/core/src/smart-edit/http-interceptors/index.ts","ng://@spartacus/core/src/smart-edit/smart-edit.module.ts","ng://@spartacus/core/src/ssr/ng-express-engine-decorator.ts","ng://@spartacus/core/src/store-finder/config/store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/store-finder-state.ts","ng://@spartacus/core/src/store-finder/store/actions/find-stores.action.ts","ng://@spartacus/core/src/store-finder/store/actions/view-all-stores.action.ts","ng://@spartacus/core/src/store-finder/store/selectors/feature.selector.ts","ng://@spartacus/core/src/store-finder/store/selectors/find-stores.selectors.ts","ng://@spartacus/core/src/store-finder/store/selectors/view-all-stores.selectors.ts","ng://@spartacus/core/src/store-finder/facade/store-finder.service.ts","ng://@spartacus/core/src/store-finder/facade/store-data.service.ts","ng://@spartacus/core/src/store-finder/service/external-js-file-loader.service.ts","ng://@spartacus/core/src/store-finder/service/google-map-renderer.service.ts","ng://@spartacus/core/src/store-finder/config/default-store-finder-config.ts","ng://@spartacus/core/src/store-finder/store/reducers/index.ts","ng://@spartacus/core/src/store-finder/store/effects/find-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/view-all-stores.effect.ts","ng://@spartacus/core/src/store-finder/store/effects/index.ts","ng://@spartacus/core/src/store-finder/store/store-finder-store.module.ts","ng://@spartacus/core/src/store-finder/store-finder.module.ts","ng://@spartacus/core/src/user/connectors/user/user.connector.ts","ng://@spartacus/core/src/user/connectors/consent/user-consent.connector.ts","ng://@spartacus/core/src/user/connectors/payment/user-payment.connector.ts","ng://@spartacus/core/src/user/connectors/order/user-order.connector.ts","ng://@spartacus/core/src/user/connectors/customer-coupon/customer-coupon.connector.ts","ng://@spartacus/core/src/user/connectors/interests/user-interests.connector.ts","ng://@spartacus/core/src/user/facade/consent.service.ts","ng://@spartacus/core/src/user/facade/user-address.service.ts","ng://@spartacus/core/src/user/facade/user-order.service.ts","ng://@spartacus/core/src/user/facade/customer-coupon.service.ts","ng://@spartacus/core/src/user/facade/user-payment.service.ts","ng://@spartacus/core/src/user/facade/order-return-request.service.ts","ng://@spartacus/core/src/user/facade/user-notification-preference.service.ts","ng://@spartacus/core/src/user/facade/user-interests.service.ts","ng://@spartacus/core/src/user/store/reducers/billing-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/consignment-tracking.reducer.ts","ng://@spartacus/core/src/user/store/reducers/delivery-countries.reducer.ts","ng://@spartacus/core/src/user/store/reducers/notification-preference.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/payment-methods.reducer.ts","ng://@spartacus/core/src/user/store/reducers/regions.reducer.ts","ng://@spartacus/core/src/user/store/reducers/reset-password.reducer.ts","ng://@spartacus/core/src/user/store/reducers/titles.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-addresses.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-consents.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-details.reducer.ts","ng://@spartacus/core/src/user/store/reducers/user-orders.reducer.ts","ng://@spartacus/core/src/user/store/reducers/customer-coupon.reducer.ts","ng://@spartacus/core/src/user/store/reducers/product-interests.reducer.ts","ng://@spartacus/core/src/user/store/reducers/order-return-request.reducer.ts","ng://@spartacus/core/src/user/store/reducers/index.ts","ng://@spartacus/core/src/user/store/effects/billing-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/clear-miscs-data.effect.ts","ng://@spartacus/core/src/user/store/effects/consignment-tracking.effect.ts","ng://@spartacus/core/src/user/store/effects/delivery-countries.effect.ts","ng://@spartacus/core/src/user/store/effects/forgot-password.effect.ts","ng://@spartacus/core/src/user/store/effects/notification-preference.effect.ts","ng://@spartacus/core/src/user/store/effects/order-details.effect.ts","ng://@spartacus/core/src/user/store/effects/order-return-request.effect.ts","ng://@spartacus/core/src/user/store/effects/payment-methods.effect.ts","ng://@spartacus/core/src/user/store/effects/regions.effect.ts","ng://@spartacus/core/src/user/store/effects/reset-password.effect.ts","ng://@spartacus/core/src/user/store/effects/titles.effect.ts","ng://@spartacus/core/src/user/store/effects/update-email.effect.ts","ng://@spartacus/core/src/user/store/effects/update-password.effect.ts","ng://@spartacus/core/src/user/store/effects/user-addresses.effect.ts","ng://@spartacus/core/src/user/store/effects/user-consents.effect.ts","ng://@spartacus/core/src/user/store/effects/user-details.effect.ts","ng://@spartacus/core/src/user/store/effects/user-orders.effect.ts","ng://@spartacus/core/src/user/store/effects/user-register.effect.ts","ng://@spartacus/core/src/user/store/effects/customer-coupon.effect.ts","ng://@spartacus/core/src/user/store/effects/product-interests.effect.ts","ng://@spartacus/core/src/user/store/effects/index.ts","ng://@spartacus/core/src/user/store/user-store.module.ts","ng://@spartacus/core/src/user/user.module.ts","ng://@spartacus/core/src/model/shared.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","ar","error","__spread","concat","isObject","item","isArray","deepMerge","sources","_i","source","shift","Date","_a","_b","_c","Config","InjectionToken","ConfigChunk","DefaultConfigChunk","provideConfig","config","defaultConfig","provide","useValue","multi","provideConfigFactory","configFactory","deps","useFactory","provideDefaultConfig","provideDefaultConfigFactory","configurationFactory","configChunks","defaultConfigChunks","ConfigModule","withConfig","ngModule","ConfigModule_1","providers","withConfigFactory","forRoot","Optional","NgModule","imports","CommonModule","declarations","defaultAnonymousConsentsConfig","anonymousConsents","registerConsent","showLegalDescriptionInDialog","requiredConsents","consentManagementPage","showAnonymousConsents","hideConsents","defaultAuthConfig","authentication","client_id","client_secret","backend","occ","endpoints","login","revoke","USE_CLIENT_TOKEN","InterceptorUtil","createHeader","headerName","interceptorParam","headers","append","JSON","stringify","HttpHeaders","set","removeHeader","request","updatedHeaders","delete","clone","getInterceptorParam","rawValue","get","parse","entityMeta","type","id","entityType","entityId","entityRemoveMeta","entityRemove","entityRemoveAllMeta","EntityRemoveAction","meta","EntityRemoveAllAction","loadMeta","loader","load","failMeta","successMeta","success","resetMeta","LoaderLoadAction","LoaderFailAction","LoaderSuccessAction","LoaderResetAction","entityLoadMeta","entityFailMeta","entitySuccessMeta","entityResetMeta","EntityLoadAction","EntityFailAction","EntitySuccessAction","payload","EntityLoaderResetAction","initialLoaderState","loading","undefined","loaderReducer","reducer","state","action","entity","newValue","loaderValueSelector","loaderLoadingSelector","loaderErrorSelector","loaderSuccessSelector","entityLoaderStateSelector","entities","entityValueSelector","initialEntityState","entityReducer","ids","partitionPayload","removed_1","newEntities","keys","reduce","acc","cur","includes","entityUpdates","subAction","newState","entityLoaderReducer","processesIncrementMeta","processesCountDiff","processesDecrementMeta","processesLoaderResetMeta","loaderResetMeta","ProcessesLoaderResetAction","ProcessesIncrementAction","ProcessesDecrementAction","entityProcessesLoaderResetMeta","entityProcessesIncrementMeta","entityProcessesDecrementMeta","EntityProcessesLoaderResetAction","EntityProcessesIncrementAction","EntityProcessesDecrementAction","isStableSelector","processesCount","hasPendingProcessesSelector","initialProcessesState","processesLoaderReducer","loaderState","isDevMode","console","initialProcessesLoaderState","entityHasPendingProcessesSelector","entityIsStableSelector","entityProcessesLoaderStateSelector","entityProcessesLoaderReducer","entitySelector","getStateSliceValue","split","previous","current","createShellObject","excludeKeys","shell","reduceRight","exclusionKeys","excludeKeys_1","excludeKeys_1_1","exclusionKey","getExclusionKeys","finalValue","exclusionKeys_1","exclusionKeys_1_1","exclusionChunksSplit","nestedTemp","currentChunk","handleExclusions","getStateSlice","stateSlices","keys_1","keys_1_1","currentKey","filterKeysByType","filter","LoadClientToken","_super","_this","StateUtils.LoaderLoadAction","LoadClientTokenFail","StateUtils.LoaderFailAction","LoadClientTokenSuccess","StateUtils.LoaderSuccessAction","LOGIN","LOGOUT","Login","Logout","LOAD_USER_TOKEN","LOAD_USER_TOKEN_SUCCESS","LoadUserToken","LoadUserTokenFail","LoadUserTokenSuccess","RefreshUserToken","RefreshUserTokenSuccess","RefreshUserTokenFail","RevokeUserToken","RevokeUserTokenSuccess","RevokeUserTokenFail","getAuthState","createFeatureSelector","clientToken","getClientTokenState","createSelector","ɵ0","getUserTokenSelector","token","userToken","getUserTokenState","ɵ1","getUserToken","AuthService","store","authorize","userId","password","dispatch","AuthActions.LoadUserToken","getOccUserId","pipe","map","invokeWithUserId","cb","take","subscribe","select","AuthSelectors.getUserToken","refreshUserToken","AuthActions.RefreshUserToken","refreshToken","refresh_token","authorizeWithToken","AuthActions.LoadUserTokenSuccess","logout","AuthActions.Logout","Boolean","AuthActions.RevokeUserToken","getClientToken","AuthSelectors.getClientTokenState","isClientTokenLoaded","AuthActions.LoadClientToken","refreshClientToken","isUserLoggedIn","access_token","Store","Injectable","providedIn","ClientErrorHandlingService","authService","handleExpiredClientToken","switchMap","handle","createNewRequestWithNewToken","setHeaders","Authorization","token_type","WindowRef","document","window","nativeWindow","sessionStorage","localStorage","fromEvent","debounceTime","startWith","distinctUntilChanged","of","Inject","args","DOCUMENT","UrlParsingService","router","getPrimarySegments","url","urlTree","parseUrl","_getPrimarySegmentsFromUrlTree","root","tree","segments","path","childrenSegments","children","PRIMARY_OUTLET","Router","isParam","segment","startsWith","getParamName","slice","RoutingConfig","useExisting","RoutingConfigService","getRouteConfig","routeName","routeConfig","routing","routes","warn","getLoadStrategy","loadStrategy","SemanticPathService","routingConfigService","urlParser","ROOT_URL","paths","transform","commands","commands_1","commands_1_1","command","isRouteCommand","partialResult","generateUrlPart","shouldOutputAbsolute","unshift","cxRoute","standarizeRouteCommand","findPathWithFillableParams","params","provideParamsValues","paramsMapping","paramName","mappedParamName","getMappedParamName","foundPath","find","getParams","every","RouteGoAction","RouteGoByUrlAction","RouteBackAction","RouteForwardAction","getRouterFeatureState","getRouterState","ɵ0$2","routingState","context","getPageContext","ɵ1$1","nextState","getNextPageContext","ɵ2","isNavigating","ɵ3","RoutingService","winRef","semanticPathService","RoutingSelector.getRouterState","RoutingSelector.getPageContext","RoutingSelector.getNextPageContext","RoutingSelector.isNavigating","go","query","extras","navigate","goByUrl","RoutingActions.RouteGoByUrlAction","back","referrer","location","origin","RoutingActions.RouteBackAction","forward","RoutingActions.RouteForwardAction","RoutingActions.RouteGoAction","UserErrorHandlingService","routingService","handleExpiredUserToken","handleExpiredToken","handleExpiredRefreshToken","oldToken","tap","AuthErrorInterceptor","userErrorHandlingService","clientErrorHandlingService","intercept","isClientTokenRequest","catchError","errResponse","HttpErrorResponse","status","isExpiredToken","throwError","isRequestMapping","resp","errors","DynamicTemplate","templateString","templateVariables","variableLabel","placeholder","RegExp","replace","getContextParameterValues","parameter","getContextParameterDefault","param","StorageSyncType","SiteContextConfig","LOAD_BASE_SITE","LoadBaseSite","LoadBaseSiteFail","LoadBaseSiteSuccess","SetActiveBaseSite","BaseSiteChange","LOAD_CURRENCIES","SET_ACTIVE_CURRENCY","CURRENCY_CHANGE","LoadCurrencies","LoadCurrenciesFail","LoadCurrenciesSuccess","SetActiveCurrency","CurrencyChange","LOAD_LANGUAGES","SET_ACTIVE_LANGUAGE","LANGUAGE_CHANGE","LoadLanguages","LoadLanguagesFail","LoadLanguagesSuccess","SetActiveLanguage","LanguageChange","getSiteContextState","baseSite","activeSite","getActiveBaseSite","ɵ0$3","details","getBaseSiteData","ɵ1$2","currenciesEntitiesSelector","activeCurrencySelector","activeCurrency","currencies","getCurrenciesState","ɵ2$1","getCurrenciesEntities","getActiveCurrency","isocode","getAllCurrencies","ɵ3$1","activeLanguageSelector","activeLanguage","languagesEntitiesSelector","getLanguagesState","languages","getLanguagesEntities","getActiveLanguage","getAllLanguages","BaseSiteService","getActive","SiteContextSelectors.getActiveBaseSite","active","getAll","setActive","activeBaseSite","SiteContextActions.SetActiveBaseSite","initialize","val","unsubscribe","SiteContextSelectors.getBaseSiteData","SiteContextActions.LoadBaseSite","CustomEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeURIComponent","decodeValue","OccConfig","OccEndpointsService","baseSiteService","getRawEndpoint","endpoint","baseUrl","getBaseEndpoint","prefix","getEndpoint","getUrl","urlParams","queryParams","scope","getEndpointForScope","forEach","httpParamsOptions","encoder","queryParamsFromEndpoint","fromString","httpParams_1","HttpParams","toString","endpointConfig","ClientTokenInterceptor","occEndpoints","UserTokenInterceptor","isOccUrl","TokenRevocationInterceptor","isTokenRevocationRequest","EMPTY","isTokenRevocationHeaderPresent","interceptors","HTTP_INTERCEPTORS","AuthConfig","ClientAuthenticationTokenService","http","occEndpointsService","loadClientAuthenticationToken","Content-Type","post","HttpClient","UserAuthenticationTokenService","loadToken","encodeURI","AuthServices","StateTransferType","StateConfig","defaultStateConfig","storageSync","localStorageKeyName","sessionStorageKeyName","getStorageSyncReducer","storageSyncConfig","INIT","UPDATE","rehydratedState","localStorageValue","readFromStorage","sessionStorageValue","rehydrate","localStorageStateSlices","LOCAL_STORAGE","persistToStorage","sessionStorageStateSlices","SESSION_STORAGE","configKey","storage","isSsr","setItem","storageValue","getItem","CX_KEY","makeStateKey","getTransferStateReducer","platformId","transferState","ssrTransfer","isPlatformBrowser","transferStateKeys","TRANSFER_STATE","authState","hasKey","cxKey","getBrowserTransferStateReducer","isPlatformServer","stateSlice","getServerTransferStateReducer","TRANSFER_STATE_META_REDUCER","STORAGE_SYNC_META_REDUCER","ɵ1$5","stateMetaReducers","PLATFORM_ID","TransferState","META_REDUCERS","StateModule","StateModule_1","UNKNOWN_ERROR","circularReplacer","seen","WeakSet","_key","has","add","makeErrorSerializable","Error","message","name","reason","stack","serializableError","statusText","ClientTokenEffect","actions$","clientAuthenticationTokenService","loadClientToken$","ofType","exhaustMap","AuthActions.LoadClientTokenSuccess","AuthActions.LoadClientTokenFail","Actions","Effect","UserTokenEffects","userTokenService","loadUserToken$","AuthActions.LOAD_USER_TOKEN","mergeMap","date","setSeconds","getSeconds","expires_in","expiration_time","toJSON","AuthActions.LoadUserTokenFail","login$","AuthActions.LOAD_USER_TOKEN_SUCCESS","AuthActions.Login","refreshUserToken$","AuthActions.RefreshUserTokenSuccess","AuthActions.RefreshUserTokenFail","revokeUserToken$","AuthActions.RevokeUserTokenSuccess","AuthActions.RevokeUserTokenFail","effects","initialState","getReducers","combineReducers","fromUserTokenReducer.reducer","reducerToken","reducerProvider","clearAuthState","AuthActions.LOGOUT","metaReducers","authStoreConfigFactory","auth.userToken.token.access_token","auth.userToken.token.token_type","auth.userToken.token.expires_in","auth.userToken.token.expiration_time","auth.userToken.token.scope","auth.userToken.token.userId","CountryType","PromotionLocation","PageType","CmsBannerCarouselEffect","ANONYMOUS_CONSENT_STATUS","ImageType","VariantType","PriceType","VariantQualifier","AuthStoreModule","HttpClientModule","StoreModule","forFeature","EffectsModule","AuthModule","AuthModule_1","AuthRedirectService","ignoredUrls","Set","redirect","redirectUrl","lastAuthGuardNavigation","reportAuthGuard","getCurrentNavigation","navigationId","reportNotAuthGuard","initialUrl","navigation","serializeUrl","finalUrl","AuthGuard","authRedirectService","canActivate","NotAuthGuard","NotificationType","DeferLoadingStrategy","ANONYMOUS_CONSENTS","LoadAnonymousConsentTemplates","LoadAnonymousConsentTemplatesSuccess","LoadAnonymousConsentTemplatesFail","ResetLoadAnonymousConsentTemplates","StateUtils.LoaderResetAction","GetAllAnonymousConsents","GetAnonymousConsent","templateCode","SetAnonymousConsents","GiveAnonymousConsent","WithdrawAnonymousConsent","ToggleAnonymousConsentsBannerDissmissed","dismissed","ToggleAnonymousConsentTemplatesUpdated","updated","getAnonymousConsentState","templates","getAnonymousConsentTemplatesState","ɵ0$8","getAnonymousConsentTemplatesValue","StateUtils.loaderValueSelector","getAnonymousConsentTemplatesLoading","StateUtils.loaderLoadingSelector","getAnonymousConsentTemplatesSuccess","StateUtils.loaderSuccessSelector","getAnonymousConsentTemplatesError","StateUtils.loaderErrorSelector","getAnonymousConsentTemplate","template","getAnonymousConsentTemplatesUpdate","ui","bannerDismissed","getAnonymousConsentsBannerDismissed","ɵ1$6","getAnonymousConsents","consents","getAnonymousConsentByTemplateCode","consent","AnonymousConsentsService","loadTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplates","getTemplates","loadIfMissing","iif","AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue","withLatestFrom","getLoadTemplatesLoading","getTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplate","AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading","getLoadTemplatesSuccess","AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess","getLoadTemplatesError","AnonymousConsentsSelectors.getAnonymousConsentTemplatesError","resetLoadTemplatesState","AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates","getConsents","AnonymousConsentsSelectors.getAnonymousConsents","setConsents","AnonymousConsentsActions.SetAnonymousConsents","getConsent","templateId","authenticated","AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode","giveConsent","AnonymousConsentsActions.GiveAnonymousConsent","giveAllConsents","isConsentGiven","consentState","GIVEN","withdrawConsent","AnonymousConsentsActions.WithdrawAnonymousConsent","withdrawAllConsents","isConsentWithdrawn","WITHDRAWN","toggleBannerDismissed","AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed","toggleTemplatesUpdated","isBannerDismissed","AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed","getTemplatesUpdated","AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate","AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated","isBannerVisible","combineLatest","detectUpdatedTemplates","currentTemplates","newTemplates","newTemplate","currentTemplate","version","serializeAndEncode","serialized","decodeAndDeserialize","rawConsents","decoded","consentsUpdated","newConsents","previousConsents","defaultOccAsmConfig","asmCustomerSearch","AsmConfig","CUSTOMER_SEARCH_PAGE_NORMALIZER","ConverterService","injector","converters","Map","getConverters","injectionToken","hasConverters","pipeable","model","convertSource","observable","pipeableMany","convertMany","convert","converter","Injector","OccAsmAdapter","converterService","customerSearch","options","pageSize","AsmOccModule","AsmAdapter","useClass","CART_NORMALIZER","PRODUCT_NORMALIZER","OccCartNormalizer","entries","entry","product","removeDuplicatePromotions","potentialOrderPromotions","removeDuplicateItems","potentialProductPromotions","appliedOrderPromotions","appliedProductPromotions","itemList","a","el","indexOf","defaultOccCartConfig","carts","cart","createCart","addEntries","updateEntries","removeEntries","addEmail","deleteCart","cartVoucher","saveCart","CART_MODIFICATION_NORMALIZER","OccCartEntryAdapter","cartId","productCode","quantity","toAdd","code","qty","update","entryNumber","pickupStore","patch","remove","CART_VOUCHER_NORMALIZER","OccCartVoucherAdapter","getCartVoucherEndpoint","getHeaders","voucherId","OccCartAdapter","loadAll","pluck","oldCartId","toMergeCartGuid","email","httpParams","put","SAVE_CART_NORMALIZER","OccSaveCartAdapter","saveCartName","saveCartDescription","CartOccModule","CartAdapter","CartEntryAdapter","CartVoucherAdapter","SaveCartAdapter","ORDER_NORMALIZER","OccCheckoutAdapter","subEndpoint","orderEndpoint","placeOrder","loadCheckoutDetails","clearCheckoutDeliveryAddress","clearCheckoutDeliveryMode","DELIVERY_MODE_NORMALIZER","ADDRESS_NORMALIZER","ADDRESS_SERIALIZER","ADDRESS_VALIDATION_NORMALIZER","OccCheckoutDeliveryAdapter","getCartEndpoint","cartEndpoint","createAddress","address","setAddress","addressId","setMode","deliveryModeId","getMode","getSupportedModes","PAYMENT_DETAILS_NORMALIZER","PAYMENT_DETAILS_SERIALIZER","CARD_TYPE_NORMALIZER","OccCheckoutPaymentAdapter","DOMParser","domparser","paymentDetails","getProviderSubInfo","data","labelsMap","convertToMap","mappingLabels","postUrl","parameters","getParamsForPaymentProvider","sub","createSubWithProvider","response","extractPaymentDetailsFromHtml","fromPaymentProvider","defaultPayment","createDetailsWithParameters","paymentDetailsId","loadCardTypes","cardTypeList","cardTypes","Accept","responseType","accountHolderName","cardType","cardNumber","expiryMonth","expiryYear","cvn","billingAddress","country","firstName","lastName","line1","line2","town","region","isocodeShort","postalCode","html","inputs","parseFromString","getElementsByTagName","values","input","getAttribute","paramList","OccOrderNormalizer","convertOrderEntry","consignments","consignment","orderEntry","unconsignedEntries","CheckoutOccModule","CheckoutAdapter","CheckoutDeliveryAdapter","CheckoutPaymentAdapter","CMS_PAGE_NORMALIZER","OccCmsPageAdapter","pageContext","fields","getPagesRequestParams","getPagesEndpoint","pageType","CONTENT_PAGE","CMS_COMPONENT_NORMALIZER","OccCmsComponentAdapter","getComponentEndPoint","findComponentsByIds","currentPage","sort","requestParams","getContextParams","getPaginationParams","getComponentsEndpoint","findComponentsByIdsLegacy","idList","PRODUCT_PAGE","CATEGORY_PAGE","categoryCode","CATALOG_PAGE","catalogCode","CmsConfig","OccCmsPageNormalizer","normalizePageData","normalizePageSlotData","normalizePageComponentData","normalizeComponentData","page","loadTime","now","typeCode","title","pageId","uid","slots","properties","contentSlots","contentSlot","slot","position","components","_d","component","_e","e_3","_f","comp","flexType","e_5","CmsPageAdapter","CmsOccModule","CmsComponentAdapter","ProductImageNormalizer","images","normalize","source_1","source_1_1","image","isList","imageType","imageContainer","galleryIndex","targetImage","normalizeImageUrl","format","test","media","ProductReferenceNormalizer","productReferences","references","reference","referenceType","OccProductSearchPageNormalizer","DEFAULT_TOP_VALUES","normalizeFacets","products","normalizeFacetValues","normalizeUselessFacets","facets","facet","pagination","totalResults","visible","selected","count","facetSource","topValues","facetTarget","getOwnPropertySymbols","propertyIsEnumerable","__rest","topValueCount","OccProductReferencesListNormalizer","ProductNameNormalizer","nameHtml","PRODUCT_REFERENCES_NORMALIZER","OccProductReferencesAdapter","PRODUCT_REVIEW_NORMALIZER","PRODUCT_REVIEW_SERIALIZER","OccProductReviewsAdapter","maxCount","review","URLSearchParams","headline","comment","rating","alias","PRODUCT_SEARCH_PAGE_NORMALIZER","PRODUCT_SUGGESTION_NORMALIZER","DEFAULT_SEARCH_CONFIG","OccProductSearchAdapter","search","searchConfig","getSearchEndpoint","loadSuggestions","term","getSuggestionEndpoint","sortCode","max","mergeFields","parsedFields","parseFields","stringifyFields","subFields","join","optimizeFields","startIndex","substr","extractFields","getObjectPart","ProductScope","OccFieldsService","FIELDS_PARAM","getOptimalUrlGroups","models","groupedByUrls","splitFields","urlPart","scopedData","mergedUrls","_g","_h","group","getUrlWithFields","lo","urlWithFields","paramsMap","keyValue","nonFields","par","mergedFields","OccRequestsOptimizerService","occFields","scopedDataLoad","scopedDataWithUrls","dataFactory","groupedModelsSet","groupedModels","data$","data$_1","shareReplay","modelData","OccProductAdapter","requestsOptimizer","loadMany","scopedProduct","defaultOccProductConfig","default","list","attributes","variants","productReviews","productSearch","productSuggestions","loadingScopes","include","LIST","VARIANTS","ProductOccModule","ProductAdapter","ProductReferencesAdapter","ProductSearchAdapter","ProductReviewsAdapter","LANGUAGE_NORMALIZER","CURRENCY_NORMALIZER","COUNTRY_NORMALIZER","REGION_NORMALIZER","OccSiteAdapter","loadLanguages","languageList","loadCurrencies","currencyList","loadCountries","countryList","countries","loadRegions","countryIsoCode","isoCode","regionList","regions","loadBaseSite","urlSplits","siteList","baseSites","site","defaultOccSiteContextConfig","CurrencyService","SiteContextSelectors.getAllCurrencies","SiteContextActions.LoadCurrencies","currenies","SiteContextSelectors.getActiveCurrency","SiteContextActions.SetActiveCurrency","sessionCurrency","LanguageService","SiteContextSelectors.getAllLanguages","SiteContextActions.LoadLanguages","SiteContextSelectors.getActiveLanguage","SiteContextActions.SetActiveLanguage","sessionLanguage","SiteContextInterceptor","languageService","currencyService","activeLang","activeCurr","setParams","lang","curr","SiteContextOccModule","SiteAdapter","defaultOccStoreFinderConfig","stores","storescounts","StoreFinderConnector","adapter","longitudeLatitude","radius","getCounts","loadCounts","storeId","StoreFinderAdapter","POINT_OF_SERVICE_NORMALIZER","STORE_FINDER_SEARCH_PAGE_NORMALIZER","STORE_COUNT_NORMALIZER","OccStoreFinderAdapter","callOccFindStores","countriesAndRegionsStoreCount","String","longitude","latitude","StoreFinderOccModule","CONSENT_TEMPLATE_NORMALIZER","OccAnonymousConsentTemplatesAdapter","loadAnonymousConsentTemplates","consentList","consentTemplates","OccUserAddressAdapter","addressList","addresses","verify","OccUserConsentAdapter","loadConsents","Cache-Control","consentTemplateId","consentTemplateVersion","consentCode","consentId","ORDER_HISTORY_NORMALIZER","CONSIGNMENT_TRACKING_NORMALIZER","ORDER_RETURN_REQUEST_NORMALIZER","ORDER_RETURN_REQUEST_INPUT_SERIALIZER","ORDER_RETURNS_NORMALIZER","OccUserOrderAdapter","orderCode","orderId","loadHistory","getConsignmentTracking","consignmentCode","cancel","cancelRequestInput","createReturnRequest","returnRequestInput","loadReturnRequestList","loadReturnRequestDetail","returnRequestCode","cancelReturnRequest","returnRequestModification","OccUserPaymentAdapter","methodList","payments","paymentMethodID","paymentDetailId","setDefault","titleCode","USER_NORMALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","OccUserAdapter","user","register","registerGuest","guid","requestForgotPasswordEmail","userEmailAddress","resetPassword","newPassword","updateEmail","currentPassword","newUserId","updatePassword","oldPassword","loadTitles","titleList","titles","defaultOccUserConfig","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","paymentDetailsAll","paymentDetail","orderHistory","orderDetail","anonymousConsentTemplates","consentDetail","addressDetail","addressVerification","consignmentTracking","customerCoupons","claimCoupon","couponNotification","notificationPreference","productInterests","getProductInterests","cancelOrder","returnOrder","orderReturns","orderReturnDetail","cancelReturn","CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER","OccCustomerCouponAdapter","getCustomerCoupons","newHttpHeader","turnOffNotification","couponCode","turnOnNotification","claimCustomerCoupon","NOTIFICATION_PREFERENCE_SERIALIZER","NOTIFICATION_PREFERENCE_NORMALIZER","UserNotificationPreferenceConnector","preferences","UserNotificationPreferenceAdapter","OccUserNotificationPreferenceAdapter","PRODUCT_INTERESTS_NORMALIZER","OccUserInterestsAdapter","getInterests","notificationType","headers$1","removeInterest","productInterestEntry","interestType","forkJoin","addInterest","OccUserInterestsNormalizer","results","OccReturnRequestNormalizer","returnEntries","UserOccModule","UserAdapter","UserAddressAdapter","UserConsentAdapter","AnonymousConsentTemplatesAdapter","UserPaymentAdapter","UserOrderAdapter","CustomerCouponAdapter","UserInterestsAdapter","JavaRegExpConverter","EXTRACT_JAVA_REGEXP_MODIFIERS","toJsRegExp","javaSyntax","parts","match","modifiers","jsSyntax","CONFIG_INITIALIZER","CONFIG_INITIALIZER_FORROOT_GUARD","SERVER_REQUEST_URL","SERVER_REQUEST_ORIGIN","OccLoadedConfigConverter","javaRegExpConverter","fromOccBaseSites","currentUrl","isCurrentBaseSite","getError","baseStore","getIsoCodes","defaultLanguage","defaultCurrency","urlParameters","getUrlParams","urlEncodingAttributes","toSiteContextConfig","toI18nConfig","i18n","fallbackLang","urlPatterns","findIndex","javaRegexp","jsRegexp","elements","defaultElement","moveToFirst","array","predicate","index","splice","OccSitesConfigLoader","baseEndpoint","EXTERNAL_CONFIG_TRANSFER_ID","OccConfigLoaderService","platform","sitesConfigLoader","serverRequestUrl","href","loadConfig","externalConfig","transfer","getConfigChunks","toPromise","rehydratedExternalConfig","chunks","shouldReturnI18nChunk","fallbackLangExists","initConfig","configLoader","scopes","OccConfigLoaderModule","OccConfigLoaderModule_1","occServerConfigFromMetaTagFactory","getMetaTagContent","mediaServerConfigFromMetaTagFactory","metaTag","getTag","content","defaultOccConfig","occConfigValidator","CONSENT_STATUS","Type","Fields61","Fields60","Fields59","Fields58","Fields57","Fields56","Fields55","Fields54","Fields53","Fields52","Fields51","Fields50","Fields49","Fields48","Fields47","Fields46","Fields45","Fields44","Fields43","Fields42","Fields41","Fields40","Fields39","Fields38","Fields37","Fields36","Fields35","Fields34","Fields33","Fields32","Fields31","Fields30","Fields29","Fields28","Fields27","Fields26","Fields25","Fields24","Fields23","Fields22","Fields21","Fields20","Fields19","Fields18","Fields17","SortEnum","Fields16","Fields15","Fields14","Fields13","Fields12","Fields11","Fields10","Fields9","Fields8","Fields7","Fields6","Fields5","Fields4","Fields3","Fields2","Fields1","Fields","Occ","WithCredentialsInterceptor","requiresWithCredentials","withCredentials","occConfig","useWithCredentials","ConfigValidatorToken","provideConfigValidator","configValidator","validateConfig","configValidators","configValidators_1","configValidators_1_1","warning","validate","OccModule","OccModule_1","LoadingScopesService","expand","scopesConfig","expandedScopes","includedScopes","includedScopes_1","e_1","includedScopes_1_1","includedScope","getMaxAge","maxAge","AnonymousConsentsConfig","AnonymousConsentsInterceptor","anonymousConsentsService","clonedRequest","handleRequest","event","HttpResponse","handleResponse","newRawConsents","giveRequiredConsents","givenConsents","givenConsents_1","givenConsents_1_1","EventService","eventsMeta","eventType","source$","getEventMeta","sources$","unregister","newSources","s$","output$","getInputSubject","eventMeta","inputSubject$","Subject","validateEventType","createEventMeta","BehaviorSubject","merge","share","getValidatedEventStream","createFrom","StateEventService","actionsSubject","eventService","mapping","getFromAction","createEvent","factory","ActionsSubject","StatePersistenceService","syncWithStorage","state$","context$","rxjs","storageType","exports","onRead","NO_STORAGE","getStorage","subscriptions","Subscription","generateKeyWithContext","getProcessStateFactory","processId","entityState","StateUtils.entityLoaderStateSelector","getProcessLoadingFactory","getProcessSuccessFactory","getProcessErrorFactory","LoadBillingCountries","LoadBillingCountriesFail","LoadBillingCountriesSuccess","LoadConsignmentTracking","LoadConsignmentTrackingFail","LoadConsignmentTrackingSuccess","ClearConsignmentTracking","LoadDeliveryCountries","LoadDeliveryCountriesFail","LoadDeliveryCountriesSuccess","ForgotPasswordEmailRequest","ForgotPasswordEmailRequestFail","ForgotPasswordEmailRequestSuccess","USER_CONSENTS","USER_PAYMENT_METHODS","USER_ORDERS","USER_ADDRESSES","USER_RETURN_REQUESTS","USER_ORDER_DETAILS","REGIONS","CUSTOMER_COUPONS","PRODUCT_INTERESTS","LoadOrderDetails","LoadOrderDetailsFail","LoadOrderDetailsSuccess","ClearOrderDetails","CancelOrder","StateUtils.EntityLoadAction","CancelOrderFail","StateUtils.EntityFailAction","CancelOrderSuccess","StateUtils.EntitySuccessAction","ResetCancelOrderProcess","StateUtils.EntityLoaderResetAction","LoadUserPaymentMethods","LoadUserPaymentMethodsFail","LoadUserPaymentMethodsSuccess","SetDefaultUserPaymentMethod","SetDefaultUserPaymentMethodFail","SetDefaultUserPaymentMethodSuccess","DeleteUserPaymentMethod","DeleteUserPaymentMethodFail","DeleteUserPaymentMethodSuccess","LoadRegions","LoadRegionsFail","LoadRegionsSuccess","ClearRegions","ResetPassword","ResetPasswordFail","ResetPasswordSuccess","LoadTitles","LoadTitlesFail","LoadTitlesSuccess","UpdateEmailAction","UpdateEmailSuccessAction","newUid","UpdateEmailErrorAction","ResetUpdateEmailAction","UpdatePassword","UpdatePasswordFail","UpdatePasswordSuccess","UpdatePasswordReset","LoadUserAddresses","LoadUserAddressesFail","LoadUserAddressesSuccess","AddUserAddress","AddUserAddressFail","AddUserAddressSuccess","UpdateUserAddress","UpdateUserAddressFail","UpdateUserAddressSuccess","DeleteUserAddress","DeleteUserAddressFail","DeleteUserAddressSuccess","LoadUserConsents","LoadUserConsentsFail","LoadUserConsentsSuccess","ResetLoadUserConsents","GiveUserConsent","GiveUserConsentFail","GiveUserConsentSuccess","consentTemplate","ResetGiveUserConsentProcess","TransferAnonymousConsent","WithdrawUserConsent","WithdrawUserConsentFail","WithdrawUserConsentSuccess","ResetWithdrawUserConsentProcess","LoadUserDetails","LoadUserDetailsFail","LoadUserDetailsSuccess","UpdateUserDetails","UpdateUserDetailsFail","UpdateUserDetailsSuccess","userUpdates","ResetUpdateUserDetails","ClearUserMiscsData","LoadUserOrders","LoadUserOrdersFail","LoadUserOrdersSuccess","ClearUserOrders","RegisterUser","RegisterUserFail","RegisterUserSuccess","ResetRegisterUserProcess","RegisterGuest","RegisterGuestFail","RegisterGuestSuccess","RemoveUser","RemoveUserFail","RemoveUserSuccess","RemoveUserReset","LoadCustomerCoupons","LoadCustomerCouponsFail","LoadCustomerCouponsSuccess","ResetLoadCustomerCoupons","SubscribeCustomerCoupon","SubscribeCustomerCouponFail","SubscribeCustomerCouponSuccess","ResetSubscribeCustomerCouponProcess","UnsubscribeCustomerCoupon","UnsubscribeCustomerCouponFail","UnsubscribeCustomerCouponSuccess","ResetUnsubscribeCustomerCouponProcess","ClaimCustomerCoupon","ClaimCustomerCouponFail","ClaimCustomerCouponSuccess","LoadNotificationPreferences","LoadNotificationPreferencesFail","LoadNotificationPreferencesSuccess","UpdateNotificationPreferences","UpdateNotificationPreferencesFail","UpdateNotificationPreferencesSuccess","ResetNotificationPreferences","ClearNotificationPreferences","LoadProductInterests","LoadProductInterestsFail","LoadProductInterestsSuccess","RemoveProductInterest","RemoveProductInterestSuccess","RemoveProductInterestFail","AddProductInterest","AddProductInterestSuccess","AddProductInterestFail","ResetAddInterestState","ResetRemoveInterestState","ClearProductInterests","CreateOrderReturnRequest","CreateOrderReturnRequestFail","CreateOrderReturnRequestSuccess","LoadOrderReturnRequest","LoadOrderReturnRequestFail","LoadOrderReturnRequestSuccess","CancelOrderReturnRequest","CancelOrderReturnRequestFail","CancelOrderReturnRequestSuccess","LoadOrderReturnRequestList","LoadOrderReturnRequestListFail","LoadOrderReturnRequestListSuccess","ClearOrderReturnRequest","ClearOrderReturnRequestList","ResetCancelReturnProcess","getUserState","billingCountries","getBillingCountriesState","ɵ0$b","getBillingCountriesEntites","ɵ1$7","entites","getAllBillingCountries","ɵ2$3","getConsignmentTrackingState","tracking","getDeliveryCountriesState","getDeliveryCountriesEntites","getAllDeliveryCountries","countrySelectorFactory","getOrderState","order","getOrderDetails","getOrderReturnRequestState","orderReturn","getOrderReturnRequest","getOrderReturnRequestLoading","getOrderReturnRequestSuccess","ɵ3$3","orderReturnList","getOrderReturnRequestListState","ɵ4","getOrderReturnRequestList","ɵ5","getPaymentMethodsState","getPaymentMethods","getPaymentMethodsLoading","getPaymentMethodsLoadedSuccess","getRegionsLoaderState","getAllRegions","getRegionsDataAndLoading","loaded","getRegionsCountry","getRegionsLoading","getRegionsLoaded","getResetPassword","getTitlesState","getTitlesEntites","getAllTitles","getAddressesLoaderState","getAddresses","getAddressesLoading","getAddressesLoadedSuccess","getConsentsState","getConsentsValue","getConsentByTemplateId","getConsentsLoading","getConsentsSuccess","getConsentsError","getDetailsState","account","getDetails","getOrdersState","orders","getOrdersLoaded","getOrders","getCustomerCouponsState","getCustomerCouponsLoaded","getCustomerCouponsLoading","getPreferencesLoaderState","notificationPreferences","getPreferences","getEnabledPreferences","enabled","getPreferencesLoading","getInterestsState","getInterestsLoading","UserConsentService","UserActions.LoadUserConsents","UsersSelectors.getConsentsValue","getConsentsResultLoading","getConsentsResultSuccess","UsersSelectors.getConsentsLoading","UsersSelectors.getConsentsSuccess","getConsentsResultError","UsersSelectors.getConsentsError","resetConsentsProcessState","UserActions.ResetLoadUserConsents","UsersSelectors.getConsentByTemplateId","currentConsent","consentGivenDate","consentWithdrawnDate","UserActions.GiveUserConsent","getGiveConsentResultLoading","getGiveConsentResultSuccess","getGiveConsentResultError","resetGiveConsentProcessState","UserActions.ResetGiveUserConsentProcess","UserActions.WithdrawUserConsent","getWithdrawConsentResultLoading","getWithdrawConsentResultSuccess","getWithdrawConsentResultError","resetWithdrawConsentProcessState","UserActions.ResetWithdrawUserConsentProcess","filterConsentTemplates","templateList","hideTemplateIds","updatedTemplateList","templateList_1","templateList_1_1","AnonymousConsentTemplatesConnector","AnonymousConsentsEffects","anonymousConsentTemplatesConnector","anonymousConsentsConfig","anonymousConsentService","userConsentService","loadAnonymousConsentTemplates$","concatMap","newConsentTemplates","currentConsentTemplates","AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess","AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail","transferAnonymousConsentsToUser$","registerAction","actions","consents_1","consents_1_1","templates_1","e_2","templates_1_1","UserActions.TransferAnonymousConsent","giveRequiredConsentsToUser$","templates_2","templates_2_1","SiteConnector","getLanguages","getCurrencies","getCountries","getRegions","getBaseSite","serviceMapFactory","contextServiceMapProvider","ContextServiceMap","baseSiteConfigValidator","defaultSiteContextConfigFactory","ConfigInitializerService","initializerGuard","ongoingScopes$","getStableConfig","isStable","ongoingScopes","areReady","mapTo","finishScopes","newScopes","scopes_1","scopes_1_1","scopes_2","scopes_2_1","ongoingScopes_1","ongoingScopes_1_1","ongoingScope","scopesOverlap","initializers","asyncConfigs","initializer","this_1","all","SiteContextParamsService","serviceMap","getContextParameters","getUrlEncodingParameters","getParamValues","getParamDefaultValue","getSiteContextService","getValue","service","setValue","getValues","UrlSplit","SiteContextUrlSerializer","siteContextParams","urlEncodingParameters","hasContextInRoutes","urlWithParams","urlExtractContextParameters","parsed","urlTreeIncludeContextParameters","queryPart","paramId","segmentId","siteContext","serialize","urlTreeExtractContextParameters","urlIncludeContextParameters","DefaultUrlSerializer","SiteContextRoutesHandler","serializer","subscription","contextValues","init","Location","routingParams","subscribeChanges","subscribeRouting","replaceState","onContextInitialized","contextInitialized","events","NavigationStart","NavigationEnd","NavigationError","NavigationCancel","setContextParamsFromRoute","ngOnDestroy","initializeContext","langService","currService","configInit","siteContextRoutesHandler","contextServiceProviders","APP_INITIALIZER","siteContextParamsProviders","UrlSerializer","LanguagesEffects","siteConnector","loadLanguages$","SiteContextActions.LOAD_LANGUAGES","SiteContextActions.LoadLanguagesSuccess","SiteContextActions.LoadLanguagesFail","persist$","SiteContextActions.SET_ACTIVE_LANGUAGE","switchMapTo","NEVER","activateLanguage$","bufferCount","SiteContextActions.LanguageChange","CurrenciesEffects","loadCurrencies$","SiteContextActions.LOAD_CURRENCIES","SiteContextActions.LoadCurrenciesSuccess","SiteContextActions.LoadCurrenciesFail","SiteContextActions.SET_ACTIVE_CURRENCY","activateCurrency$","SiteContextActions.CurrencyChange","BaseSiteEffects","loadBaseSite$","SiteContextActions.LOAD_BASE_SITE","SiteContextActions.LoadBaseSiteSuccess","SiteContextActions.LoadBaseSiteFail","initialState$1","initialState$2","currEntities","currency","initialState$3","langEntities","language","fromLanguages.reducer","fromCurrencies.reducer","fromBaseSite.reducer","siteContextStoreConfigFactory","SiteContextStoreModule","SiteContextModule","SiteContextModule_1","toggleConsentStatus","initialState$6","fromAnonymousConsents.reducer","fromAnonymousConsentsBanner.reducer","fromAnonymousConsentsUpdate.reducer","clearAnonymousConsentTemplates","SiteContextActions.LANGUAGE_CHANGE","anonymousConsentsStoreConfigFactory","AnonymousConsentsStoreModule","metaReducers$1","AnonymousConsentsModule","AnonymousConsentsModule_1","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","maxResults","CSAGENT_TOKEN_DATA","AsmConnector","asmAdapter","AsmUiUpdate","CustomerSearch","CustomerSearchFail","CustomerSearchSuccess","CustomerSearchReset","LoadCustomerSupportAgentToken","LoadCustomerSupportAgentTokenFail","LoadCustomerSupportAgentTokenSuccess","LogoutCustomerSupportAgent","CustomerEffects","asmConnector","customerSearch$","customerSearchResults","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","CustomerSupportAgentTokenEffects","loadCustomerSupportAgentToken$","AsmActions.LoadCustomerSupportAgentTokenSuccess","AsmActions.LoadCustomerSupportAgentTokenFail","collapsed","initialState$7","customerSearchResult","asmUi","fromAsmUiReducer.reducer","csagentToken","clearCustomerSupportAgentAsmState","asmStoreConfigFactory","asm.asmUi","asm.csagentToken.value.access_token","asm.csagentToken.value.token_type","asm.csagentToken.value.expires_in","asm.csagentToken.value.expiration_time","asm.csagentToken.value.scope","asm.csagentToken.value.userId","GlobalMessageType","AsmStoreModule","metaReducers$2","HttpResponseStatus","GlobalMessageConfig","ADD_MESSAGE","REMOVE_MESSAGE","AddMessage","RemoveMessage","RemoveMessagesByType","getGlobalMessageState","getGlobalMessageEntities","ɵ0$r","getGlobalMessageEntitiesByType","getGlobalMessageCountByType","GlobalMessageService","GlobalMessageSelectors.getGlobalMessageEntities","text","timeout","GlobalMessageActions.AddMessage","raw","GlobalMessageActions.RemoveMessage","GlobalMessageActions.RemoveMessagesByType","HttpErrorHandler","globalMessageService","hasMatch","errorResponse","responseStatus","BadGatewayHandler","BAD_GATEWAY","handleError","MSG_TYPE_ERROR","getPriority","getCartIdByUserId","isCartNotFoundError","subjectType","subject","getWishlistName","customerId","isTempCartId","BadRequestHandler","BAD_REQUEST","handleBadPassword","handleBadLoginResponse","handleBadCartRequest","handleValidationError","handleVoucherOperationError","errorMessage","error_description","MSG_TYPE_CONFIRMATION","_request","getErrors","ConflictHandler","CONFLICT","ForbiddenHandler","FORBIDDEN","GatewayTimeoutHandler","GATEWAY_TIMEOUT","InternalServerErrorHandler","INTERNAL_SERVER_ERROR","NotFoundHandler","NOT_FOUND","UnauthorizedErrorHandler","UNAUTHORIZED","UnknownErrorHandler","UNKNOWN","_errorResponse","resolveApplicable","applicables","matchParams","priorityParams","matchedApplicables","applicable","lastPriority","Infinity","currPriority","HttpErrorInterceptor","handlers","handleErrorResponse","handler","getResponseHandler","errorHandlers","httpErrorInterceptors","initialState$8","GlobalMessageActions.ADD_MESSAGE","currentMessages","GlobalMessageActions.REMOVE_MESSAGE","msgType","msgIndex","messages","fromGlobalMessage.reducer","GlobalMessageStoreModule","deepEqualObjects","objA","objB","indexOfFirstOccurrence","obj","arr","GlobalMessageEffect","removeDuplicated$","GlobalMessageSelectors.getGlobalMessageEntitiesByType","hideAfterDelay$","globalMessages","GlobalMessageSelectors.getGlobalMessageCountByType","delay","defaultGlobalMessageConfigFactory","MSG_TYPE_INFO","MSG_TYPE_WARNING","GlobalMessageModule","GlobalMessageModule_1","getAsmState","getAsmUi","ɵ0$s","getCustomerSearchResultsLoaderState","getCustomerSearchResults","ɵ1$l","getCustomerSearchResultsLoading","ɵ2$e","getCustomerSupportAgentTokenState","getCustomerSupportAgentToken","getCustomerSupportAgentTokenLoading","AsmAuthService","authorizeCustomerSupportAgent","AsmActions.LoadCustomerSupportAgentToken","startCustomerEmulationSession","customerSupportAgentToken","isCustomerEmulationToken","AsmSelectors.getCustomerSupportAgentToken","AsmSelectors.getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","AsmActions.LogoutCustomerSupportAgent","CustomerSupportAgentErrorHandlingService","asmAuthService","terminateCustomerSupportAgentExpiredSession","CustomerSupportAgentAuthErrorInterceptor","csagentErrorHandlingService","isCustomerSupportAgentRequest","CustomerSupportAgentTokenInterceptor","AsmModule","AsmModule_1","AsmService","AsmActions.CustomerSearch","customerSearchReset","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading","updateAsmUiState","AsmActions.AsmUiUpdate","getAsmUiState","AsmSelectors.getAsmUi","PageMetaResolver","getScore","score","pageTemplate","EMAIL_PATTERN","MULTI_CART_DATA","getMultiCartState","getMultiCartEntities","ɵ0$v","getCartEntitySelectorFactory","getCartSelectorFactory","getCartIsStableSelectorFactory","getCartHasPendingProcessesSelectorFactory","getCartEntriesSelectorFactory","getCartEntrySelectorFactory","getActiveCartId","ɵ1$n","wishList","getWishListId","ɵ2$g","CartAddEntry","CartAddEntrySuccess","CartAddEntryFail","CartRemoveEntry","CartRemoveEntrySuccess","CartRemoveEntryFail","CartUpdateEntry","CartUpdateEntrySuccess","CartUpdateEntryFail","CART_ADD_VOUCHER","CartAddVoucher","CartAddVoucherFail","CartAddVoucherSuccess","CartResetAddVoucher","CartRemoveVoucher","CartRemoveVoucherFail","CartRemoveVoucherSuccess","CREATE_CART","CreateCart","tempCartId","CreateCartFail","CreateCartSuccess","AddEmailToCart","AddEmailToCartFail","AddEmailToCartSuccess","LoadCart","LoadCartFail","LoadCartSuccess","MergeCart","MergeCartSuccess","ResetCartDetails","RemoveCart","DeleteCart","DeleteCartSuccess","DeleteCartFail","SetTempCart","CartProcessesIncrement","CartProcessesDecrement","SetActiveCartId","ClearCartState","CreateWishList","CreateWishListSuccess","CreateWishListFail","LoadWishList","LoadWishListSuccess","LoadWishListFail","MultiCartService","getCart","MultiCartSelectors.getCartSelectorFactory","getCartEntity","MultiCartSelectors.getCartEntitySelectorFactory","MultiCartSelectors.getCartIsStableSelectorFactory","debounce","timer","generateTempCartId","Math","random","extraData","CartActions.CreateCart","mergeToCurrentCart","CartActions.MergeCart","loadCart","CartActions.LoadCart","getEntries","MultiCartSelectors.getCartEntriesSelectorFactory","addEntry","CartActions.CartAddEntry","removeEntry","CartActions.CartRemoveEntry","updateEntry","CartActions.CartUpdateEntry","getEntry","MultiCartSelectors.getCartEntrySelectorFactory","assignEmail","CartActions.AddEmailToCart","CartActions.DeleteCart","ActiveCartService","multiCartService","PREVIOUS_USER_ID_INITIAL_VALUE","previousUserId","activeCartId$","MultiCartSelectors.getActiveCartId","cartSelector$","isJustLoggedIn","loadOrMerge","initActiveCart","activeCart$","cartEntity","activeCartId","isEmpty","cartUser","bufferSize","refCount","getLoading","isGuestCart","guestCartMerge","addEntriesGuestMerge","cartEntries","entriesToAdd","requireLoadedCartForGuestMerge","cartState","requireLoadedCart","isCartCreating","customCartSelector$","getAssignedUser","isEmail","str","withdrawOn","notifier","CartEntryConnector","CartEntryEffects","cartEntryConnector","contextChange$","SiteContextActions.CURRENCY_CHANGE","addEntry$","cartModification","CartActions.CartAddEntrySuccess","from","CartActions.CartAddEntryFail","removeEntry$","CartActions.CartRemoveEntrySuccess","CartActions.CartRemoveEntryFail","updateEntry$","CartActions.CartUpdateEntrySuccess","CartActions.CartUpdateEntryFail","CartVoucherConnector","CartVoucherEffects","cartVoucherConnector","messageService","addCartVoucher$","CartActions.CART_ADD_VOUCHER","showGlobalMessage","CartActions.CartAddVoucherSuccess","CartActions.CartAddVoucherFail","CartActions.CartProcessesDecrement","removeCartVoucher$","CartActions.CartRemoveVoucherSuccess","CartActions.CartRemoveVoucherFail","messageType","voucherCode","VerifyAddress","VerifyAddressFail","VerifyAddressSuccess","ClearAddressVerificationResults","LoadCardTypes","LoadCardTypesFail","LoadCardTypesSuccess","CHECKOUT_DETAILS","PLACE_ORDER","AddDeliveryAddress","AddDeliveryAddressFail","AddDeliveryAddressSuccess","SetDeliveryAddress","SetDeliveryAddressFail","SetDeliveryAddressSuccess","ResetSetDeliveryAddressProcess","LoadSupportedDeliveryModes","LoadSupportedDeliveryModesFail","LoadSupportedDeliveryModesSuccess","ResetLoadSupportedDeliveryModesProcess","SetDeliveryMode","SetDeliveryModeFail","SetDeliveryModeSuccess","ResetSetDeliveryModeProcess","CreatePaymentDetails","CreatePaymentDetailsFail","CreatePaymentDetailsSuccess","PaymentProcessSuccess","SetPaymentDetails","SetPaymentDetailsFail","SetPaymentDetailsSuccess","ResetSetPaymentDetailsProcess","PlaceOrder","PlaceOrderFail","PlaceOrderSuccess","ClearSupportedDeliveryModes","ClearCheckoutStep","ClearCheckoutData","LoadCheckoutDetails","LoadCheckoutDetailsFail","LoadCheckoutDetailsSuccess","CheckoutClearMiscsData","ClearCheckoutDeliveryAddress","ClearCheckoutDeliveryAddressSuccess","ClearCheckoutDeliveryAddressFail","ClearCheckoutDeliveryMode","ClearCheckoutDeliveryModeSuccess","ClearCheckoutDeliveryModeFail","CartConnector","CartEffects","cartConnector","loadCart$","groupBy","group$","CartActions.LoadCartSuccess","CartActions.RemoveCart","CartActions.LoadCartFail","err","createCart$","CartActions.CREATE_CART","conditionalActions","CartActions.MergeCartSuccess","CartActions.CreateCartSuccess","CartActions.SetTempCart","CartActions.CreateCartFail","mergeCart$","currentCart","refresh$","refreshWithoutProcesses$","resetCartDetailsOnSiteContextChange$","CartActions.ResetCartDetails","addEmail$","CartActions.AddEmailToCartSuccess","CartActions.AddEmailToCartFail","deleteCart$","CartActions.DeleteCartSuccess","CartActions.DeleteCartFail","SaveCartConnector","WishListEffects","saveCartConnector","createWishList$","description","saveCartResult","CartActions.CreateWishListSuccess","savedCartData","CartActions.CreateWishListFail","loadWishList$","CartActions.LoadWishListSuccess","CartActions.CreateWishList","CartActions.LoadWishListFail","resetWishList$","MultiCartSelectors.getWishListId","wishListId","activeCartReducer","cartEntitiesReducer","wishListReducer","clearMultiCartState","multiCartMetaReducers","multiCartReducerToken","getMultiCartReducers","multiCartReducerProvider","CartAddEntryEvent","CartEventBuilder","activeCartService","registerAddEntry","registerMapped","CartAddEntrySuccessEvent","CartAddEntryFailEvent","eventStream$","getAction","actionType","CartEventModule","_CartEventBuilder","CartVoucherService","addVoucher","combineUserAndCartId","occUserId","cartIdentifier","CartActions.CartAddVoucher","removeVoucher","CartActions.CartRemoveVoucher","getAddVoucherResultError","getAddVoucherResultSuccess","getAddVoucherResultLoading","resetAddVoucherProcessingState","CartActions.CartResetAddVoucher","UserService","UsersSelectors.getDetails","UserActions.LoadUserDetails","userRegisterFormData","UserActions.RegisterUser","UserActions.RegisterGuest","getRegisterUserResultLoading","getRegisterUserResultSuccess","getRegisterUserResultError","resetRegisterUserProcessState","UserActions.ResetRegisterUserProcess","UserActions.RemoveUser","getRemoveUserResultLoading","getRemoveUserResultError","getRemoveUserResultSuccess","resetRemoveUserProcessState","UserActions.RemoveUserReset","getTitles","UsersSelectors.getAllTitles","UserActions.LoadTitles","isPasswordReset","UsersSelectors.getResetPassword","updatePersonalDetails","userDetails","UserActions.UpdateUserDetails","username","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultError","getUpdatePersonalDetailsResultSuccess","resetUpdatePersonalDetailsProcessingState","UserActions.ResetUpdateUserDetails","UserActions.ResetPassword","UserActions.ForgotPasswordEmailRequest","UserActions.UpdateEmailAction","getUpdateEmailResultSuccess","getUpdateEmailResultError","getUpdateEmailResultLoading","resetUpdateEmailResultState","UserActions.ResetUpdateEmailAction","UserActions.UpdatePassword","getUpdatePasswordResultLoading","getUpdatePasswordResultError","getUpdatePasswordResultSuccess","resetUpdatePasswordProcessState","UserActions.UpdatePasswordReset","CartConfig","CartConfigService","isSelectiveCartEnabled","selectiveCart","SelectiveCartService","userService","cartConfigService","cartId$","selectiveCart$","getLoaded","isLoggedIn","loadAttempted","isEnabled","WishListService","createWishList","getWishList","loadWishList","CartActions.LoadWishList","getWishListLoading","stable","COMPONENT_ENTITY","LoadCmsComponent","LoadCmsComponentFail","LoadCmsComponentSuccess","CmsGetComponentFromPage","cmp","LoadCmsNavigationItems","nodeId","LoadCmsNavigationItemsFail","LoadCmsNavigationItemsSuccess","LoadCmsPageData","LoadCmsPageDataFail","LoadCmsPageDataSuccess","CmsSetPageSuccessIndex","CmsSetPageFailIndex","getCmsState","getComponentsState","ɵ0$w","componentsContextSelectorFactory","componentsState","StateUtils.entitySelector","componentsLoaderStateSelectorFactory","componentsContext","StateUtils.initialLoaderState","componentsContextExistsSelectorFactory","componentsDataSelectorFactory","componentsSelectorFactory","componentState","exists","getNavigationEntryItemState","getSelectedNavigationEntryItemState","nodes","getNavigationEntryItems","itemState","getPageEntitiesSelector","pageData","getIndexByType","category","catalog","getPageComponentTypesSelector","componentTypes","getPageState","ɵ3$9","getPageStateIndex","ɵ4$2","getPageStateIndexEntityLoaderState","getPageStateIndexLoaderState","indexState","getPageStateIndexValue","getPageEntities","getPageData","indexValue","getPageComponentTypes","getCurrentSlotSelectorFactory","serializePageContext","ignoreContentPageId","PageRobotsMeta","CmsService","getCurrentPage","CmsSelectors.getPageData","getComponentData","createComponentData","currentContext","loading$","CmsSelectors.componentsLoaderStateSelectorFactory","observeOn","queueScheduler","nextContext","loadingState","attemptedLoad","couldBeLoadedWithPageData","CmsActions.LoadCmsComponent","component$","CmsSelectors.componentsSelectorFactory","using","getContentSlot","CmsSelectors.getCurrentSlotSelectorFactory","navigationNodeUid","CmsSelectors.getNavigationEntryItems","loadNavigationItems","rootUid","CmsActions.LoadCmsNavigationItems","items","refreshLatestPage","CmsActions.LoadCmsPageData","refreshPageById","refreshComponent","CmsSelectors.getPageComponentTypes","hasPage","forceReload","CmsSelectors.getPageStateIndexLoaderState","shouldReload","getPage","getPageIndex","CmsSelectors.getPageStateIndexValue","setPageFailIndex","CmsActions.CmsSetPageFailIndex","CartPageMetaResolver","cms","cms$","resolveTitle","resolveRobots","NOFOLLOW","NOINDEX","MultiCartStatePersistenceService","statePersistenceService","siteContextParamsService","sync","getCartState","MultiCartSelectors.getMultiCartState","distinctUntilKeyChanged","CartActions.ClearCartState","CartActions.SetActiveCartId","MultiCartEffects","setTempCart$","processesIncrement$","CartActions.CartProcessesIncrement","MultiCartStoreModule","cartStatePersistenceFactory","cartStatePersistenceService","CartModule","CartModule_1","initialState$9","getDeliveryAddressSelector","getDeliveryModeSelector","deliveryMode","getPaymentDetailsSelector","getOrderDetailsSelector","orderDetails","getCheckoutState","checkoutState","steps","getCheckoutStepsState","ɵ4$3","getCheckoutSteps","ɵ5$2","getDeliveryAddress","getDeliveryMode","supported","getSupportedDeliveryModes","ɵ6","getSelectedDeliveryModeCode","ɵ7","getSelectedDeliveryMode","ɵ8","getPaymentDetails","getCheckoutOrderDetails","getCheckoutDetailsLoaded","ɵ9","getAddressVerificationResultsState","ɵ0$A","getAddressVerificationResults","initialState$a","cardTypesEntities","getCardTypesState","getCardTypesEntites","getAllCardTypes","ɵ1$q","CheckoutService","checkoutStore","userId_1","cartId_1","actionAllowed","CheckoutActions.PlaceOrder","clearCheckoutData","CheckoutActions.ClearCheckoutData","clearCheckoutStep","stepNumber","CheckoutActions.ClearCheckoutStep","CheckoutActions.LoadCheckoutDetails","CheckoutSelectors.getCheckoutDetailsLoaded","CheckoutSelectors.getCheckoutOrderDetails","CheckoutPageMetaResolver","translation","cart$","translate","totalItems","TranslationService","initialState$b","supportedModes","modes","mode","deliveryAddress","paymentInfo","fromCheckout.reducer","fromCardTypes.reducer","fromAddressVerification.reducer","UserAddressConnector","AddressVerificationEffect","userAddressConnector","verifyAddress$","CheckoutActions.VerifyAddressSuccess","CheckoutActions.VerifyAddressFail","CheckoutPaymentConnector","getCardTypes","CardTypesEffects","checkoutPaymentConnector","loadCardTypes$","CheckoutActions.LoadCardTypesSuccess","CheckoutActions.LoadCardTypesFail","CheckoutConnector","CheckoutDeliveryConnector","CheckoutEffects","checkoutDeliveryConnector","checkoutConnector","addDeliveryAddress$","CheckoutActions.SetDeliveryAddress","UserActions.LoadUserAddresses","CheckoutActions.AddDeliveryAddressFail","setDeliveryAddress$","CheckoutActions.SetDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryMode","CheckoutActions.ClearSupportedDeliveryModes","CheckoutActions.ResetLoadSupportedDeliveryModesProcess","CheckoutActions.LoadSupportedDeliveryModes","CheckoutActions.SetDeliveryAddressFail","loadSupportedDeliveryModes$","CheckoutActions.LoadSupportedDeliveryModesSuccess","CheckoutActions.LoadSupportedDeliveryModesFail","clearCheckoutMiscsDataOnLanguageChange$","CheckoutActions.CheckoutClearMiscsData","clearDeliveryModesOnCurrencyChange$","clearCheckoutDataOnLogout$","clearCheckoutDataOnLogin$","AuthActions.LOGIN","setDeliveryMode$","selectedModeId","CheckoutActions.SetDeliveryModeSuccess","CheckoutActions.SetDeliveryModeFail","createPaymentDetails$","CheckoutActions.CreatePaymentDetailsSuccess","UserActions.LoadUserPaymentMethods","CheckoutActions.CreatePaymentDetailsFail","setPaymentDetails$","CheckoutActions.SetPaymentDetailsSuccess","CheckoutActions.SetPaymentDetailsFail","placeOrder$","CheckoutActions.PLACE_ORDER","CheckoutActions.PlaceOrderSuccess","CheckoutActions.PlaceOrderFail","loadCheckoutDetails$","CheckoutActions.LoadCheckoutDetailsSuccess","CheckoutActions.LoadCheckoutDetailsFail","reloadDetailsOnMergeCart$","clearCheckoutDeliveryAddress$","CheckoutActions.ClearCheckoutDeliveryAddressSuccess","CheckoutActions.ClearCheckoutDeliveryAddressFail","clearCheckoutDeliveryMode$","CheckoutActions.ClearCheckoutDeliveryModeSuccess","CheckoutActions.ClearCheckoutDeliveryModeFail","CheckoutStoreModule","CheckoutModule","CheckoutModule_1","CheckoutDeliveryService","CheckoutSelectors.getSupportedDeliveryModes","loadSupportedDeliveryModes","CheckoutSelectors.getSelectedDeliveryMode","CheckoutSelectors.getSelectedDeliveryModeCode","CheckoutSelectors.getDeliveryAddress","getSetDeliveryAddressProcess","resetSetDeliveryAddressProcess","CheckoutActions.ResetSetDeliveryAddressProcess","getSetDeliveryModeProcess","resetSetDeliveryModeProcess","CheckoutActions.ResetSetDeliveryModeProcess","resetLoadSupportedDeliveryModesProcess","getLoadSupportedDeliveryModeProcess","clearCheckoutDeliveryModes","CheckoutSelectors.getAddressVerificationResults","createAndSetAddress","CheckoutActions.AddDeliveryAddress","userId_2","cartId_2","setDeliveryMode","userId_3","cartId_3","CheckoutActions.SetDeliveryMode","verifyAddress","userId_4","CheckoutActions.VerifyAddress","setDeliveryAddress","userId_5","cartId_4","clearAddressVerificationResults","CheckoutActions.ClearAddressVerificationResults","CheckoutActions.ClearCheckoutDeliveryAddress","clearCheckoutDeliveryDetails","CheckoutPaymentService","CheckoutSelectors.getAllCardTypes","CheckoutSelectors.getPaymentDetails","getSetPaymentDetailsResultProcess","resetSetPaymentDetailsProcess","CheckoutActions.ResetSetPaymentDetailsProcess","loadSupportedCardTypes","CheckoutActions.LoadCardTypes","createPaymentDetails","CheckoutActions.CreatePaymentDetails","setPaymentDetails","cart_1","activeCart","CheckoutActions.SetPaymentDetails","paymentProcessSuccess","CheckoutActions.PaymentProcessSuccess","defaultCmsModuleConfig","pages","legacy","cmsComponents","ContentPageMetaResolver","resolveBreadcrumbs","link","CmsPageTitleModule","bufferDebounceTime","time","scheduler","bufferedValues","TEST_CONFIG_COOKIE_NAME","configFromCookieFactory","cookieName","cookie","parseConfigJSON","exec","TestConfigModule","TestConfigModule_1","configValidatorFactory","configInitializer","validators","ConfigValidatorModule","ConfigValidatorModule_1","configInitializerFactory","ConfigInitializerModule","ConfigInitializerModule_1","CmsStructureConfig","CmsStructureConfigService","cmsDataConfig","mergePageStructure","pageStructure","mergePage","mergeSlots","shouldIgnoreBackend","getPageFromConfig","ignoreBackend","getComponentFromConfig","componentId","getComponentById","getComponentsFromConfig","cmsStructure","getComponentsByPosition","componentIds","CmsComponentConnector","cmsStructureConfigService","configuredComponent","getList","configuredComponents","missingIds","loadedComponents","ComponentsEffects","cmsComponentConnector","loadComponent$","createEffect","actionGroup","loadComponentsEffect","componentUids","uidsLeft","components_1","components_1_1","CmsActions.LoadCmsComponentSuccess","CmsActions.LoadCmsComponentFail","TO_ESCAPE_BASE","with","TO_ESCAPE_WILDCARD_QM","TO_ESCAPE_LITERAL_QM","globToRegex","glob","literalQuestionMark","toEscape","reverse","regex","seg","escape","processGlobPatterns","urls","positive","GlobService","getValidator","patterns","processedPatterns","includePatterns","spec","excludePatterns","some","pattern","UrlMatcherService","globService","getFalsy","getFromPaths","matchers","getFromPath","matcher","getCombined","segmentGroup","route","pathMatch","hasChildren","consumed","posParams","part","substring","getOpposite","originalMatcher","getFromGlob","globPatterns","globValidator","fullPath","ConfigurableRoutesService","urlMatcherService","initCalled","configure","resetConfig","configureRoutes","configuredRoute","configureRoute","getRouteName","validateRouteConfig","disabled","resolveUrlMatchers","matchersOrFactories","matcherOrFactory","resolveUrlMatcherFactory","factoryToken","UrlPipe","urlService","Pipe","ProductURLPipe","semanticPath","UrlModule","ExternalRoutesConfig","ExternalRoutesGuard","addExternalRoutesFactory","addRoutes","ExternalRoutesService","internal","newRoutes","getRoutes","internalUrlPatterns","getUrlMatcher","ExternalRoutesModule","ExternalRoutesModule_1","ProtectedRoutesService","nonProtectedPaths","shouldProtect","getNonProtectedPaths","getSegments","routingConfig","protected","isUrlProtected","urlSegments","matchAnyPath","pathsSegments","pathSegments","matchPath","pathSeg","urlSeg","ProtectedRoutesGuard","authGuard","RouterEffects","navigate$","navigateBuUrl$","navigateByUrl","clearCmsRoutes$","filteredConfig","cxCmsRouteContext","navigateBack$","navigateForward$","cmsRequired","initialState$c","fromNgrxRouter.ROUTER_NAVIGATION","routerState","fromNgrxRouter.ROUTER_ERROR","fromNgrxRouter.ROUTER_CANCEL","fromNgrxRouter.ROUTER_NAVIGATED","CustomSerializer","firstChild","x","guardName","pageLabel","urlSegment","initConfigurableRoutes","RoutingModule","RoutingModule_1","RouterStateSerializer","StoreRouterConnectingModule","stateKey","DEFAULT_URL_MATCHER","inject","NavigationEntryItemEffects","loadNavigationItems$","getIdListByItemType","CmsActions.LoadCmsNavigationItemsSuccess","CmsActions.LoadCmsNavigationItemsFail","pageIds","mediaIds","superType","CmsPageConnector","cmsPageAdapter","loadFromConfig","mergeDefaultPageStructure","PageEffects","cmsPageConnector","refreshPage$","loadPageData$","CmsActions.CmsGetComponentFromPage","CmsActions.LoadCmsPageDataSuccess","CmsActions.CmsSetPageSuccessIndex","CmsActions.LoadCmsPageDataFail","componentExistsReducer","initialState$d","pageContextReducer","newItem","compItems","initialState$f","fromPageReducer.reducer","fromPageIndexReducer.reducer","fromComponentsReducer.reducer","fromNavigation.reducer","clearCmsState","cmsStoreConfigFactory","CmsStoreModule","metaReducers$3","CmsModule","CmsModule_1","PageMetaService","resolvers","resolverMethods","heading","breadcrumbs","robots","getMeta","metaResolver","getMetaResolver","resolveMethods","SmartEditService","cmsService","zone","isPreviewPage","_launchedInSmartEdit","getCmsTicket","window_1","smartedit","renderComponent","componentType","parentId","reprocessPage","_cmsTicketId","takeWhile","getDefaultPreviewCode","defaultPreviewCategoryCode","defaultPreviewProductCode","addPageContract","cmsPage","_currentPageId","goToPreviewPage","previousContract_1","classList","attr","classes","classItem","run","isLaunchedInSmartEdit","NgZone","DynamicAttributeService","smartEditService","addDynamicAttributes","element","renderer","cmsRenderingContext","componentData","slotData","groupProps","propName","propValue","setAttribute","toLowerCase","FeaturesConfig","isFeatureConfig","features","isInLevel","level","levelParts","versionParts","versionNumberPart","Number","levelNumberPart","isFeatureLevel","isFeatureEnabled","feature","featureConfig","FeatureConfigService","isLevel","FeatureLevelDirective","templateRef","viewContainer","hasView","createEmbeddedView","clear","TemplateRef","ViewContainerRef","Input","Directive","selector","FeatureDirective","FeaturesConfigModule","defaultLevel","FeaturesConfigModule_1","CxDatePipe","timezone","getLang","getActiveLang","getLocaleId","reportMissingLocaleData","DatePipe","TranslatePipe","cd","translatedValue","lastKey","aKeys","bKeys","aKeysLen","shallowEqualObjects","lastOptions","markForCheck","ChangeDetectorRef","pure","I18nConfig","TranslationChunkService","duplicates","KEY_SEPARATOR","chunk","warnDuplicates","getChunkNameForKey","mainKey","dupes","defaultI18nConfig","debug","i18nextInit","httpClient","serverRequestOrigin","i18nextConfig","ns","fallbackLng","interpolation","escapeValue","i18next","use","i18nextXhrBackend","loadPath","getLoadPath","ajax","i18nextGetHttpClient","resources","chunkName","addResourceBundle","i18nextAddTranslations","changeLanguage","_options","callback","_data","i18nextProviders","ɵ0$C","I18nextTranslationService","translationChunk","NON_BREAKING_SPACE","fromCharCode","NAMESPACE_SEPARATOR","whitespaceUntilLoaded","namespacedKey","getNamespacedKey","Observable","subscriber","isInitialized","loadNamespaces","reportMissingKey","getFallbackValue","on","off","loadChunks","chunkNames","I18nModule","I18nModule_1","mockTranslate","optionsString","optionName","MockTranslatePipe","MockTranslationService","_whitespaceUntilLoaded","complete","_chunks","MockDatePipe","I18nTestingModule","KymaConfig","OPEN_ID_TOKEN_DATA","LoadOpenIdToken","LoadOpenIdTokenFail","LoadOpenIdTokenSuccess","getKymaState","openIdToken","getOpenIdTokenState","ɵ0$D","getOpenIdTokenValue","getOpenIdTokenLoading","getOpenIdTokenSuccess","getOpenIdTokenError","KymaService","authorizeOpenId","KymaActions.LoadOpenIdToken","getOpenIdToken","KymaSelectors.getOpenIdTokenValue","defaultKymaConfig","kyma_client_id","kyma_client_secret","OpenIdAuthenticationTokenService","loadOpenIdAuthenticationToken","getOAuthEndpoint","KymaServices","OpenIdTokenEffect","openIdTokenService","triggerOpenIdTokenLoading$","loginAction","loadOpenIdToken$","KymaActions.LoadOpenIdTokenSuccess","KymaActions.LoadOpenIdTokenFail","clearKymaState","kymaStoreConfigFactory","kyma.openIdToken.value","KymaStoreModule","metaReducers$4","KymaModule","defaultPersonalizationConfig","personalization","httpHeaderName","timestamp","slotPosition","PersonalizationConfig","OccPersonalizationIdInterceptor","requestHeader","personalizationId","removeItem","receivedId","OccPersonalizationTimeInterceptor","receivedTimestamp","PersonalizationModule","PersonalizationModule_1","PersonalizationContextService","getPersonalizationContext","buildPersonalizationContext","script","atob","EntityScopedLoaderActions","ProcessStoreModule","ProcessModule","ProcessModule_1","ProductConnector","getMany","ProductReferencesConnector","ProductReviewsConnector","ProductSearchConnector","getSuggestions","LoadProductReferences","LoadProductReferencesFail","LoadProductReferencesSuccess","CleanProductReferences","LoadProductReviews","LoadProductReviewsFail","LoadProductReviewsSuccess","PostProductReview","PostProductReviewFail","PostProductReviewSuccess","SearchProducts","auxiliary","SearchProductsFail","SearchProductsSuccess","GetProductSuggestions","GetProductSuggestionsSuccess","GetProductSuggestionsFail","ClearProductSearchResult","clearPageResults","clearSearchboxResults","entityScopedLoadMeta","entityScopedFailMeta","entityScopedSuccessMeta","entityScopedResetMeta","EntityScopedLoadAction","EntityScopedFailAction","EntityScopedSuccessAction","EntityScopedResetAction","LOAD_PRODUCT","LoadProduct","LoadProductFail","LoadProductSuccess","getProductsState","getProductReferencesState","ɵ0$E","getSelectedProductReferencesFactory","referenceTypeData","getProductReviewsState","reviews","getSelectedProductReviewsFactory","reviewData","suggestions","auxResults","initialState$h","res","getProductsSearchState","getSearchResults","getAuxSearchResults","getProductSuggestions","getProductState","getSelectedProductStateFactory","getSelectedProductFactory","productState","getSelectedProductLoadingFactory","getSelectedProductSuccessFactory","getSelectedProductErrorFactory","getAllProductCodes","ɵ1$r","ProductReferenceService","ProductSelectors.getSelectedProductReferencesFactory","ProductActions.LoadProductReferences","cleanReferences","ProductActions.CleanProductReferences","ProductReviewService","getByProductCode","ProductSelectors.getSelectedProductReviewsFactory","ProductActions.LoadProductReviews","ProductActions.PostProductReview","ProductSearchService","ProductActions.SearchProducts","queryText","getResults","ProductSelectors.getSearchResults","clearResults","ProductActions.ClearProductSearchResult","ProductLoadingService","initProductScopes","getScopesIndex","getProductForScope","auditTime","productParts","shouldLoad$","ProductSelectors.getSelectedProductStateFactory","isLoading$","ProductSelectors.getSelectedProductLoadingFactory","productLoadLogic$","getProductReloadTriggers","ProductActions.LoadProduct","productData$","ProductSelectors.getSelectedProductFactory","triggers","loadFinish$","loadStart$","ProductActions.LOAD_PRODUCT","getMaxAgeTrigger","timestamp$","defer","age","timestampRefresh$","ProductService","productLoading","isLoading","isSuccess","ProductSelectors.getSelectedProductSuccessFactory","hasError","ProductSelectors.getSelectedProductErrorFactory","reload","SearchboxService","ProductSelectors.getAuxSearchResults","getSuggestionResults","ProductSelectors.getProductSuggestions","searchSuggestions","ProductActions.GetProductSuggestions","CategoryPageMetaResolver","productSearchService","searchPage$","hasProductListComponent","facetValueName","resolveBreadcrumbData","br","facetCode","facetValueCode","CouponSearchPageResolver","total$","homeLabel","couponLabel","total","coupon","snapshot","couponcode","ActivatedRoute","ProductPageMetaResolver","productService","product$","DETAILS","resolveHeading","resolveFirstCategory","resolveManufacturer","resolveDescription","summary","categories","name_1","resolveImage","PRIMARY","zoom","firstCategory","manufacturer","FOLLOW","INDEX","SearchPageMetaResolver","query$","q","ProductReferencesEffects","productReferencesConnector","loadProductReferences$","ProductActions.LoadProductReferencesSuccess","_error","ProductActions.LoadProductReferencesFail","ProductReviewsEffects","productReviewsConnector","loadProductReviews$","ProductActions.LoadProductReviewsSuccess","ProductActions.LoadProductReviewsFail","postProductReview","reviewResponse","ProductActions.PostProductReviewSuccess","ProductActions.PostProductReviewFail","showGlobalMessageOnPostProductReviewSuccess$","ProductsSearchEffects","productSearchConnector","searchProducts$","ProductActions.SearchProductsSuccess","ProductActions.SearchProductsFail","getProductSuggestions$","ProductActions.GetProductSuggestionsSuccess","ProductActions.GetProductSuggestionsFail","ProductEffects","productConnector","loadProduct$","productLoadEffect","productLoad","ProductActions.LoadProductSuccess","ProductActions.LoadProductFail","initialState$i","productReference","initialState$j","initialScopedLoaderState","scopedLoaderReducer","entityScopedLoaderReducer","fromProductsSearch.reducer","fromProductReviews.reducer","fromProductReferences.reducer","clearProductsState","productStoreConfigFactory","ProductStoreModule","metaReducers$5","pageTitleResolvers","ProductModule","ProductModule_1","CmsTicketInterceptor","cmsTicketId","SmartEditModule","SmartEditModule_1","NgExpressEngineDecorator","ngExpressEngine","setupOptions","filePath","getServerRequestProviders","engineInstance","req","getRequestOrigin","originalUrl","protocol","StoreFinderConfig","STORE_FINDER_DATA","FIND_STORES","FIND_STORE_BY_ID","FindStoresOnHold","FindStores","FindStoresFail","FindStoresSuccess","FindStoreById","FindStoreByIdFail","FindStoreByIdSuccess","ViewAllStores","ViewAllStoresFail","ViewAllStoresSuccess","getStoreFinderState","storesState","findStores","getFindStoresState","ɵ0$I","getFindStoresEntities","ɵ1$s","getStoresLoading","ɵ2$j","getViewAllStoresState","viewAllStores","getViewAllStoresEntities","getViewAllStoresLoading","StoreFinderService","geolocationWatchId","StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","findStoresAction","useMyLocation","clearWatchGeolocation","StoreFinderActions.FindStoresOnHold","navigator","geolocation","watchPosition","pos","coords","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","viewStoreById","StoreFinderActions.FindStoreById","callbackAction","clearWatch","StoreDataService","weekDays","0","1","2","3","4","5","6","getStoreLatitude","geoPoint","getStoreLongitude","getStoreClosingTime","requestedDaySchedule","getSchedule","closed","closingTime","formattedHour","getStoreOpeningTime","openingTime","weekday","getDay","openingHours","weekDayOpeningList","weekDayOpeningListItem","weekDay","ExternalJsFileLoader","src","createElement","parseParams","async","addEventListener","head","appendChild","keysArray","GoogleMapRendererService","externalJsFileLoader","storeDataService","googleMap","renderMap","mapElement","locations","selectMarkerHandler","googleMaps","apiUrl","apiKey","drawMap","centerMap","latitute","panTo","lat","lng","setZoom","selectedMarkerScale","defineMapCenter","google","maps","LatLng","initMap","mapCenter","mapProp","center","scale","mapTypeId","MapTypeId","ROADMAP","gestureHandling","createMarkers","markers","marker","Marker","setMap","addListener","setAnimation","Animation","BOUNCE","defaultStoreFinderConfig","FindStoresEffect","storeFinderConnector","findStores$","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","findStoreById$","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","ViewAllStoresEffect","viewAllStores$","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderStoreModule","StoreFinderCoreModule","UserConnector","UserConsentConnector","UserPaymentConnector","UserOrderConnector","getHistory","getReturnRequestDetail","getReturnRequestList","CustomerCouponConnector","UserInterestsConnector","ConsentService","checkConsentGivenByTemplateId","isAnonymousConsentType","checkConsentWithdrawnByTemplateId","isConsentType","UserAddressService","loadAddresses","addUserAddress","UserActions.AddUserAddress","setAddressAsDefault","UserActions.UpdateUserAddress","defaultAddress","updateUserAddress","deleteUserAddress","UserActions.DeleteUserAddress","UsersSelectors.getAddresses","UsersSelectors.getAddressesLoading","UsersSelectors.getAddressesLoadedSuccess","loadDeliveryCountries","UserActions.LoadDeliveryCountries","getDeliveryCountries","UsersSelectors.getAllDeliveryCountries","getCountry","UsersSelectors.countrySelectorFactory","UserActions.LoadRegions","clearRegions","UserActions.ClearRegions","UsersSelectors.getRegionsDataAndLoading","UserOrderService","UsersSelectors.getOrderDetails","loadOrderDetails","UserActions.LoadOrderDetails","clearOrderDetails","UserActions.ClearOrderDetails","getOrderHistoryList","UsersSelectors.getOrdersState","orderListState","loadOrderList","getOrderHistoryListLoaded","UsersSelectors.getOrdersLoaded","UserActions.LoadUserOrders","clearOrderList","UserActions.ClearUserOrders","UsersSelectors.getConsignmentTracking","loadConsignmentTracking","UserActions.LoadConsignmentTracking","clearConsignmentTracking","UserActions.ClearConsignmentTracking","UserActions.CancelOrder","getCancelOrderLoading","getCancelOrderSuccess","resetCancelOrderProcessState","UserActions.ResetCancelOrderProcess","CustomerCouponService","loadCustomerCoupons","UserActions.LoadCustomerCoupons","UsersSelectors.getCustomerCouponsState","getClaimCustomerCouponResultLoading","customerCouponsState","UsersSelectors.getCustomerCouponsLoaded","UsersSelectors.getCustomerCouponsLoading","subscribeCustomerCoupon","UserActions.SubscribeCustomerCoupon","getSubscribeCustomerCouponResultLoading","getSubscribeCustomerCouponResultSuccess","getSubscribeCustomerCouponResultError","unsubscribeCustomerCoupon","UserActions.UnsubscribeCustomerCoupon","getUnsubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultSuccess","getUnsubscribeCustomerCouponResultError","UserActions.ClaimCustomerCoupon","getClaimCustomerCouponResultSuccess","UserPaymentService","loadPaymentMethods","UsersSelectors.getPaymentMethods","UsersSelectors.getPaymentMethodsLoading","UsersSelectors.getPaymentMethodsLoadedSuccess","setPaymentMethodAsDefault","paymentMethodId","UserActions.SetDefaultUserPaymentMethod","deletePaymentMethod","UserActions.DeleteUserPaymentMethod","UsersSelectors.getAllBillingCountries","loadBillingCountries","UserActions.LoadBillingCountries","OrderReturnRequestService","createOrderReturnRequest","UserActions.CreateOrderReturnRequest","UsersSelectors.getOrderReturnRequest","UsersSelectors.getOrderReturnRequestListState","returnListState","loadOrderReturnRequestList","loadOrderReturnRequestDetail","UserActions.LoadOrderReturnRequest","UserActions.LoadOrderReturnRequestList","clearOrderReturnRequestList","UserActions.ClearOrderReturnRequestList","getReturnRequestLoading","UsersSelectors.getOrderReturnRequestLoading","getReturnRequestSuccess","UsersSelectors.getOrderReturnRequestSuccess","clearOrderReturnRequestDetail","UserActions.ClearOrderReturnRequest","cancelOrderReturnRequest","UserActions.CancelOrderReturnRequest","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","resetCancelReturnRequestProcessState","UserActions.ResetCancelReturnProcess","UserNotificationPreferenceService","UsersSelectors.getPreferences","UsersSelectors.getEnabledPreferences","loadPreferences","UserActions.LoadNotificationPreferences","clearPreferences","UserActions.ClearNotificationPreferences","UsersSelectors.getPreferencesLoading","updatePreferences","UserActions.UpdateNotificationPreferences","getUpdatePreferencesResultLoading","resetNotificationPreferences","UserActions.ResetNotificationPreferences","UserInterestsService","loadProductInterests","UserActions.LoadProductInterests","UsersSelectors.getInterests","getAndLoadProductInterests","UsersSelectors.getInterestsState","interestListState","getProdutInterestsLoading","UsersSelectors.getInterestsLoading","removeProdutInterest","singleDelete","UserActions.RemoveProductInterest","getRemoveProdutInterestLoading","getRemoveProdutInterestSuccess","addProductInterest","UserActions.AddProductInterest","getAddProductInterestSuccess","getAddProductInterestError","resetAddInterestState","UserActions.ResetAddInterestState","resetRemoveInterestState","UserActions.ResetRemoveInterestState","clearProductInterests","UserActions.ClearProductInterests","initialState$k","countryEntities","initialState$l","initialState$m","initialState$n","initialState$o","initialState$p","initialState$q","initialState$s","titleEntities","initialState$t","initialState$u","updatedConsentTemplate_1","initialState$v","updatedDetails","sorts","initialState$w","coupons","initialState$x","updatedCustomerCoupon_1","customerCoupons_1","customerCoupon","couponId","updatedCouponCode_1","customerCoupons_2","notificationOn","initialState$y","returnRequests","initialState$z","fromUserDetailsReducer.reducer","fromAddressesReducer.reducer","fromBillingCountriesReducer.reducer","fromUserConsentsReducer.reducer","fromPaymentReducer.reducer","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromOrderReturnRequestReducer.reducer","fromDeliveryCountries.reducer","fromTitlesReducer.reducer","fromRegionsReducer.reducer","fromResetPasswordReducer.reducer","fromConsignmentTrackingReducer.reducer","fromCustomerCouponReducer.reducer","fromNotificationPreferenceReducer.reducer","fromInterestsReducer.reducer","clearUserState","BillingCountriesEffect","loadBillingCountries$","BILLING","UserActions.LoadBillingCountriesSuccess","UserActions.LoadBillingCountriesFail","ClearMiscsDataEffect","clearMiscsData$","UserActions.ClearUserMiscsData","ConsignmentTrackingEffects","userOrderConnector","loadConsignmentTracking$","UserActions.LoadConsignmentTrackingSuccess","UserActions.LoadConsignmentTrackingFail","DeliveryCountriesEffects","loadDeliveryCountries$","SHIPPING","UserActions.LoadDeliveryCountriesSuccess","UserActions.LoadDeliveryCountriesFail","ForgotPasswordEffects","userAccountConnector","requestForgotPasswordEmail$","UserActions.ForgotPasswordEmailRequestSuccess","UserActions.ForgotPasswordEmailRequestFail","NotificationPreferenceEffects","connector","loadPreferences$","UserActions.LoadNotificationPreferencesSuccess","UserActions.LoadNotificationPreferencesFail","updatePreferences$","UserActions.UpdateNotificationPreferencesSuccess","UserActions.UpdateNotificationPreferencesFail","OrderDetailsEffect","orderConnector","loadOrderDetails$","UserActions.LoadOrderDetailsSuccess","UserActions.LoadOrderDetailsFail","cancelOrder$","UserActions.CancelOrderSuccess","UserActions.CancelOrderFail","OrderReturnRequestEffect","createReturnRequest$","returnRequest","UserActions.CreateOrderReturnRequestSuccess","UserActions.CreateOrderReturnRequestFail","loadReturnRequest$","UserActions.LoadOrderReturnRequestSuccess","UserActions.LoadOrderReturnRequestFail","cancelReturnRequest$","UserActions.CancelOrderReturnRequestSuccess","UserActions.CancelOrderReturnRequestFail","loadReturnRequestList$","returnRequestList","UserActions.LoadOrderReturnRequestListSuccess","UserActions.LoadOrderReturnRequestListFail","UserPaymentMethodsEffects","userPaymentMethodConnector","loadUserPaymentMethods$","UserActions.LoadUserPaymentMethodsSuccess","UserActions.LoadUserPaymentMethodsFail","setDefaultUserPaymentMethod$","UserActions.SetDefaultUserPaymentMethodSuccess","UserActions.SetDefaultUserPaymentMethodFail","deleteUserPaymentMethod$","UserActions.DeleteUserPaymentMethodSuccess","UserActions.DeleteUserPaymentMethodFail","RegionsEffects","loadRegions$","countryCode","UserActions.LoadRegionsSuccess","UserActions.LoadRegionsFail","resetRegions$","ResetPasswordEffects","resetPassword$","UserActions.ResetPasswordSuccess","UserActions.ResetPasswordFail","TitlesEffects","loadTitles$","UserActions.LoadTitlesSuccess","UserActions.LoadTitlesFail","UpdateEmailEffects","updateEmail$","UserActions.UpdateEmailSuccessAction","UserActions.UpdateEmailErrorAction","UpdatePasswordEffects","updatePassword$","UserActions.UpdatePasswordSuccess","UserActions.UpdatePasswordFail","UserAddressesEffects","userAddressService","loadUserAddresses$","UserActions.LoadUserAddressesSuccess","UserActions.LoadUserAddressesFail","addUserAddress$","UserActions.AddUserAddressSuccess","UserActions.AddUserAddressFail","updateUserAddress$","UserActions.UpdateUserAddressSuccess","UserActions.UpdateUserAddressFail","deleteUserAddress$","UserActions.DeleteUserAddressSuccess","UserActions.DeleteUserAddressFail","showGlobalMessageOnAddSuccess$","showGlobalMessageOnUpdateSuccess$","showGlobalMessageOnDeleteSuccess$","UserConsentsEffect","userConsentConnector","resetConsents$","getConsents$","UserActions.LoadUserConsentsSuccess","UserActions.LoadUserConsentsFail","giveConsent$","UserActions.GiveUserConsentSuccess","UserActions.GiveUserConsentFail","withdrawConsent$","UserActions.WithdrawUserConsentSuccess","UserActions.WithdrawUserConsentFail","UserDetailsEffects","userConnector","loadUserDetails$","UserActions.LoadUserDetailsSuccess","UserActions.LoadUserDetailsFail","updateUserDetails$","UserActions.UpdateUserDetailsSuccess","UserActions.UpdateUserDetailsFail","UserOrdersEffect","loadUserOrders$","UserActions.LoadUserOrdersSuccess","UserActions.LoadUserOrdersFail","resetUserOrders$","UserRegisterEffects","registerUser$","UserActions.RegisterUserSuccess","UserActions.RegisterUserFail","registerGuest$","UserActions.RegisterGuestSuccess","UserActions.RegisterGuestFail","removeUser$","UserActions.RemoveUserSuccess","UserActions.RemoveUserFail","CustomerCouponEffects","customerCouponConnector","loadCustomerCoupons$","fromCustomerCouponsAction.LoadCustomerCouponsSuccess","fromCustomerCouponsAction.LoadCustomerCouponsFail","subscribeCustomerCoupon$","fromCustomerCouponsAction.SubscribeCustomerCouponSuccess","fromCustomerCouponsAction.SubscribeCustomerCouponFail","unsubscribeCustomerCoupon$","fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess","fromCustomerCouponsAction.UnsubscribeCustomerCouponFail","claimCustomerCoupon$","fromCustomerCouponsAction.ClaimCustomerCouponSuccess","fromCustomerCouponsAction.ClaimCustomerCouponFail","ProductInterestsEffect","userInterestsConnector","loadProductInteres$","interests","UserActions.LoadProductInterestsSuccess","UserActions.LoadProductInterestsFail","removeProductInterest$","UserActions.RemoveProductInterestSuccess","UserActions.RemoveProductInterestFail","addProductInterest$","UserActions.AddProductInterestSuccess","UserActions.AddProductInterestFail","UserStoreModule","metaReducers$7","RouterModule","UserModule","UserModule_1","Meta"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isObject(item: any): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nexport function deepMerge(target = {}, ...sources: any[]): any {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift() || {};\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (source[key] instanceof Date) {\n        Object.assign(target, { [key]: source[key] });\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return deepMerge(target, ...sources);\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport { deepMerge } from './utils/deep-merge';\n\n/**\n * Global Configuration injection token, can be used to inject configuration to any part of the app\n */\nexport const Config = new InjectionToken('Configuration');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the global configuration object.\n * Should not be used directly, use `provideConfig` or import `ConfigModule.withConfig` instead.\n */\nexport const ConfigChunk = new InjectionToken('ConfigurationChunk');\n\n/**\n * Config chunk token, can be used to provide configuration chunk and contribute to the default configuration.\n * Should not be used directly, use `provideDefaultConfig` or `provideDefaultConfigFactory` instead.\n *\n * General rule is, that all config provided in libraries should be provided as default config.\n */\nexport const DefaultConfigChunk = new InjectionToken(\n  'DefaultConfigurationChunk'\n);\n\n/**\n * Helper function to provide configuration chunk using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfig should be used instead.\n *\n * @param config Config object to merge with the global configuration\n */\nexport function provideConfig(\n  config: any = {},\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide configuration with factory function, using ConfigChunk token\n *\n * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideConfigFactory(\n  configFactory: Function,\n  deps?: any[],\n  defaultConfig = false\n): Provider {\n  return {\n    provide: defaultConfig ? DefaultConfigChunk : ConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Helper function to provide default configuration chunk using DefaultConfigChunk token\n *\n * @param config Config object to merge with the default configuration\n */\nexport function provideDefaultConfig(config: any = {}): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useValue: config,\n    multi: true,\n  };\n}\n\n/**\n * Helper function to provide default configuration with factory function, using DefaultConfigChunk token\n *\n * @param configFactory Factory Function that will generate config object\n * @param deps Optional dependencies to a factory function\n */\nexport function provideDefaultConfigFactory(\n  configFactory: Function,\n  deps?: any[]\n): Provider {\n  return {\n    provide: DefaultConfigChunk,\n    useFactory: configFactory,\n    multi: true,\n    deps: deps,\n  };\n}\n\n/**\n * Factory function that merges all configurations chunks. Should not be used directly without explicit reason.\n *\n */\nexport function configurationFactory(\n  configChunks: any[] = [],\n  defaultConfigChunks: any[] = []\n) {\n  const config = deepMerge(\n    {},\n    ...(defaultConfigChunks ?? []),\n    ...(configChunks ?? [])\n  );\n  return config;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [],\n})\nexport class ConfigModule {\n  /**\n   * Import ConfigModule and contribute config to the global configuration\n   *\n   * To provide default configuration in libraries provideDefaultConfig should be used instead.\n   *\n   * @param config Config object to merge with the global configuration\n   */\n  static withConfig(config: object): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfig(config)],\n    };\n  }\n\n  /**\n   * Import ConfigModule and contribute config to the global configuration using factory function\n   *\n   * To provide default configuration in libraries provideDefaultConfigFactory should be used instead.\n   *\n   * @param configFactory Factory function that will generate configuration\n   * @param deps Optional dependencies to factory function\n   */\n  static withConfigFactory(\n    configFactory: Function,\n    deps?: any[]\n  ): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [provideConfigFactory(configFactory, deps)],\n    };\n  }\n\n  /**\n   * Module with providers, should be imported only once, if possible, at the root of the app.\n   *\n   * @param config\n   */\n  static forRoot(config: any = {}): ModuleWithProviders<ConfigModule> {\n    return {\n      ngModule: ConfigModule,\n      providers: [\n        provideConfig(config),\n        {\n          provide: Config,\n          useFactory: configurationFactory,\n          deps: [\n            [new Optional(), ConfigChunk],\n            [new Optional(), DefaultConfigChunk],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsConfig } from './anonymous-consents-config';\n\nexport const defaultAnonymousConsentsConfig: AnonymousConsentsConfig = {\n  anonymousConsents: {\n    registerConsent: 'MARKETING_NEWSLETTER',\n    showLegalDescriptionInDialog: true,\n    requiredConsents: [],\n    consentManagementPage: {\n      showAnonymousConsents: true,\n      hideConsents: [],\n    },\n  },\n};\n","import { AuthConfig } from './auth-config';\n\nexport const defaultAuthConfig: AuthConfig = {\n  authentication: {\n    client_id: 'mobile_android',\n    client_secret: 'secret',\n  },\n  backend: {\n    occ: {\n      endpoints: {\n        login: '/authorizationserver/oauth/token',\n        revoke: '/authorizationserver/oauth/revoke',\n      },\n    },\n  },\n};\n","import { HttpHeaders, HttpRequest } from '@angular/common/http';\n\nexport const USE_CLIENT_TOKEN = 'cx-use-client-token';\nexport const USE_CUSTOMER_SUPPORT_AGENT_TOKEN = 'cx-use-csagent-token';\nexport const TOKEN_REVOCATION_HEADER = 'cx-token-revocation';\n\nexport class InterceptorUtil {\n  static createHeader<T>(\n    headerName: string,\n    interceptorParam: T,\n    headers?: HttpHeaders\n  ): HttpHeaders {\n    if (headers) {\n      return headers.append(headerName, JSON.stringify(interceptorParam));\n    }\n    headers = new HttpHeaders().set(\n      headerName,\n      JSON.stringify(interceptorParam)\n    );\n    return headers;\n  }\n\n  static removeHeader(\n    headerName: string,\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    const updatedHeaders = request.headers.delete(headerName);\n    return request.clone({ headers: updatedHeaders });\n  }\n\n  static getInterceptorParam<T>(headerName: string, headers: HttpHeaders): T {\n    const rawValue = headers.get(headerName);\n    if (rawValue) {\n      return JSON.parse(rawValue);\n    }\n    return undefined;\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const ENTITY_REMOVE_ACTION = '[ENTITY] REMOVE';\nexport const ENTITY_REMOVE_ALL_ACTION = '[ENTITY] REMOVE ALL';\n\nexport interface EntityMeta {\n  entityType: string;\n  entityId: string | string[];\n  entityRemove?: boolean;\n}\n\nexport function entityMeta(type: string, id: string | string[]): EntityMeta {\n  return {\n    entityType: type,\n    entityId: id,\n  };\n}\n\nexport function entityRemoveMeta(\n  type: string,\n  id: string | string[]\n): EntityMeta {\n  return {\n    entityId: id,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport function entityRemoveAllMeta(type: string): EntityMeta {\n  return {\n    entityId: null,\n    entityType: type,\n    entityRemove: true,\n  };\n}\n\nexport interface EntityAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityMeta;\n}\n\nexport class EntityRemoveAction implements EntityAction {\n  type = ENTITY_REMOVE_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityRemoveMeta(entityType, id);\n  }\n}\n\nexport class EntityRemoveAllAction implements EntityAction {\n  type = ENTITY_REMOVE_ALL_ACTION;\n  readonly meta: EntityMeta;\n  constructor(entityType: string) {\n    this.meta = entityRemoveAllMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOADER_LOAD_ACTION = '[LOADER] LOAD';\nexport const LOADER_FAIL_ACTION = '[LOADER] FAIL';\nexport const LOADER_SUCCESS_ACTION = '[LOADER] SUCCESS';\nexport const LOADER_RESET_ACTION = '[LOADER] RESET';\n\nexport interface LoaderMeta {\n  entityType: string;\n  loader: {\n    load?: boolean;\n    error?: any;\n    success?: boolean;\n  };\n}\n\nexport interface LoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: LoaderMeta;\n}\n\nexport function loadMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      load: true,\n    },\n  };\n}\n\nexport function failMeta(entityType: string, error?: any): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      error: error ? error : true,\n    },\n  };\n}\n\nexport function successMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {\n      success: true,\n    },\n  };\n}\n\nexport function resetMeta(entityType: string): LoaderMeta {\n  return {\n    entityType: entityType,\n    loader: {},\n  };\n}\nexport class LoaderLoadAction implements LoaderAction {\n  type = LOADER_LOAD_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = loadMeta(entityType);\n  }\n}\n\nexport class LoaderFailAction implements LoaderAction {\n  type = LOADER_FAIL_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string, error?: any) {\n    this.meta = failMeta(entityType, error);\n  }\n}\n\nexport class LoaderSuccessAction implements LoaderAction {\n  type = LOADER_SUCCESS_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = successMeta(entityType);\n  }\n}\n\nexport class LoaderResetAction implements LoaderAction {\n  type = LOADER_RESET_ACTION;\n  readonly meta: LoaderMeta;\n  constructor(entityType: string) {\n    this.meta = resetMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  failMeta,\n  LoaderMeta,\n  loadMeta,\n  resetMeta,\n  successMeta,\n} from '../loader/loader.action';\n\nexport const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';\nexport const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';\nexport const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';\nexport const ENTITY_RESET_ACTION = '[ENTITY] RESET';\n\nexport interface EntityLoaderMeta extends EntityMeta, LoaderMeta {}\n\nexport interface EntityLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityLoaderMeta;\n}\n\nexport function entityLoadMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...loadMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityFailMeta(\n  entityType: string,\n  id: string | string[],\n  error?: any\n): EntityLoaderMeta {\n  return {\n    ...failMeta(entityType, error),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entitySuccessMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...successMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityLoaderMeta {\n  return {\n    ...resetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityLoadAction implements EntityLoaderAction {\n  type = ENTITY_LOAD_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityLoadMeta(entityType, id);\n  }\n}\n\nexport class EntityFailAction implements EntityLoaderAction {\n  type = ENTITY_FAIL_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], error?: any) {\n    this.meta = entityFailMeta(entityType, id, error);\n  }\n}\n\nexport class EntitySuccessAction implements EntityLoaderAction {\n  type = ENTITY_SUCCESS_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[], public payload?: any) {\n    this.meta = entitySuccessMeta(entityType, id);\n  }\n}\n\nexport class EntityLoaderResetAction implements EntityLoaderAction {\n  type = ENTITY_RESET_ACTION;\n  readonly meta: EntityLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityResetMeta(entityType, id);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { LoaderState } from './loader-state';\nimport { LoaderAction } from './loader.action';\n\nexport const initialLoaderState: LoaderState<any> = {\n  loading: false,\n  error: false,\n  success: false,\n  value: undefined,\n};\n\n/**\n * Higher order reducer that adds generic loading flag to chunk of the state\n *\n * Utilizes \"loader\" meta field of actions to set specific flags for specific\n * action (LOAD, SUCCESS, FAIL, RESET)\n */\nexport function loaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (state: LoaderState<T>, action: LoaderAction) => LoaderState<T> {\n  return (\n    state: LoaderState<T> = initialLoaderState,\n    action: LoaderAction\n  ): LoaderState<T> => {\n    if (\n      action.meta &&\n      action.meta.loader &&\n      action.meta.entityType === entityType\n    ) {\n      const entity = action.meta.loader;\n\n      if (entity.load) {\n        return {\n          ...state,\n          loading: true,\n          value: reducer ? reducer(state.value, action) : state.value,\n        };\n      } else if (entity.error) {\n        return {\n          ...state,\n          loading: false,\n          error: true,\n          success: false,\n          value: reducer ? reducer(state.value, action) : undefined,\n        };\n      } else if (entity.success) {\n        return {\n          ...state,\n          value: reducer ? reducer(state.value, action) : action.payload,\n          loading: false,\n          error: false,\n          success: true,\n        };\n      } else {\n        // reset state action\n        return {\n          ...initialLoaderState,\n          value: reducer\n            ? reducer(initialLoaderState.value, action)\n            : initialLoaderState.value,\n        };\n      }\n    }\n\n    if (reducer) {\n      const newValue = reducer(state.value, action);\n      if (newValue !== state.value) {\n        return { ...state, value: newValue };\n      }\n    }\n    return state;\n  };\n}\n","import { LoaderState } from './loader-state';\n\nexport function loaderValueSelector<T>(state: LoaderState<T>): T {\n  return state.value;\n}\n\nexport function loaderLoadingSelector<T>(state: LoaderState<T>): boolean {\n  return state.loading;\n}\n\nexport function loaderErrorSelector<T>(state: LoaderState<T>): boolean {\n  return state.error;\n}\n\nexport function loaderSuccessSelector<T>(state: LoaderState<T>): boolean {\n  return state.success;\n}\n","import { LoaderState } from '../loader/loader-state';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport { EntityLoaderState } from './entity-loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n  loaderErrorSelector,\n  loaderSuccessSelector,\n} from '../loader';\n\nexport function entityLoaderStateSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): LoaderState<T> {\n  return state.entities[id] || initialLoaderState;\n}\n\nexport function entityValueSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): T {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderValueSelector(entityState);\n}\n\nexport function entityLoadingSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderLoadingSelector(entityState);\n}\n\nexport function entityErrorSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderErrorSelector(entityState);\n}\n\nexport function entitySuccessSelector<T>(\n  state: EntityLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return loaderSuccessSelector(entityState);\n}\n","import { Action } from '@ngrx/store';\n\nimport { EntityState } from './entity-state';\nimport { EntityAction } from './entity.action';\n\nexport const initialEntityState: EntityState<any> = { entities: {} };\n\n/**\n * Higher order reducer for reusing reducer logic for multiple entities\n *\n * Utilizes entityId meta field to target entity by id in actions\n */\nexport function entityReducer<T>(\n  entityType: string,\n  reducer: (state: T, action: Action) => T\n) {\n  return (\n    state: EntityState<T> = initialEntityState,\n    action: EntityAction\n  ): EntityState<T> => {\n    let ids: string[];\n    let partitionPayload = false;\n    if (\n      action.meta &&\n      action.meta.entityType === entityType &&\n      action.meta.entityId !== undefined\n    ) {\n      ids = [].concat(action.meta.entityId);\n\n      // remove selected entities\n      if (action.meta.entityRemove) {\n        if (action.meta.entityId === null) {\n          return initialEntityState;\n        } else {\n          let removed = false;\n          const newEntities = Object.keys(state.entities).reduce((acc, cur) => {\n            if (ids.includes(cur)) {\n              removed = true;\n            } else {\n              acc[cur] = state.entities[cur];\n            }\n            return acc;\n          }, {});\n\n          return removed ? { entities: newEntities } : state;\n        }\n      }\n\n      partitionPayload =\n        Array.isArray(action.meta.entityId) && Array.isArray(action.payload);\n    } else {\n      ids = Object.keys(state.entities);\n    }\n\n    const entityUpdates: { [id: string]: T } = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const subAction = partitionPayload\n        ? { ...action, payload: action.payload[i] }\n        : action;\n      const newState = reducer(state.entities[id], subAction);\n      if (newState) {\n        entityUpdates[id] = newState;\n      }\n    }\n\n    if (Object.keys(entityUpdates).length > 0) {\n      return {\n        ...state,\n        entities: { ...state.entities, ...entityUpdates },\n      };\n    }\n\n    return state;\n  };\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { loaderReducer } from '../loader/loader.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityLoaderState } from './entity-loader-state';\nimport { EntityLoaderAction } from './entity-loader.action';\n\n/**\n * Higher order reducer that wraps LoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags\n */\nexport function entityLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityLoaderState<T>,\n  action: EntityLoaderAction\n) => EntityLoaderState<T> {\n  return entityReducer(entityType, loaderReducer(entityType, reducer));\n}\n","import { Action } from '@ngrx/store';\nimport {\n  LoaderMeta,\n  resetMeta as loaderResetMeta,\n} from '../loader/loader.action';\n\nexport const PROCESSES_INCREMENT_ACTION = '[PROCESSES LOADER] INCREMENT';\nexport const PROCESSES_DECREMENT_ACTION = '[PROCESSES LOADER] DECREMENT';\nexport const PROCESSES_LOADER_RESET_ACTION = '[PROCESSES LOADER] RESET';\n\nexport interface ProcessesLoaderMeta extends LoaderMeta {\n  entityType: string;\n  processesCountDiff?: number;\n}\n\nexport interface ProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProcessesLoaderMeta;\n}\n\nexport function processesIncrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: 1,\n  };\n}\n\nexport function processesDecrementMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  return {\n    entityType: entityType,\n    loader: undefined,\n    processesCountDiff: -1,\n  };\n}\n\nexport function processesLoaderResetMeta(\n  entityType: string\n): ProcessesLoaderMeta {\n  // processes reset action is a reset action for loader reducer, but not the other way around\n  return {\n    ...loaderResetMeta(entityType),\n    processesCountDiff: null,\n  };\n}\n\nexport class ProcessesLoaderResetAction implements ProcessesLoaderAction {\n  type = PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesLoaderResetMeta(entityType);\n  }\n}\n\nexport class ProcessesIncrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_INCREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesIncrementMeta(entityType);\n  }\n}\n\nexport class ProcessesDecrementAction implements ProcessesLoaderAction {\n  type = PROCESSES_DECREMENT_ACTION;\n  readonly meta: ProcessesLoaderMeta;\n  constructor(entityType: string) {\n    this.meta = processesDecrementMeta(entityType);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { entityMeta, EntityMeta } from '../entity/entity.action';\nimport {\n  processesDecrementMeta,\n  processesIncrementMeta,\n  ProcessesLoaderMeta,\n  processesLoaderResetMeta,\n} from '../processes-loader/processes-loader.action';\n\nexport const ENTITY_PROCESSES_LOADER_RESET_ACTION =\n  '[ENTITY] PROCESSES LOADER RESET';\nexport const ENTITY_PROCESSES_INCREMENT_ACTION = '[ENTITY] PROCESSES INCREMENT';\nexport const ENTITY_PROCESSES_DECREMENT_ACTION = '[ENTITY] PROCESSES DECREMENT';\n\nexport interface EntityProcessesLoaderMeta\n  extends EntityMeta,\n    ProcessesLoaderMeta {}\n\nexport interface EntityProcessesLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: EntityProcessesLoaderMeta;\n}\n\nexport function entityProcessesLoaderResetMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesLoaderResetMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesIncrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesIncrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport function entityProcessesDecrementMeta(\n  entityType: string,\n  id: string | string[]\n): EntityProcessesLoaderMeta {\n  return {\n    ...processesDecrementMeta(entityType),\n    ...entityMeta(entityType, id),\n  };\n}\n\nexport class EntityProcessesLoaderResetAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_LOADER_RESET_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesLoaderResetMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesIncrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_INCREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesIncrementMeta(entityType, id);\n  }\n}\n\nexport class EntityProcessesDecrementAction\n  implements EntityProcessesLoaderAction {\n  type = ENTITY_PROCESSES_DECREMENT_ACTION;\n  readonly meta: EntityProcessesLoaderMeta;\n  constructor(entityType: string, id: string | string[]) {\n    this.meta = entityProcessesDecrementMeta(entityType, id);\n  }\n}\n","import { ProcessesLoaderState } from './processes-loader-state';\n\nexport function isStableSelector<T>(state: ProcessesLoaderState<T>): boolean {\n  return state.processesCount === 0 && !state.loading;\n}\n\nexport function hasPendingProcessesSelector<T>(\n  state: ProcessesLoaderState<T>\n): boolean {\n  return state.processesCount > 0;\n}\n","import { isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { initialLoaderState, loaderReducer } from '../loader/loader.reducer';\nimport { ProcessesLoaderState } from './processes-loader-state';\nimport { ProcessesLoaderAction } from './processes-loader.action';\n\nexport const initialProcessesState: ProcessesLoaderState<any> = {\n  processesCount: 0,\n};\n\n/**\n * Higher order reducer that adds processes count\n */\nexport function processesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ProcessesLoaderState<T>,\n  action: ProcessesLoaderAction\n) => ProcessesLoaderState<T> {\n  return (\n    state: ProcessesLoaderState<T> = {\n      ...initialProcessesState,\n      ...initialLoaderState,\n    },\n    action: ProcessesLoaderAction\n  ): ProcessesLoaderState<T> => {\n    const loaderState = loaderReducer(entityType, reducer)(state, action);\n    if (action.meta && action.meta.entityType === entityType) {\n      const processesCountDiff = action.meta.processesCountDiff;\n      if (isDevMode() && state.processesCount + processesCountDiff < 0) {\n        console.error(\n          `Action '${action.type}' sets processesCount to value < 0!\\n` +\n            'Make sure to keep processesCount in sync.\\n' +\n            'There should always be only one decrement action for each increment action.\\n' +\n            \"Make sure that you don't reset state in between those actions.\\n\",\n          action\n        );\n      }\n      if (processesCountDiff) {\n        return {\n          ...loaderState,\n          processesCount: state.processesCount\n            ? state.processesCount + processesCountDiff\n            : processesCountDiff,\n        };\n      } else if (processesCountDiff === null) {\n        // reset action\n        return {\n          ...loaderState,\n          ...initialProcessesState,\n        };\n      }\n    }\n\n    return loaderState;\n  };\n}\n","import { entityLoaderStateSelector } from '../entity-loader/entity-loader.selectors';\nimport { initialLoaderState } from '../loader/loader.reducer';\nimport {\n  initialProcessesState,\n  ProcessesLoaderState,\n} from '../processes-loader';\nimport {\n  hasPendingProcessesSelector,\n  isStableSelector,\n} from '../processes-loader/processes-loader.selectors';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\n\nconst initialProcessesLoaderState = {\n  ...initialLoaderState,\n  ...initialProcessesState,\n};\n\nexport function entityHasPendingProcessesSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return hasPendingProcessesSelector(entityState);\n}\n\nexport function entityIsStableSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): boolean {\n  const entityState = entityLoaderStateSelector(state, id);\n  return isStableSelector(entityState);\n}\n\nexport function entityProcessesLoaderStateSelector<T>(\n  state: EntityProcessesLoaderState<T>,\n  id: string\n): ProcessesLoaderState<T> {\n  return state.entities[id] || initialProcessesLoaderState;\n}\n","import { entityReducer } from '../entity/entity.reducer';\nimport { processesLoaderReducer } from '../processes-loader';\nimport { ProcessesLoaderAction } from '../processes-loader/processes-loader.action';\nimport { EntityProcessesLoaderState } from './entity-processes-loader-state';\nimport { EntityProcessesLoaderAction } from './entity-processes-loader.action';\n\n/**\n * Higher order reducer that wraps ProcessesLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic processesCount flag\n */\nexport function entityProcessesLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: ProcessesLoaderAction) => T\n): (\n  state: EntityProcessesLoaderState<T>,\n  action: EntityProcessesLoaderAction\n) => EntityProcessesLoaderState<T> {\n  return entityReducer(entityType, processesLoaderReducer(entityType, reducer));\n}\n","import { EntityState } from './entity-state';\n\nexport function entitySelector<T>(state: EntityState<T>, id: string): T {\n  return state.entities[id] || undefined;\n}\n","import { deepMerge } from '../../config/utils/deep-merge';\nimport { StateTransferType, StorageSyncType } from '../config/state-config';\n\nconst OBJECT_SEPARATOR = '.';\n\nexport function getStateSliceValue<T, E>(keys: string, state: T): E {\n  return keys\n    .split(OBJECT_SEPARATOR)\n    .reduce(\n      (previous, current) => (previous ? previous[current] : undefined),\n      state\n    );\n}\n\nexport function createShellObject<T, E>(\n  key: string,\n  excludeKeys: string[],\n  value: T\n): E {\n  if (!key || !value || Object.keys(value).length === 0) {\n    return {} as E;\n  }\n\n  const shell = key.split(OBJECT_SEPARATOR).reduceRight((acc, previous) => {\n    return ({ [previous]: acc } as unknown) as T;\n  }, value);\n  return handleExclusions(key, excludeKeys, shell);\n}\n\nexport function getStateSlice<T, E>(\n  keys: string[],\n  excludeKeys: string[],\n  state: T\n): E {\n  if (keys && keys.length === 0) {\n    return {} as E;\n  }\n\n  let stateSlices = {};\n  for (const currentKey of keys) {\n    const stateValue = getStateSliceValue(currentKey, state);\n    const shell = createShellObject(currentKey, excludeKeys, stateValue);\n    stateSlices = deepMerge(stateSlices, shell);\n  }\n\n  return stateSlices as E;\n}\n\nexport function handleExclusions(\n  key: string,\n  excludeKeys: string[],\n  value: any\n): any {\n  const exclusionKeys = getExclusionKeys(key, excludeKeys);\n  if (exclusionKeys.length === 0) {\n    return value;\n  }\n\n  const finalValue = deepMerge({}, value);\n  for (const currentExclusionKey of exclusionKeys) {\n    const exclusionChunksSplit = currentExclusionKey.split(OBJECT_SEPARATOR);\n\n    let nestedTemp = finalValue;\n    for (let i = 0; i < exclusionChunksSplit.length; i++) {\n      const currentChunk = exclusionChunksSplit[i];\n\n      // last iteration\n      if (i === exclusionChunksSplit.length - 1) {\n        if (nestedTemp && nestedTemp[currentChunk]) {\n          delete nestedTemp[currentChunk];\n        }\n      } else {\n        nestedTemp = nestedTemp[currentChunk];\n      }\n    }\n  }\n\n  return finalValue;\n}\n\nexport function getExclusionKeys(key: string, excludeKeys: string[]): string[] {\n  if (!key || !excludeKeys) {\n    return [];\n  }\n\n  const exclusionKeys: string[] = [];\n  for (const exclusionKey of excludeKeys) {\n    if (exclusionKey.includes(key)) {\n      exclusionKeys.push(exclusionKey);\n    }\n  }\n\n  return exclusionKeys;\n}\n\nexport function filterKeysByType(\n  keys: { [key: string]: StorageSyncType | StateTransferType },\n  type: StorageSyncType | StateTransferType\n): string[] {\n  if (!keys) {\n    return [];\n  }\n  return Object.keys(keys).filter((key) => keys[key] === type);\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { ClientToken } from '../../models/token-types.model';\nimport { CLIENT_TOKEN_DATA } from '../auth-state';\n\nexport const LOAD_CLIENT_TOKEN = '[Token] Load Client Token';\nexport const LOAD_CLIENT_TOKEN_FAIL = '[Token] Load Client Token Fail';\nexport const LOAD_CLIENT_TOKEN_SUCCESS = '[Token] Load Client Token Success';\n\nexport class LoadClientToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CLIENT_TOKEN;\n  constructor() {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadClientTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CLIENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CLIENT_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadClientTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CLIENT_TOKEN_SUCCESS;\n  constructor(public payload: ClientToken) {\n    super(CLIENT_TOKEN_DATA);\n  }\n}\n\nexport type ClientTokenAction =\n  | LoadClientToken\n  | LoadClientTokenFail\n  | LoadClientTokenSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\n\nexport const AUTH_FEATURE = 'auth';\nexport const CLIENT_TOKEN_DATA = '[Auth] Client Token Data';\n\nexport interface StateWithAuth {\n  [AUTH_FEATURE]: AuthState;\n}\n\nexport interface AuthState {\n  userToken: UserTokenState;\n  clientToken: LoaderState<ClientToken>;\n}\n\nexport interface UserTokenState {\n  token: UserToken;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOGIN = '[Auth] Login';\nexport const LOGOUT = '[Auth] Logout';\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\nexport class Login implements Action {\n  readonly type = LOGIN;\n}\n\nexport class Logout implements Action {\n  readonly type = LOGOUT;\n}\n\n// action types\nexport type LoginLogoutAction = Login | Logout;\n","import { Action } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\n\nexport const LOAD_USER_TOKEN = '[Auth] Load User Token';\nexport const LOAD_USER_TOKEN_FAIL = '[Auth] Load User Token Fail';\nexport const LOAD_USER_TOKEN_SUCCESS = '[Auth] Load User Token Success';\nexport const REFRESH_USER_TOKEN = '[Auth] Refresh User Token';\nexport const REFRESH_USER_TOKEN_FAIL = '[Auth] Refresh User Token Fail';\nexport const REFRESH_USER_TOKEN_SUCCESS = '[Auth] Refresh User Token Success';\nexport const REVOKE_USER_TOKEN = '[Auth] Revoke User Token';\nexport const REVOKE_USER_TOKEN_FAIL = '[Auth] Revoke User Token Fail';\nexport const REVOKE_USER_TOKEN_SUCCESS = '[Auth] Revoke User Token Success';\n\nexport class LoadUserToken implements Action {\n  readonly type = LOAD_USER_TOKEN;\n  constructor(public payload: { userId: string; password: string }) {}\n}\n\nexport class LoadUserTokenFail implements Action {\n  readonly type = LOAD_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserTokenSuccess implements Action {\n  readonly type = LOAD_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserToken implements Action {\n  readonly type = REFRESH_USER_TOKEN;\n  constructor(public payload: { refreshToken: string }) {}\n}\n\nexport class RefreshUserTokenSuccess implements Action {\n  readonly type = REFRESH_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RefreshUserTokenFail implements Action {\n  readonly type = REFRESH_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RevokeUserToken implements Action {\n  readonly type = REVOKE_USER_TOKEN;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenSuccess implements Action {\n  readonly type = REVOKE_USER_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {}\n}\n\nexport class RevokeUserTokenFail implements Action {\n  readonly type = REVOKE_USER_TOKEN_FAIL;\n  constructor(public payload: any) {}\n}\n\n// action types\nexport type UserTokenAction =\n  | LoadUserToken\n  | LoadUserTokenFail\n  | LoadUserTokenSuccess\n  | RefreshUserToken\n  | RefreshUserTokenFail\n  | RefreshUserTokenSuccess\n  | RevokeUserToken\n  | RevokeUserTokenFail\n  | RevokeUserTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AuthState, AUTH_FEATURE, StateWithAuth } from '../auth-state';\n\nexport const getAuthState: MemoizedSelector<\n  StateWithAuth,\n  AuthState\n> = createFeatureSelector<AuthState>(AUTH_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nexport const getClientTokenState: MemoizedSelector<\n  StateWithAuth,\n  LoaderState<ClientToken>\n> = createSelector(getAuthState, (state: AuthState) => state.clientToken);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthState, StateWithAuth, UserTokenState } from '../auth-state';\nimport { getAuthState } from './feature.selector';\n\nconst getUserTokenSelector = (state: UserTokenState) => state.token;\n\nexport const getUserTokenState: MemoizedSelector<\n  StateWithAuth,\n  UserTokenState\n> = createSelector(getAuthState, (state: AuthState) => state.userToken);\n\nexport const getUserToken: MemoizedSelector<\n  StateWithAuth,\n  UserToken\n> = createSelector(getUserTokenState, getUserTokenSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../occ/utils/occ-constants';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ClientToken, UserToken } from '../models/token-types.model';\nimport { AuthActions } from '../store/actions/index';\nimport { StateWithAuth } from '../store/auth-state';\nimport { AuthSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(protected store: Store<StateWithAuth>) {}\n\n  /**\n   * Loads a new user token\n   * @param userId\n   * @param password\n   */\n  authorize(userId: string, password: string): void {\n    this.store.dispatch(\n      new AuthActions.LoadUserToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * This function provides the userId the OCC calls should use, depending\n   * on whether there is an active storefront session or not.\n   *\n   * It returns the userId of the current storefront user or 'anonymous'\n   * in the case there are no signed in user in the storefront.\n   *\n   * The user id of a regular customer session is 'current'.  In the case of an\n   * asm customer emulation session, the userId will be the customerId.\n   */\n  getOccUserId(): Observable<string> {\n    return this.getUserToken().pipe(\n      map((userToken) => {\n        if (!!userToken && !!userToken.userId) {\n          return userToken.userId;\n        } else {\n          return OCC_USER_ID_ANONYMOUS;\n        }\n      })\n    );\n  }\n\n  /**\n   * Calls provided callback with current user id.\n   *\n   * @param cb callback function to invoke\n   */\n  invokeWithUserId(cb: (userId: string) => any): Subscription {\n    return this.getOccUserId()\n      .pipe(take(1))\n      .subscribe((id) => cb(id));\n  }\n\n  /**\n   * Returns the user's token\n   */\n  getUserToken(): Observable<UserToken> {\n    return this.store.pipe(select(AuthSelectors.getUserToken));\n  }\n\n  /**\n   * Refreshes the user token\n   * @param token a user token to refresh\n   */\n  refreshUserToken(token: UserToken): void {\n    this.store.dispatch(\n      new AuthActions.RefreshUserToken({\n        refreshToken: token.refresh_token,\n      })\n    );\n  }\n\n  /**\n   * Store the provided token\n   */\n  authorizeWithToken(token: UserToken): void {\n    this.store.dispatch(new AuthActions.LoadUserTokenSuccess(token));\n  }\n\n  /**\n   * Logout a storefront customer\n   */\n  logout(): void {\n    this.getUserToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AuthActions.Logout());\n        if (Boolean(userToken) && userToken.userId === OCC_USER_ID_CURRENT) {\n          this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n        }\n      });\n  }\n\n  /**\n   * Returns a client token.  The client token from the store is returned if there is one.\n   * Otherwise, an new token is fetched from the backend and saved in the store.\n   */\n  getClientToken(): Observable<ClientToken> {\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) => {\n        if (this.isClientTokenLoaded(state)) {\n          return true;\n        } else {\n          if (!state.loading) {\n            this.store.dispatch(new AuthActions.LoadClientToken());\n          }\n          return false;\n        }\n      }),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  /**\n   * Fetches a clientToken from the backend ans saves it in the store where getClientToken can use it.\n   * The new clientToken is returned.\n   */\n  refreshClientToken(): Observable<ClientToken> {\n    this.store.dispatch(new AuthActions.LoadClientToken());\n\n    return this.store.pipe(\n      select(AuthSelectors.getClientTokenState),\n      filter((state: LoaderState<ClientToken>) =>\n        this.isClientTokenLoaded(state)\n      ),\n      map((state: LoaderState<ClientToken>) => state.value)\n    );\n  }\n\n  protected isClientTokenLoaded(state: LoaderState<ClientToken>): boolean {\n    return (state.success || state.error) && !state.loading;\n  }\n\n  /**\n   * Returns `true` if the user is logged in; and `false` if the user is anonymous.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return this.getUserToken().pipe(\n      map((userToken) => Boolean(userToken) && Boolean(userToken.access_token))\n    );\n  }\n}\n","export const OCC_USER_ID_CURRENT = 'current';\nexport const OCC_USER_ID_ANONYMOUS = 'anonymous';\nexport const OCC_USER_ID_GUEST = 'guest';\n\nexport const OCC_CART_ID_CURRENT = 'current';\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../../facade/auth.service';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientErrorHandlingService {\n  constructor(protected authService: AuthService) {}\n\n  public handleExpiredClientToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<any> {\n    return this.authService.refreshClientToken().pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: ClientToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowRef {\n  readonly document: Document;\n\n  constructor(@Inject(DOCUMENT) document) {\n    // it's a workaround to have document property properly typed\n    // see: https://github.com/angular/angular/issues/15640\n    this.document = document;\n  }\n\n  get nativeWindow(): Window {\n    return typeof window !== 'undefined' ? window : undefined;\n  }\n\n  get sessionStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;\n  }\n\n  get localStorage(): Storage {\n    return this.nativeWindow ? this.nativeWindow.localStorage : undefined;\n  }\n\n  /**\n   * Returns an observable for the window resize event and emits an event\n   * every 300ms in case of resizing. An event is simulated initially.\n   *\n   * If there's no window object availale (i.e. in SSR), a null value is emitted.\n   */\n  get resize$(): Observable<any> {\n    if (!this.nativeWindow) {\n      return of(null);\n    } else {\n      return fromEvent(this.nativeWindow, 'resize').pipe(\n        debounceTime(300),\n        startWith({ target: this.nativeWindow }),\n        distinctUntilChanged()\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UrlSegmentGroup, PRIMARY_OUTLET } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParsingService {\n  constructor(private router: Router) {}\n\n  getPrimarySegments(url: string): string[] {\n    const urlTree = this.router.parseUrl(url);\n    return this._getPrimarySegmentsFromUrlTree(urlTree.root);\n  }\n\n  private _getPrimarySegmentsFromUrlTree(tree: UrlSegmentGroup): string[] {\n    const segments = tree.segments.map((s) => s.path);\n    const childrenSegments = tree.children[PRIMARY_OUTLET]\n      ? this._getPrimarySegmentsFromUrlTree(tree.children[PRIMARY_OUTLET])\n      : [];\n    return segments.concat(childrenSegments);\n  }\n}\n","export const isParam = (segment: string): boolean => segment.startsWith(':');\n\nexport const getParamName = (segment: string): string => segment.slice(1); // it just removes leading ':'\n\nexport const ensureLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path : '/' + path;\n\nexport const removeLeadingSlash = (path: string): string =>\n  path.startsWith('/') ? path.slice(1) : path;\n","import { RoutesConfig } from '../routes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../../config/config.module';\n\nexport const enum RouteLoadStrategy {\n  /**\n   * Don't reload the data on navigation if it was loaded before\n   */\n  ONCE = 'once',\n  /**\n   * Always reload the data on navigation\n   */\n  ALWAYS = 'always',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class RoutingConfig {\n  routing?: {\n    /**\n     * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.\n     */\n    routes?: RoutesConfig;\n\n    /**\n     * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`\n     */\n    protected?: boolean;\n\n    /**\n     * Global load strategy which is used as a fallback for loading data on each navigation\n     */\n    loadStrategy?: RouteLoadStrategy;\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { RouteConfig } from './routes-config';\nimport { RouteLoadStrategy, RoutingConfig } from './config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingConfigService {\n  constructor(protected config: RoutingConfig) {}\n\n  getRouteConfig(routeName: string): RouteConfig {\n    const routeConfig = this.config?.routing?.routes;\n\n    const result = routeConfig && routeConfig[routeName];\n    if (!routeConfig || result === undefined) {\n      this.warn(`No path was configured for the named route '${routeName}'!`);\n    }\n    return result;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n\n  getLoadStrategy(): RouteLoadStrategy {\n    return this.config?.routing?.loadStrategy ?? RouteLoadStrategy.ALWAYS;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { UrlParsingService } from './url-parsing.service';\nimport { RouteConfig, ParamsMapping } from '../routes-config';\nimport { getParamName, isParam } from './path-utils';\nimport { UrlCommandRoute, UrlCommands, UrlCommand } from './url-command';\nimport { RoutingConfigService } from '../routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class SemanticPathService {\n  readonly ROOT_URL = ['/'];\n\n  constructor(\n    protected routingConfigService: RoutingConfigService,\n    protected urlParser: UrlParsingService\n  ) {}\n\n  /**\n   * Returns the first path alias configured for a given route name. It adds `/` at the beginning.\n   */\n  get(routeName: string): string {\n    const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n    return routeConfig && Array.isArray(routeConfig.paths)\n      ? '/' + routeConfig.paths[0]\n      : undefined;\n  }\n\n  /**\n   * Transforms the array of url commands. Each command can be:\n   * a) string - will be left untouched\n   * b) object { cxRoute: <route name> } - will be replaced with semantic path\n   * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params\n   *\n   * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)\n   */\n  transform(commands: UrlCommands): any[] {\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n\n    const result: string[] = [];\n    for (const command of commands) {\n      if (!this.isRouteCommand(command)) {\n        // don't modify segment that is not route command:\n        result.push(command);\n      } else {\n        // generate array with url segments for given route command:\n        const partialResult = this.generateUrlPart(command);\n\n        if (partialResult === null) {\n          return this.ROOT_URL;\n        }\n\n        result.push(...partialResult);\n      }\n    }\n\n    if (this.shouldOutputAbsolute(commands)) {\n      result.unshift('/');\n    }\n\n    return result;\n  }\n\n  private isRouteCommand(command: UrlCommand): boolean {\n    return command && Boolean(command.cxRoute);\n  }\n\n  private shouldOutputAbsolute(commands: UrlCommands): boolean {\n    return this.isRouteCommand(commands[0]);\n  }\n\n  private generateUrlPart(command: UrlCommandRoute): string[] | null {\n    this.standarizeRouteCommand(command);\n\n    if (!command.cxRoute) {\n      return null;\n    }\n\n    const routeConfig = this.routingConfigService.getRouteConfig(\n      command.cxRoute\n    );\n\n    // if no route translation was configured, return null:\n    if (!routeConfig || !routeConfig.paths) {\n      return null;\n    }\n\n    // find first path that can satisfy it's parameters with given parameters\n    const path = this.findPathWithFillableParams(routeConfig, command.params);\n\n    // if there is no configured path that can be satisfied with given params, return null\n    if (!path) {\n      return null;\n    }\n\n    const result = this.provideParamsValues(\n      path,\n      command.params,\n      routeConfig.paramsMapping\n    );\n\n    return result;\n  }\n\n  private standarizeRouteCommand(command: UrlCommandRoute): void {\n    command.params = command.params || {};\n  }\n\n  private provideParamsValues(\n    path: string,\n    params: object,\n    paramsMapping: ParamsMapping\n  ): string[] {\n    return this.urlParser.getPrimarySegments(path).map((segment) => {\n      if (isParam(segment)) {\n        const paramName = getParamName(segment);\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          paramsMapping\n        );\n        return params[mappedParamName];\n      }\n      return segment;\n    });\n  }\n\n  private findPathWithFillableParams(\n    routeConfig: RouteConfig,\n    params: object\n  ): string {\n    const foundPath = routeConfig.paths.find((path) =>\n      this.getParams(path).every((paramName) => {\n        const mappedParamName = this.getMappedParamName(\n          paramName,\n          routeConfig.paramsMapping\n        );\n\n        return params[mappedParamName] !== undefined;\n      })\n    );\n\n    if (foundPath === undefined || foundPath === null) {\n      this.warn(\n        `No configured path matches all its params to given object. `,\n        `Route config: `,\n        routeConfig,\n        `Params object: `,\n        params\n      );\n      return null;\n    }\n    return foundPath;\n  }\n\n  private getParams(path: string) {\n    return this.urlParser\n      .getPrimarySegments(path)\n      .filter(isParam)\n      .map(getParamName);\n  }\n\n  private getMappedParamName(paramName: string, paramsMapping: object): string {\n    if (paramsMapping) {\n      return paramsMapping[paramName] || paramName;\n    }\n    return paramName;\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { NavigationExtras } from '@angular/router';\nimport { Action } from '@ngrx/store';\n\nexport const ROUTER_GO = '[Router] Go';\nexport const ROUTER_GO_BY_URL = '[Router] Go By Url';\nexport const ROUTER_BACK = '[Router] Back';\nexport const ROUTER_FORWARD = '[Router] Forward';\n\nexport class RouteGoAction implements Action {\n  readonly type = ROUTER_GO;\n  constructor(\n    public payload: {\n      path: string[];\n      query?: object;\n      extras?: NavigationExtras;\n    }\n  ) {}\n}\n\nexport class RouteGoByUrlAction implements Action {\n  readonly type = ROUTER_GO_BY_URL;\n  constructor(public payload: string) {}\n}\n\nexport class RouteBackAction implements Action {\n  readonly type = ROUTER_BACK;\n}\n\nexport class RouteForwardAction implements Action {\n  readonly type = ROUTER_FORWARD;\n}\n\nexport type RoutingAction =\n  | RouteGoAction\n  | RouteGoByUrlAction\n  | RouteBackAction\n  | RouteForwardAction;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { PageContext } from '../../models/page-context.model';\nimport { RouterState, ROUTING_FEATURE, State } from '../routing-state';\n\nexport const getRouterFeatureState: MemoizedSelector<\n  any,\n  State\n> = createFeatureSelector<State>(ROUTING_FEATURE);\n\nexport const getRouterState: MemoizedSelector<\n  any,\n  RouterState\n> = createSelector(getRouterFeatureState, (state) => state.router);\n\nexport const getPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    (routingState.state && routingState.state.context) || { id: '' }\n);\n\nexport const getNextPageContext: MemoizedSelector<\n  any,\n  PageContext\n> = createSelector(\n  getRouterState,\n  (routingState: RouterState) =>\n    routingState.nextState && routingState.nextState.context\n);\n\nexport const isNavigating: MemoizedSelector<any, boolean> = createSelector(\n  getNextPageContext,\n  (context) => !!context\n);\n","import { Params } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { PageContext } from '../models/page-context.model';\n\nexport const ROUTING_FEATURE = 'router';\n\nexport interface RouterState\n  extends fromNgrxRouter.RouterReducerState<ActivatedRouterStateSnapshot> {\n  nextState?: ActivatedRouterStateSnapshot;\n}\n\nexport interface ActivatedRouterStateSnapshot {\n  url: string;\n  queryParams: Params;\n  params: Params;\n  context: PageContext;\n  cmsRequired: boolean;\n}\n\nexport interface State {\n  [ROUTING_FEATURE]: RouterState;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { WindowRef } from '../../window/window-ref';\nimport { SemanticPathService } from '../configurable-routes/url-translation/semantic-path.service';\nimport { UrlCommands } from '../configurable-routes/url-translation/url-command';\nimport { PageContext } from '../models/page-context.model';\nimport { RoutingActions } from '../store/actions/index';\nimport { RouterState } from '../store/routing-state';\nimport { RoutingSelector } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoutingService {\n  constructor(\n    protected store: Store<RouterState>,\n    protected winRef: WindowRef,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Get the current router state\n   */\n  getRouterState(): Observable<RouterState> {\n    return this.store.pipe(select(RoutingSelector.getRouterState));\n  }\n\n  /**\n   * Get the `PageContext` from the state\n   */\n  getPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getPageContext));\n  }\n\n  /**\n   * Get the next `PageContext` from the state\n   */\n  getNextPageContext(): Observable<PageContext> {\n    return this.store.pipe(select(RoutingSelector.getNextPageContext));\n  }\n\n  /**\n   * Get the `isNavigating` info from the state\n   */\n  isNavigating(): Observable<boolean> {\n    return this.store.pipe(select(RoutingSelector.isNavigating));\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param commands: url commands\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  go(commands: UrlCommands, query?: object, extras?: NavigationExtras): void {\n    const path = this.semanticPathService.transform(commands);\n\n    return this.navigate(path, query, extras);\n  }\n\n  /**\n   * Navigation using URL\n   * @param url\n   */\n  goByUrl(url: string) {\n    this.store.dispatch(new RoutingActions.RouteGoByUrlAction(url));\n  }\n\n  /**\n   * Navigating back\n   */\n  back(): void {\n    const isLastPageInApp = this.winRef.document.referrer.includes(\n      this.winRef.nativeWindow.location.origin\n    );\n    if (isLastPageInApp) {\n      this.store.dispatch(new RoutingActions.RouteBackAction());\n      return;\n    }\n    this.go(['/']);\n    return;\n  }\n\n  /**\n   * Navigating forward\n   */\n  forward(): void {\n    this.store.dispatch(new RoutingActions.RouteForwardAction());\n  }\n\n  /**\n   * Navigation with a new state into history\n   * @param path\n   * @param query\n   * @param extras: Represents the extra options used during navigation.\n   */\n  protected navigate(\n    path: any[],\n    query?: object,\n    extras?: NavigationExtras\n  ): void {\n    this.store.dispatch(\n      new RoutingActions.RouteGoAction({\n        path,\n        query,\n        extras,\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/facade/routing.service';\nimport { AuthService } from '../../facade/auth.service';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserErrorHandlingService {\n  constructor(\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  public handleExpiredUserToken(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<UserToken>> {\n    return this.handleExpiredToken().pipe(\n      switchMap((token: UserToken) => {\n        return next.handle(this.createNewRequestWithNewToken(request, token));\n      })\n    );\n  }\n\n  public handleExpiredRefreshToken(): void {\n    // Logout user\n    this.authService.logout();\n  }\n\n  protected handleExpiredToken(): Observable<UserToken> {\n    let oldToken: UserToken;\n    return this.authService.getUserToken().pipe(\n      tap((token: UserToken) => {\n        if (token.access_token && token.refresh_token && !oldToken) {\n          this.authService.refreshUserToken(token);\n        } else if (!token.access_token && !token.refresh_token) {\n          this.routingService.go({ cxRoute: 'login' });\n        } else if (!token.refresh_token) {\n          this.authService.logout();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        oldToken = oldToken || token;\n      }),\n      filter(\n        (token: UserToken) => oldToken.access_token !== token.access_token\n      ),\n      take(1)\n    );\n  }\n\n  protected createNewRequestWithNewToken(\n    request: HttpRequest<any>,\n    token: UserToken\n  ): HttpRequest<any> {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n    });\n    return request;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AuthService } from '../facade/auth.service';\nimport { ClientErrorHandlingService } from '../services/client-error/client-error-handling.service';\nimport { UserErrorHandlingService } from '../services/user-error/user-error-handling.service';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private userErrorHandlingService: UserErrorHandlingService,\n    private clientErrorHandlingService: ClientErrorHandlingService,\n    private authService: AuthService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isClientTokenRequest = this.isClientTokenRequest(request);\n    if (isClientTokenRequest) {\n      request = InterceptorUtil.removeHeader(USE_CLIENT_TOKEN, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          switch (errResponse.status) {\n            case 401: // Unauthorized\n              if (isClientTokenRequest) {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.clientErrorHandlingService.handleExpiredClientToken(\n                    request,\n                    next\n                  );\n                }\n                // user token request\n              } else {\n                if (this.isExpiredToken(errResponse)) {\n                  return this.userErrorHandlingService.handleExpiredUserToken(\n                    request,\n                    next\n                  );\n                } else if (\n                  // Refresh expired token\n                  // Check that the OAUTH endpoint was called and the error is for refresh token is expired\n                  errResponse.url.includes(OAUTH_ENDPOINT) &&\n                  errResponse.error.error === 'invalid_token'\n                ) {\n                  this.userErrorHandlingService.handleExpiredRefreshToken();\n                  return of();\n                }\n              }\n              break;\n            case 400: // Bad Request\n              if (\n                errResponse.url.includes(OAUTH_ENDPOINT) &&\n                errResponse.error.error === 'invalid_grant'\n              ) {\n                if (request.body.get('grant_type') === 'refresh_token') {\n                  // refresh token fail, force user logout\n                  this.authService.logout();\n                }\n              }\n              break;\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isClientTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CLIENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n\n  private isExpiredToken(resp: HttpErrorResponse): boolean {\n    if (\n      resp.error &&\n      resp.error.errors &&\n      resp.error.errors instanceof Array &&\n      resp.error.errors[0]\n    ) {\n      return resp.error.errors[0].type === 'InvalidTokenError';\n    }\n    return false;\n  }\n}\n","export class DynamicTemplate {\n  static resolve(templateString: string, templateVariables: Object) {\n    for (const variableLabel of Object.keys(templateVariables)) {\n      const placeholder = new RegExp('\\\\${' + variableLabel + '}', 'g');\n      templateString = templateString.replace(\n        placeholder,\n        templateVariables[variableLabel]\n      );\n    }\n    return templateString;\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\n\n/**\n * Helper function for safely getting context parameter config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterValues(\n  config: SiteContextConfig,\n  parameter: string\n): string[] {\n  return (config.context && config.context[parameter]) || [];\n}\n\n/**\n * Helper function for calculating default value for context parameter from config\n *\n * @param config\n * @param parameter\n */\nexport function getContextParameterDefault(\n  config: SiteContextConfig,\n  parameter: string\n): string {\n  const param = getContextParameterValues(config, parameter);\n  return param && param.length ? param[0] : undefined;\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport enum StorageSyncType {\n  NO_STORAGE = 'NO_STORAGE',\n  LOCAL_STORAGE = 'LOCAL_STORAGE',\n  SESSION_STORAGE = 'SESSION_STORAGE',\n}\n\nexport enum StateTransferType {\n  TRANSFER_STATE = 'SSR',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StateConfig {\n  state?: {\n    storageSync?: {\n      /**\n       * A key name for the data stored in `localStorage`.\n       * Default is `DEFAULT_LOCAL_STORAGE_KEY`.\n       */\n      localStorageKeyName?: string;\n      /**\n       * A key name for the data stored in `sessionStorage`.\n       * Default is `DEFAULT_SESSION_STORAGE_KEY`.\n       */\n      sessionStorageKeyName?: string;\n      /**\n       * A set of state keys that should be synced with the specified browser's storage.\n       */\n      keys?: {\n        [key: string]: StorageSyncType;\n      };\n      /**\n       * A set of keys not to sync with the specified browser's storage.\n       */\n      excludeKeys?: {\n        [key: string]: StorageSyncType;\n      };\n    };\n    ssrTransfer?: {\n      keys?: {\n        /**\n         * A set of state keys that should be transferred from server.\n         */\n        [key: string]: StateTransferType;\n      };\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SiteContextConfig {\n  context?: {\n    urlParameters?: string[];\n    [contextName: string]: string[];\n  };\n}\n","import { Action } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\n\nexport const LOAD_BASE_SITE = '[Site-context] Load BaseSite';\nexport const LOAD_BASE_SITE_FAIL = '[Site-context] Load BaseSite Fail';\nexport const LOAD_BASE_SITE_SUCCESS = '[Site-context] Load BaseSite Success';\nexport const SET_ACTIVE_BASE_SITE = '[Site-context] Set Active BaseSite';\nexport const BASE_SITE_CHANGE = '[Site-context] BaseSite Change';\n\nexport class LoadBaseSite implements Action {\n  readonly type = LOAD_BASE_SITE;\n}\n\nexport class LoadBaseSiteFail implements Action {\n  readonly type = LOAD_BASE_SITE_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBaseSiteSuccess implements Action {\n  readonly type = LOAD_BASE_SITE_SUCCESS;\n  constructor(public payload: BaseSite) {}\n}\n\nexport class SetActiveBaseSite implements Action {\n  readonly type = SET_ACTIVE_BASE_SITE;\n  constructor(public payload: string) {}\n}\n\nexport class BaseSiteChange implements Action {\n  readonly type = BASE_SITE_CHANGE;\n}\n\n// action types\nexport type BaseSiteAction =\n  | LoadBaseSite\n  | LoadBaseSiteFail\n  | LoadBaseSiteSuccess\n  | SetActiveBaseSite\n  | BaseSiteChange;\n","import { Action } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\n\nexport const LOAD_CURRENCIES = '[Site-context] Load Currencies';\nexport const LOAD_CURRENCIES_FAIL = '[Site-context] Load Currencies Fail';\nexport const LOAD_CURRENCIES_SUCCESS = '[Site-context] Load Currencies Success';\nexport const SET_ACTIVE_CURRENCY = '[Site-context] Set Active Currency';\nexport const CURRENCY_CHANGE = '[Site-context] Currency Change';\n\nexport class LoadCurrencies implements Action {\n  readonly type = LOAD_CURRENCIES;\n}\n\nexport class LoadCurrenciesFail implements Action {\n  readonly type = LOAD_CURRENCIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCurrenciesSuccess implements Action {\n  readonly type = LOAD_CURRENCIES_SUCCESS;\n  constructor(public payload: Currency[]) {}\n}\n\nexport class SetActiveCurrency implements Action {\n  readonly type = SET_ACTIVE_CURRENCY;\n  constructor(public payload: string) {}\n}\n\nexport class CurrencyChange implements Action {\n  readonly type = CURRENCY_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type CurrenciesAction =\n  | LoadCurrencies\n  | LoadCurrenciesFail\n  | LoadCurrenciesSuccess\n  | SetActiveCurrency\n  | CurrencyChange;\n","import { Action } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\n\nexport const LOAD_LANGUAGES = '[Site-context] Load Languages';\nexport const LOAD_LANGUAGES_FAIL = '[Site-context] Load Languages Fail';\nexport const LOAD_LANGUAGES_SUCCESS = '[Site-context] Load Languages Success';\nexport const SET_ACTIVE_LANGUAGE = '[Site-context] Set Active Language';\nexport const LANGUAGE_CHANGE = '[Site-context] Language Change';\n\nexport class LoadLanguages implements Action {\n  readonly type = LOAD_LANGUAGES;\n}\n\nexport class LoadLanguagesFail implements Action {\n  readonly type = LOAD_LANGUAGES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadLanguagesSuccess implements Action {\n  readonly type = LOAD_LANGUAGES_SUCCESS;\n  constructor(public payload: Language[]) {}\n}\n\nexport class SetActiveLanguage implements Action {\n  readonly type = SET_ACTIVE_LANGUAGE;\n  constructor(public payload: string) {}\n}\n\nexport class LanguageChange implements Action {\n  readonly type = LANGUAGE_CHANGE;\n  constructor(public payload: { previous: string; current: string }) {}\n}\n\n// action types\nexport type LanguagesAction =\n  | LoadLanguages\n  | LoadLanguagesFail\n  | LoadLanguagesSuccess\n  | SetActiveLanguage\n  | LanguageChange;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  SiteContextState,\n  SITE_CONTEXT_FEATURE,\n  StateWithSiteContext,\n} from '../state';\n\nexport const getSiteContextState: MemoizedSelector<\n  StateWithSiteContext,\n  SiteContextState\n> = createFeatureSelector<SiteContextState>(SITE_CONTEXT_FEATURE);\n","import { Currency, Language, BaseSite } from '../../model/misc.model';\nexport const SITE_CONTEXT_FEATURE = 'siteContext';\n\nexport interface StateWithSiteContext {\n  [SITE_CONTEXT_FEATURE]: SiteContextState;\n}\n\nexport interface SiteContextState {\n  languages: LanguagesState;\n  currencies: CurrenciesState;\n  baseSite: BaseSiteState;\n}\n\nexport interface CurrencyEntities {\n  [isocode: string]: Currency;\n}\n\nexport interface CurrenciesState {\n  entities: CurrencyEntities;\n  activeCurrency: string;\n}\nexport interface LanguagesEntities {\n  [isocode: string]: Language;\n}\n\nexport interface LanguagesState {\n  entities: LanguagesEntities;\n  activeLanguage: string;\n}\n\nexport interface BaseSiteState {\n  activeSite: string;\n  details: BaseSite;\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { BaseSite } from '../../../model/misc.model';\nimport { SiteContextState, StateWithSiteContext } from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nexport const getActiveBaseSite: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) =>\n    state && state.baseSite && state.baseSite.activeSite\n);\n\nexport const getBaseSiteData: MemoizedSelector<\n  StateWithSiteContext,\n  BaseSite\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state && state.baseSite && state.baseSite.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Currency } from '../../../model/misc.model';\nimport {\n  CurrenciesState,\n  CurrencyEntities,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst currenciesEntitiesSelector = (state: CurrenciesState) => state.entities;\nconst activeCurrencySelector = (state: CurrenciesState) => state.activeCurrency;\n\nexport const getCurrenciesState: MemoizedSelector<\n  StateWithSiteContext,\n  CurrenciesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.currencies\n);\n\nexport const getCurrenciesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  CurrencyEntities\n> = createSelector(getCurrenciesState, currenciesEntitiesSelector);\n\nexport const getActiveCurrency: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getCurrenciesState, activeCurrencySelector);\n\nexport const getAllCurrencies: MemoizedSelector<\n  StateWithSiteContext,\n  Currency[]\n> = createSelector(getCurrenciesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Language } from '../../../model/misc.model';\nimport {\n  LanguagesEntities,\n  LanguagesState,\n  SiteContextState,\n  StateWithSiteContext,\n} from '../state';\nimport { getSiteContextState } from './site-context.selector';\n\nconst activeLanguageSelector = (state: LanguagesState) => state.activeLanguage;\nconst languagesEntitiesSelector = (state: LanguagesState) => state.entities;\n\nexport const getLanguagesState: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesState\n> = createSelector(\n  getSiteContextState,\n  (state: SiteContextState) => state.languages\n);\n\nexport const getLanguagesEntities: MemoizedSelector<\n  StateWithSiteContext,\n  LanguagesEntities\n> = createSelector(getLanguagesState, languagesEntitiesSelector);\n\nexport const getActiveLanguage: MemoizedSelector<\n  StateWithSiteContext,\n  string\n> = createSelector(getLanguagesState, activeLanguageSelector);\n\nexport const getAllLanguages: MemoizedSelector<\n  StateWithSiteContext,\n  Language[]\n> = createSelector(getLanguagesEntities, (entities) => {\n  return entities\n    ? Object.keys(entities).map((isocode) => entities[isocode])\n    : null;\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { getContextParameterDefault } from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n@Injectable()\nexport class BaseSiteService implements SiteContext<string> {\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    protected config: SiteContextConfig\n  ) {}\n\n  /**\n   * Represents the current baseSite uid.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveBaseSite),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * We currently don't support switching baseSite at run time\n   */\n  getAll(): Observable<string[]> {\n    return this.getActive().pipe(map((baseSite) => [baseSite]));\n  }\n\n  setActive(baseSite: string): Subscription {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveBaseSite), take(1))\n      .subscribe((activeBaseSite) => {\n        if (baseSite && activeBaseSite !== baseSite) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveBaseSite(baseSite)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initializes the active baseSite.\n   */\n  initialize(): void {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    this.setActive(\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID)\n    );\n  }\n\n  /**\n   * Get the base site details data\n   */\n  getBaseSiteData(): Observable<BaseSite> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getBaseSiteData),\n      tap((baseSite) => {\n        if (Object.keys(baseSite).length === 0) {\n          this.store.dispatch(new SiteContextActions.LoadBaseSite());\n        }\n      })\n    );\n  }\n}\n","export const LANGUAGE_CONTEXT_ID = 'language';\nexport const CURRENCY_CONTEXT_ID = 'currency';\nexport const BASE_SITE_CONTEXT_ID = 'baseSite';\n","/**\n * Angular uses the native encodeURIComponent function,\n * but then un-encoded some characters that are allowed\n * to be part of the query according to IETF RFC 3986.\n * So, to make these characters still encoded, this encoder only\n * uses the encodeURIComponent.\n */\nimport { HttpParameterCodec } from '@angular/common/http';\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { OccEndpoints } from '../occ-models/occ-endpoints.model';\nimport { LoadingScopes } from './loading-scopes-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class OccConfig extends SiteContextConfig {\n  backend?: {\n    occ?: {\n      baseUrl?: string;\n      prefix?: string;\n      /**\n       * Indicates whether or not cross-site Access-Control requests should be made\n       * using credentials such as cookies, authorization headers or TLS client certificates\n       */\n      useWithCredentials?: boolean;\n\n      endpoints?: OccEndpoints;\n      legacy?: boolean;\n    };\n    media?: {\n      /**\n       * Media URLs are typically relative, so that the host can be configured.\n       * Configurable media baseURLs are useful for SEO, multi-site,\n       * switching environments, etc.\n       */\n      baseUrl?: string;\n    };\n    loadingScopes?: LoadingScopes;\n  };\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable, isDevMode, Optional } from '@angular/core';\nimport { DynamicTemplate } from '../../config/utils/dynamic-template';\nimport { getContextParameterDefault } from '../../site-context/config/context-config-utils';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { CustomEncoder } from '../adapters/cart/custom.encoder';\nimport { OccConfig } from '../config/occ-config';\nimport { DEFAULT_SCOPE } from '../occ-models/occ-endpoints.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccEndpointsService {\n  private activeBaseSite: string;\n\n  constructor(\n    private config: OccConfig,\n    @Optional() private baseSiteService: BaseSiteService\n  ) {\n    this.activeBaseSite =\n      getContextParameterDefault(this.config, BASE_SITE_CONTEXT_ID) || '';\n\n    if (this.baseSiteService) {\n      this.baseSiteService\n        .getActive()\n        .subscribe((value) => (this.activeBaseSite = value));\n    }\n  }\n\n  /**\n   * Returns and endpoint starting from the OCC baseUrl (no baseSite)\n   * @param endpoint Endpoint suffix\n   */\n  getRawEndpoint(endpoint: string): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n    endpoint = this.config.backend.occ.endpoints?.[endpoint];\n\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n\n    return this.config.backend.occ.baseUrl + endpoint;\n  }\n\n  /**\n   * Returns base OCC endpoint (baseUrl + prefix + baseSite)\n   */\n  getBaseEndpoint(): string {\n    if (!this.config?.backend?.occ) {\n      return '';\n    }\n\n    return (\n      (this.config.backend.occ.baseUrl || '') +\n      this.config.backend.occ.prefix +\n      this.activeBaseSite\n    );\n  }\n\n  /**\n   * Returns an OCC endpoint including baseUrl and baseSite\n   * @param endpoint Endpoint suffix\n   */\n  getEndpoint(endpoint: string): string {\n    if (!endpoint.startsWith('/')) {\n      endpoint = '/' + endpoint;\n    }\n    return this.getBaseEndpoint() + endpoint;\n  }\n\n  /**\n   * Returns a fully qualified OCC Url (including baseUrl and baseSite)\n   * @param endpoint Name of the OCC endpoint key config\n   * @param urlParams  URL parameters\n   * @param queryParams Query parameters\n   * @param scope\n   */\n  getUrl(\n    endpoint: string,\n    urlParams?: object,\n    queryParams?: object,\n    scope?: string\n  ): string {\n    endpoint = this.getEndpointForScope(endpoint, scope);\n\n    if (urlParams) {\n      Object.keys(urlParams).forEach((key) => {\n        urlParams[key] = encodeURIComponent(urlParams[key]);\n      });\n      endpoint = DynamicTemplate.resolve(endpoint, urlParams);\n    }\n\n    if (queryParams) {\n      let httpParamsOptions = { encoder: new CustomEncoder() };\n\n      if (endpoint.includes('?')) {\n        let queryParamsFromEndpoint;\n        [endpoint, queryParamsFromEndpoint] = endpoint.split('?');\n\n        httpParamsOptions = {\n          ...httpParamsOptions,\n          ...{ fromString: queryParamsFromEndpoint },\n        };\n      }\n\n      let httpParams = new HttpParams(httpParamsOptions);\n      Object.keys(queryParams).forEach((key) => {\n        const value = queryParams[key];\n        if (value !== undefined) {\n          if (value === null) {\n            httpParams = httpParams.delete(key);\n          } else {\n            httpParams = httpParams.set(key, value);\n          }\n        }\n      });\n\n      const params = httpParams.toString();\n      if (params.length) {\n        endpoint += '?' + params;\n      }\n    }\n\n    return this.getEndpoint(endpoint);\n  }\n\n  private getEndpointForScope(endpoint: string, scope?: string): string {\n    const endpointsConfig = this.config.backend?.occ?.endpoints;\n    const endpointConfig = endpointsConfig[endpoint];\n\n    if (scope) {\n      if (endpointConfig?.[scope]) {\n        return endpointConfig?.[scope];\n      }\n      if (scope === DEFAULT_SCOPE && typeof endpointConfig === 'string') {\n        return endpointConfig;\n      }\n      if (isDevMode()) {\n        console.warn(\n          `${endpoint} endpoint configuration missing for scope \"${scope}\"`\n        );\n      }\n    }\n\n    return (\n      (typeof endpointConfig === 'string'\n        ? endpointConfig\n        : endpointConfig?.[DEFAULT_SCOPE]) || endpoint\n    );\n  }\n}\n","export const DEFAULT_SCOPE = 'default';\n\nexport interface OccEndpoint {\n  default?: string;\n  [scope: string]: string;\n}\n\nexport interface ProductOccEndpoint extends OccEndpoint {\n  list?: string;\n  details?: string;\n  attributes?: string;\n  variants?: string;\n}\n\nexport interface OccEndpoints {\n  /**\n   * Client login (get authorization token)\n   *\n   * @member {string}\n   */\n  login?: string | OccEndpoint;\n\n  /**\n   * Client logout (revoke authorization token)\n   *\n   * @member {string}\n   */\n  revoke?: string | OccEndpoint;\n\n  /**\n   * Get product details for scope\n   *\n   * @member Object\n   */\n  product?: string | ProductOccEndpoint;\n  /**\n   * Get reviews for a product\n   *\n   * @member {string}\n   */\n  productReviews?: string | OccEndpoint;\n  /**\n   * Get a list of product references\n   *\n   * @member {string}\n   */\n  productReferences?: string | OccEndpoint;\n  /**\n   * Get a list of products and additional data\n   *\n   * @member {string}\n   */\n  productSearch?: string | OccEndpoint;\n  /**\n   * Get a list of available suggestions\n   *\n   * @member {string}\n   */\n  productSuggestions?: string | OccEndpoint;\n  /**\n   * Get CMS component details\n   *\n   * @member {string}\n   */\n  component?: string | OccEndpoint;\n  /**\n   * Get a list of CMS component details\n   *\n   * @member {string}\n   */\n  components?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  pages?: string | OccEndpoint;\n  /**\n   * Get page data with list of cms content slots\n   *\n   * @member {string}\n   */\n  page?: string | OccEndpoint;\n  /**\n   * Get all carts\n   *\n   * @member {string} [carts]\n   */\n  carts?: string | OccEndpoint;\n  /**\n   * Get a cart with a given identifier\n   *\n   * @member {string} [cart]\n   */\n  cart?: string | OccEndpoint;\n  /**\n   * Creates or restore a cart for a user\n   *\n   * @member {string} [createCart]\n   */\n  createCart?: string | OccEndpoint;\n  /**\n   * Deletes a cart with a given cart id\n   *\n   * @member {string} [deleteCart]\n   */\n  deleteCart?: string | OccEndpoint;\n  /**\n   * Adds a product to the cart\n   *\n   * @member {string} [addEntries]\n   */\n  addEntries?: string | OccEndpoint;\n  /**\n   * Update quantity and store the details of a cart entry\n   *\n   * @member {string} [updateEntries]\n   */\n  updateEntries?: string | OccEndpoint;\n  /**\n   * Deletes cart entry\n   *\n   * @member {string} [removeEntries]\n   */\n  removeEntries?: string | OccEndpoint;\n  /**\n   * Assign email to cart\n   *\n   * @member {string} [addEmail]\n   */\n  addEmail?: string | OccEndpoint;\n  /**\n   * Get a store location\n   *\n   * @member {string} [page]\n   */\n  store?: string | OccEndpoint;\n  /**\n   * Get a list of store locations\n   *\n   * @member {string} [page]\n   */\n  stores?: string | OccEndpoint;\n  /**\n   * Gets a store location count per country and regions\n   *\n   * @member {string} [page]\n   */\n  storescounts?: string | OccEndpoint;\n  /**\n   * Get a list of available languages\n   *\n   * @member {string}\n   */\n  languages?: string | OccEndpoint;\n  /**\n   * Get a list of available currencies\n   *\n   * @member {string}\n   */\n  currencies?: string | OccEndpoint;\n  /**\n   * Get a list of countries\n   *\n   * @member {string}\n   */\n  countries?: string | OccEndpoint;\n  /**\n   * Fetch the list of regions for the provided country\n   *\n   * @member {string}\n   */\n  regions?: string | OccEndpoint;\n  /**\n   * Titles used for user's personal info.\n   *\n   * @member {string}\n   */\n  titles?: string | OccEndpoint;\n  /**\n   * Get user details\n   *\n   * @member {string}\n   */\n  user?: string | OccEndpoint;\n  /**\n   * Register a new user.\n   *\n   * @member {string}\n   */\n  userRegister?: string | OccEndpoint;\n  /**\n   * Request an email to reset the password\n   *\n   * @member {string}\n   */\n  userForgotPassword?: string | OccEndpoint;\n  /**\n   * Reset the password once the email is recieved.\n   *\n   * @member {string}\n   */\n  userResetPassword?: string | OccEndpoint;\n  /**\n   * Update the user id with which the user authenticates.\n   *\n   * @member {string}\n   */\n  userUpdateLoginId?: string | OccEndpoint;\n  /**\n   * Update the user's password\n   *\n   * @member {string}\n   */\n  userUpdatePassword?: string | OccEndpoint;\n  /**\n   * Payment details root endpoint.\n   *\n   * @member {string}\n   */\n  paymentDetailsAll?: string | OccEndpoint;\n  /**\n   * Endpoint for a specific payment method.\n   *\n   * @member {string}\n   */\n  paymentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for the list of one user's orders\n   *\n   * @member {string}\n   */\n  orderHistory?: string | OccEndpoint;\n  /**\n   * Endpoint for the details of one user's order\n   *\n   * @member {string}\n   */\n  orderDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for anonymous consent templates\n   *\n   * @member {string}\n   */\n  anonymousConsentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for consent templates\n   *\n   * @member {string}\n   */\n  consentTemplates?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's consents\n   *\n   * @member {string}\n   */\n  consents?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific previously given consent.\n   *\n   * @member {string}\n   */\n  consentDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's addresses\n   *\n   * @member {string}\n   */\n  addresses?: string | OccEndpoint;\n  /**\n   * Endpoint for a user's specific address\n   *\n   * @member {string}\n   */\n  addressDetail?: string | OccEndpoint;\n  /**\n   * Endpoint for address verification\n   *\n   * @member {string}\n   */\n  addressVerification?: string | OccEndpoint;\n  /**\n   * Endpoint for consignment tracking\n   *\n   * @member {string}\n   */\n  consignmentTracking?: string | OccEndpoint;\n  /**\n   * Endpoint for asm customer search\n   *\n   * @member {string}\n   */\n  asmCustomerSearch?: string | OccEndpoint;\n  /**\n   * Endpoint for cart voucher\n   *\n   * @member {string}\n   */\n  cartVoucher?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  customerCoupons?: string | OccEndpoint;\n  /**\n   * Endpoint for claiming coupon\n   *\n   * @member {string}\n   */\n  claimCoupon?: string | OccEndpoint;\n  /**\n   * Endpoint for coupons\n   *\n   * @member {string}\n   */\n  couponNotification?: string | OccEndpoint;\n  /**\n   * Explicitly saves a cart\n   *\n   * @member {string}\n   */\n  saveCart?: string | OccEndpoint;\n  /**\n   * Endpoint for notification preference\n   *\n   * @member {string}\n   */\n  notificationPreference?: string | OccEndpoint;\n  /**\n   * Endpoint for product interests\n   *\n   * @member {string}\n   */\n  productInterests?: string | OccEndpoint;\n  /**\n   * Endpoint for getting product interests\n   *\n   * @member {string}\n   */\n  getProductInterests?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancel an order\n   */\n  cancelOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for creating order return request\n   */\n  returnOrder?: string | OccEndpoint;\n\n  /**\n   * Endpoint for user's order return requests\n   */\n  orderReturns?: string | OccEndpoint;\n\n  /**\n   * Endpoint for order return request details\n   */\n  orderReturnDetail?: string | OccEndpoint;\n\n  /**\n   * Endpoint for cancelling return request\n   */\n  cancelReturn?: string | OccEndpoint;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { AuthService } from '../facade/auth.service';\nimport {\n  USE_CLIENT_TOKEN,\n  InterceptorUtil,\n} from '../../occ/utils/interceptor-util';\nimport { ClientToken } from '../models/token-types.model';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ClientTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getClientToken(request).pipe(\n      take(1),\n      switchMap((token: ClientToken) => {\n        if (\n          token &&\n          request.url.includes(this.occEndpoints.getBaseEndpoint())\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getClientToken(request: HttpRequest<any>): Observable<ClientToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(USE_CLIENT_TOKEN, request.headers)\n    ) {\n      return this.authService.getClientToken();\n    }\n    return of(null);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { AuthService } from '../facade/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserTokenInterceptor implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.authService.getUserToken().pipe(\n      take(1),\n      switchMap((token) => {\n        if (\n          token &&\n          this.isOccUrl(request.url) &&\n          !request.headers.get('Authorization')\n        ) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n\n        return next.handle(request);\n      })\n    );\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../occ/utils/interceptor-util';\n\n@Injectable({ providedIn: 'root' })\nexport class TokenRevocationInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isTokenRevocationRequest = this.isTokenRevocationRequest(request);\n    if (isTokenRevocationRequest) {\n      request = InterceptorUtil.removeHeader(TOKEN_REVOCATION_HEADER, request);\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: any) => {\n        if (isTokenRevocationRequest) {\n          return EMPTY;\n        }\n        return throwError(error);\n      })\n    );\n  }\n\n  protected isTokenRevocationRequest(request: HttpRequest<any>): boolean {\n    const isTokenRevocationHeaderPresent = InterceptorUtil.getInterceptorParam<\n      string\n    >(TOKEN_REVOCATION_HEADER, request.headers);\n    return Boolean(isTokenRevocationHeaderPresent);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AuthErrorInterceptor } from './auth-error.interceptor';\nimport { ClientTokenInterceptor } from './client-token.interceptor';\nimport { UserTokenInterceptor } from './user-token.interceptor';\nimport { TokenRevocationInterceptor } from './token-revocation.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: ClientTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: UserTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AuthErrorInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: TokenRevocationInterceptor,\n    multi: true,\n  },\n];\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AuthConfig extends OccConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n  };\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport { AuthConfig } from '../../config/auth-config';\nimport { ClientToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class ClientAuthenticationTokenService {\n  constructor(\n    protected config: AuthConfig,\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadClientAuthenticationToken(): Observable<ClientToken> {\n    const url: string = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('grant_type', 'client_credentials');\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.post<ClientToken>(url, params, { headers });\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { OccEndpointsService } from '../../../occ/services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  TOKEN_REVOCATION_HEADER,\n} from '../../../occ/utils/interceptor-util';\nimport { AuthConfig } from '../../config/auth-config';\nimport { UserToken } from '../../models/token-types.model';\n\n@Injectable()\nexport class UserAuthenticationTokenService {\n  constructor(\n    protected http: HttpClient,\n    protected config: AuthConfig,\n    protected occEndpointsService: OccEndpointsService\n  ) {}\n\n  loadToken(userId: string, password: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set('client_id', this.config.authentication.client_id)\n      .set('client_secret', this.config.authentication.client_secret)\n      .set('grant_type', 'password')\n      .set('username', userId)\n      .set('password', password);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  refreshToken(refreshToken: string): Observable<UserToken> {\n    const url = this.occEndpointsService.getRawEndpoint('login');\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.client_secret)\n      )\n      .set('refresh_token', encodeURI(refreshToken))\n      .set('grant_type', 'refresh_token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<UserToken>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  revoke(userToken: UserToken): Observable<{}> {\n    const url = this.occEndpointsService.getRawEndpoint('revoke');\n    const headers = InterceptorUtil.createHeader(\n      TOKEN_REVOCATION_HEADER,\n      true,\n      new HttpHeaders({\n        Authorization: `${userToken.token_type} ${userToken.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      })\n    );\n    const params = new HttpParams().set('token', userToken.access_token);\n    return this.http\n      .post<{}>(url, params, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { ClientAuthenticationTokenService } from './client-authentication/client-authentication-token.service';\nimport { ClientErrorHandlingService } from './client-error/client-error-handling.service';\nimport { UserAuthenticationTokenService } from './user-authentication/user-authentication-token.service';\nimport { UserErrorHandlingService } from './user-error/user-error-handling.service';\n\nexport const AuthServices: any[] = [\n  ClientAuthenticationTokenService,\n  ClientErrorHandlingService,\n  UserAuthenticationTokenService,\n  UserErrorHandlingService,\n];\n","import { StateConfig } from './state-config';\n\nexport const DEFAULT_LOCAL_STORAGE_KEY = 'spartacus-local-data';\nexport const DEFAULT_SESSION_STORAGE_KEY = 'spartacus-session-data';\n\nexport const defaultStateConfig: StateConfig = {\n  state: {\n    storageSync: {\n      localStorageKeyName: DEFAULT_LOCAL_STORAGE_KEY,\n      sessionStorageKeyName: DEFAULT_SESSION_STORAGE_KEY,\n      keys: {},\n      excludeKeys: {},\n    },\n  },\n};\n","import { Action, ActionReducer, INIT, MetaReducer, UPDATE } from '@ngrx/store';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { WindowRef } from '../../window/window-ref';\nimport { StateConfig, StorageSyncType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport function getStorageSyncReducer<T>(\n  winRef: WindowRef,\n  config?: StateConfig\n): MetaReducer<T, Action> {\n  if (\n    !winRef.nativeWindow ||\n    !config ||\n    !config.state ||\n    !config.state.storageSync ||\n    !config.state.storageSync.keys\n  ) {\n    return (reducer) => reducer;\n  }\n\n  const storageSyncConfig = config.state.storageSync;\n\n  return (reducer: ActionReducer<T, Action>): ActionReducer<T, Action> => {\n    return (state, action): T => {\n      const newState = reducer(state, action);\n\n      if (action.type === INIT || action.type === UPDATE) {\n        const rehydratedState = rehydrate(config, winRef);\n        return deepMerge({}, newState, rehydratedState);\n      }\n\n      if (action.type !== INIT) {\n        // handle local storage\n        const localStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.LOCAL_STORAGE\n        );\n        const localStorageStateSlices = getStateSlice(\n          localStorageKeys,\n          localStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.localStorageKeyName,\n          localStorageStateSlices,\n          winRef.localStorage\n        );\n\n        // handle session storage\n        const sessionStorageKeys = filterKeysByType(\n          storageSyncConfig.keys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageExclusionKeys = filterKeysByType(\n          storageSyncConfig.excludeKeys,\n          StorageSyncType.SESSION_STORAGE\n        );\n        const sessionStorageStateSlices = getStateSlice(\n          sessionStorageKeys,\n          sessionStorageExclusionKeys,\n          newState\n        );\n        persistToStorage(\n          config.state.storageSync.sessionStorageKeyName,\n          sessionStorageStateSlices,\n          winRef.sessionStorage\n        );\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function rehydrate<T>(config: StateConfig, winRef: WindowRef): T {\n  const localStorageValue = readFromStorage(\n    winRef.localStorage,\n    config.state.storageSync.localStorageKeyName\n  );\n  const sessionStorageValue = readFromStorage(\n    winRef.sessionStorage,\n    config.state.storageSync.sessionStorageKeyName\n  );\n\n  return deepMerge(localStorageValue, sessionStorageValue);\n}\n\nexport function exists(value: Object): boolean {\n  if (value != null) {\n    if (typeof value === 'object') {\n      return Object.keys(value).length !== 0;\n    }\n    return value !== '';\n  }\n  return false;\n}\n\nexport function getStorage(\n  storageType: StorageSyncType,\n  winRef: WindowRef\n): Storage {\n  let storage: Storage;\n\n  switch (storageType) {\n    case StorageSyncType.LOCAL_STORAGE: {\n      storage = winRef.localStorage;\n      break;\n    }\n    case StorageSyncType.SESSION_STORAGE: {\n      storage = winRef.sessionStorage;\n      break;\n    }\n    case StorageSyncType.NO_STORAGE: {\n      storage = undefined;\n      break;\n    }\n\n    default: {\n      storage = winRef.sessionStorage;\n    }\n  }\n\n  return storage;\n}\n\nexport function persistToStorage(\n  configKey: string,\n  value: any,\n  storage: Storage\n): void {\n  if (!isSsr(storage) && value) {\n    storage.setItem(configKey, JSON.stringify(value));\n  }\n}\n\nexport function readFromStorage(storage: Storage, key: string): any {\n  if (isSsr(storage)) {\n    return;\n  }\n\n  const storageValue = storage.getItem(key);\n  if (!storageValue) {\n    return;\n  }\n\n  return JSON.parse(storageValue);\n}\n\nexport function isSsr(storage: Storage): boolean {\n  return !Boolean(storage);\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { INIT } from '@ngrx/store';\nimport { AUTH_FEATURE, StateWithAuth } from '../../auth/store/auth-state';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { StateConfig, StateTransferType } from '../config/state-config';\nimport { filterKeysByType, getStateSlice } from '../utils/get-state-slice';\n\nexport const CX_KEY: StateKey<string> = makeStateKey<string>('cx-state');\n\nexport function getTransferStateReducer(\n  platformId,\n  transferState?: TransferState,\n  config?: StateConfig\n) {\n  if (\n    transferState &&\n    config &&\n    config.state &&\n    config.state.ssrTransfer &&\n    config.state.ssrTransfer.keys\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      return getBrowserTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    } else if (isPlatformServer(platformId)) {\n      return getServerTransferStateReducer(\n        transferState,\n        config.state.ssrTransfer.keys\n      );\n    }\n  }\n\n  return (reducer) => reducer;\n}\n\nexport function getServerTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      const newState = reducer(state, action);\n      if (newState) {\n        const stateSlice = getStateSlice(transferStateKeys, [], newState);\n        transferState.set(CX_KEY, stateSlice);\n      }\n\n      return newState;\n    };\n  };\n}\n\nexport function getBrowserTransferStateReducer(\n  transferState: TransferState,\n  keys: { [key: string]: StateTransferType }\n) {\n  const transferStateKeys = filterKeysByType(\n    keys,\n    StateTransferType.TRANSFER_STATE\n  );\n\n  return function (reducer) {\n    return function (state, action: any) {\n      if (action.type === INIT) {\n        if (!state) {\n          state = reducer(state, action);\n        }\n\n        // we should not utilize transfer state if user is logged in\n        const authState = (state as StateWithAuth)[AUTH_FEATURE];\n        const isLoggedIn =\n          authState && authState.userToken && authState.userToken.token;\n\n        if (!isLoggedIn && transferState.hasKey(CX_KEY)) {\n          const cxKey = transferState.get(CX_KEY, {});\n          const transferredStateSlice = getStateSlice(\n            transferStateKeys,\n            [],\n            cxKey\n          );\n\n          state = deepMerge({}, state, transferredStateSlice);\n        }\n        return state;\n      }\n      return reducer(state, action);\n    };\n  };\n}\n","import { Optional, PLATFORM_ID, Provider, InjectionToken } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\nimport { META_REDUCERS } from '@ngrx/store';\nimport { Config } from '../../config/config.module';\nimport { WindowRef } from '../../window/window-ref';\nimport { getStorageSyncReducer } from './storage-sync.reducer';\nimport { getTransferStateReducer } from './transfer-state.reducer';\n\nexport { getStateSlice } from '../utils/get-state-slice';\nexport { getStorageSyncReducer } from './storage-sync.reducer';\nexport * from './transfer-state.reducer';\n\nexport const TRANSFER_STATE_META_REDUCER = new InjectionToken(\n  'TransferStateMetaReducer'\n);\nexport const STORAGE_SYNC_META_REDUCER = new InjectionToken(\n  'StorageSyncMetaReducer'\n);\n\nexport const stateMetaReducers: Provider[] = [\n  {\n    provide: TRANSFER_STATE_META_REDUCER,\n    useFactory: getTransferStateReducer,\n    deps: [\n      PLATFORM_ID,\n      [new Optional(), TransferState],\n      [new Optional(), Config],\n    ],\n  },\n  {\n    provide: STORAGE_SYNC_META_REDUCER,\n    useFactory: getStorageSyncReducer,\n    deps: [WindowRef, [new Optional(), Config]],\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: TRANSFER_STATE_META_REDUCER,\n    multi: true,\n  },\n  {\n    provide: META_REDUCERS,\n    useExisting: STORAGE_SYNC_META_REDUCER,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStateConfig } from './config/default-state-config';\nimport { stateMetaReducers } from './reducers/index';\n\n@NgModule({})\nexport class StateModule {\n  static forRoot(): ModuleWithProviders<StateModule> {\n    return {\n      ngModule: StateModule,\n      providers: [\n        ...stateMetaReducers,\n        provideDefaultConfig(defaultStateConfig),\n      ],\n    };\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { isObject } from '../config/utils/deep-merge';\nimport { ErrorModel, HttpErrorModel } from '../model/misc.model';\n\nexport const UNKNOWN_ERROR = {\n  error: 'unknown error',\n};\n\nconst circularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport function makeErrorSerializable(\n  error: HttpErrorResponse | ErrorModel | any\n): HttpErrorModel | Error | any {\n  if (error instanceof Error) {\n    return {\n      message: error.message,\n      type: error.name,\n      reason: error.stack,\n    } as ErrorModel;\n  }\n\n  if (error instanceof HttpErrorResponse) {\n    let serializableError = error.error;\n    if (isObject(error.error)) {\n      serializableError = JSON.stringify(error.error, circularReplacer());\n    }\n\n    return {\n      message: error.message,\n      error: serializableError,\n      status: error.status,\n      statusText: error.statusText,\n      url: error.url,\n    } as HttpErrorModel;\n  }\n\n  return isObject(error) ? UNKNOWN_ERROR : error;\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ClientToken } from '../../models/token-types.model';\nimport { ClientAuthenticationTokenService } from '../../services/client-authentication/client-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class ClientTokenEffect {\n  @Effect()\n  loadClientToken$: Observable<\n    AuthActions.ClientTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOAD_CLIENT_TOKEN),\n    exhaustMap(() => {\n      return this.clientAuthenticationTokenService\n        .loadClientAuthenticationToken()\n        .pipe(\n          map((token: ClientToken) => {\n            return new AuthActions.LoadClientTokenSuccess(token);\n          }),\n          catchError((error) =>\n            of(\n              new AuthActions.LoadClientTokenFail(makeErrorSerializable(error))\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private clientAuthenticationTokenService: ClientAuthenticationTokenService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../services/user-authentication/user-authentication-token.service';\nimport { AuthActions } from '../actions/index';\n\n@Injectable()\nexport class UserTokenEffects {\n  @Effect()\n  loadUserToken$: Observable<AuthActions.UserTokenAction> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN),\n    map((action: AuthActions.LoadUserToken) => action.payload),\n    mergeMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          token.userId = OCC_USER_ID_CURRENT;\n          return new AuthActions.LoadUserTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(new AuthActions.LoadUserTokenFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  login$: Observable<AuthActions.Login> = this.actions$.pipe(\n    ofType(AuthActions.LOAD_USER_TOKEN_SUCCESS),\n    map(() => new AuthActions.Login())\n  );\n\n  @Effect()\n  refreshUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REFRESH_USER_TOKEN),\n    map((action: AuthActions.RefreshUserToken) => action.payload),\n    exhaustMap(({ refreshToken }) => {\n      return this.userTokenService.refreshToken(refreshToken).pipe(\n        map(\n          (token: UserToken) => {\n            const date = new Date();\n            date.setSeconds(date.getSeconds() + token.expires_in);\n            token.expiration_time = date.toJSON();\n            return new AuthActions.RefreshUserTokenSuccess(token);\n          },\n          catchError((error) =>\n            of(\n              new AuthActions.RefreshUserTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  revokeUserToken$: Observable<\n    AuthActions.UserTokenAction\n  > = this.actions$.pipe(\n    ofType(AuthActions.REVOKE_USER_TOKEN),\n    map((action: AuthActions.RevokeUserToken) => {\n      return action.payload;\n    }),\n    mergeMap((userToken: UserToken) => {\n      return this.userTokenService.revoke(userToken).pipe(\n        map(() => new AuthActions.RevokeUserTokenSuccess(userToken)),\n        catchError((error) => of(new AuthActions.RevokeUserTokenFail(error)))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { ClientTokenEffect } from './client-token.effect';\nimport { UserTokenEffects } from './user-token.effect';\n\nexport const effects: any[] = [UserTokenEffects, ClientTokenEffect];\n\nexport * from './client-token.effect';\nexport * from './user-token.effect';\n","import * as fromUpdateEmailAction from '../../../user/store/actions/update-email.action';\nimport { UserToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\n\nexport const initialState: UserToken = <UserToken>{};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | AuthActions.UserTokenAction\n    | fromUpdateEmailAction.UpdateEmailSuccessAction\n): UserToken {\n  switch (action.type) {\n    case AuthActions.LOAD_USER_TOKEN:\n    case AuthActions.REFRESH_USER_TOKEN: {\n      return {\n        ...state,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_SUCCESS:\n    case AuthActions.REFRESH_USER_TOKEN_SUCCESS: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case AuthActions.LOAD_USER_TOKEN_FAIL:\n    case AuthActions.REFRESH_USER_TOKEN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { ClientToken } from '../../models/token-types.model';\nimport { AuthActions } from '../actions/index';\nimport { AuthState, CLIENT_TOKEN_DATA } from '../auth-state';\nimport * as fromUserTokenReducer from './user-token.reducer';\n\nexport function getReducers(): ActionReducerMap<AuthState> {\n  return {\n    userToken: combineReducers({ token: fromUserTokenReducer.reducer }),\n    clientToken: loaderReducer<ClientToken>(CLIENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AuthState\n>> = new InjectionToken<ActionReducerMap<AuthState>>('AuthReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAuthState(\n  reducer: ActionReducer<AuthState, Action>\n): ActionReducer<AuthState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        userToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearAuthState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { AUTH_FEATURE } from './auth-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function authStoreConfigFactory(): StateConfig {\n  // if we want to reuse AUTH_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'auth.userToken.token.access_token': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.token_type': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.expiration_time': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.scope': StorageSyncType.LOCAL_STORAGE,\n          'auth.userToken.token.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(AUTH_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(authStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AuthStoreModule {}\n","import { ErrorModel } from './misc.model';\n\nexport interface Country {\n  isocode?: string;\n  name?: string;\n}\n\nexport enum CountryType {\n  BILLING = 'BILLING',\n  SHIPPING = 'SHIPPING',\n}\n\nexport interface Region {\n  countryIso?: string;\n  isocode?: string;\n  isocodeShort?: string;\n  name?: string;\n}\n\nexport interface Address {\n  companyName?: string;\n  country?: Country;\n  defaultAddress?: boolean;\n  email?: string;\n  firstName?: string;\n  formattedAddress?: string;\n  id?: string;\n  lastName?: string;\n  line1?: string;\n  line2?: string;\n  phone?: string;\n  postalCode?: string;\n  region?: Region;\n  shippingAddress?: boolean;\n  title?: string;\n  titleCode?: string;\n  town?: string;\n  visibleInAddressBook?: boolean;\n}\n\nexport interface AddressValidation {\n  decision?: string;\n  // TODO: Simplify with converter\n  errors?: { errors: ErrorModel[] };\n  suggestedAddresses?: Address[];\n}\n","import { Address } from './address.model';\nimport { Currency } from './misc.model';\nimport {\n  DeliveryMode,\n  OrderEntry,\n  PickupOrderEntryGroup,\n  PromotionOrderEntryConsumed,\n} from './order.model';\nimport { Price, Promotion } from './product.model';\n\nexport interface PromotionResult {\n  consumedEntries?: PromotionOrderEntryConsumed[];\n  description?: string;\n  promotion?: Promotion;\n}\n\nexport enum PromotionLocation {\n  ActiveCart = 'CART',\n  Checkout = 'CHECKOUT',\n  Order = 'ORDER',\n}\n\nexport interface Voucher {\n  appliedValue?: Price;\n  code?: string;\n  currency?: Currency;\n  description?: string;\n  freeShipping?: boolean;\n  name?: string;\n  value?: number;\n  valueFormatted?: string;\n  valueString?: string;\n  voucherCode?: string;\n}\n\nexport interface DeliveryOrderEntryGroup {\n  deliveryAddress?: Address;\n  entries?: OrderEntry[];\n  quantity?: number;\n  totalPriceWithTax?: Price;\n}\n\nexport interface Principal {\n  name?: string;\n  uid?: string;\n}\n\nexport interface CardType {\n  code?: string;\n  name?: string;\n}\n\nexport interface PaymentDetails {\n  accountHolderName?: string;\n  billingAddress?: Address;\n  cardNumber?: string;\n  cardType?: CardType;\n  cvn?: string;\n  defaultPayment?: boolean;\n  expiryMonth?: string;\n  expiryYear?: string;\n  id?: string;\n  issueNumber?: string;\n  saved?: boolean;\n  startMonth?: string;\n  startYear?: string;\n  subscriptionId?: string;\n}\n\nexport interface SaveCartResult {\n  savedCartData?: Cart;\n}\n\nexport interface Cart {\n  appliedOrderPromotions?: PromotionResult[];\n  appliedProductPromotions?: PromotionResult[];\n  appliedVouchers?: Voucher[];\n  calculated?: boolean;\n  code?: string;\n  deliveryAddress?: Address;\n  deliveryCost?: Price;\n  deliveryItemsQuantity?: number;\n  deliveryMode?: DeliveryMode;\n  deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n  description?: string;\n  entries?: OrderEntry[];\n  expirationTime?: Date;\n  guid?: string;\n  name?: string;\n  net?: boolean;\n  orderDiscounts?: Price;\n  paymentInfo?: PaymentDetails;\n  pickupItemsQuantity?: number;\n  pickupOrderGroups?: PickupOrderEntryGroup[];\n  potentialOrderPromotions?: PromotionResult[];\n  potentialProductPromotions?: PromotionResult[];\n  productDiscounts?: Price;\n  saveTime?: Date;\n  savedBy?: Principal;\n  site?: string;\n  store?: string;\n  subTotal?: Price;\n  totalDiscounts?: Price;\n  totalItems?: number;\n  totalPrice?: Price;\n  totalPriceWithTax?: Price;\n  totalTax?: Price;\n  totalUnitCount?: number;\n  user?: Principal;\n}\n\nexport interface CartModification {\n  deliveryModeChanged?: boolean;\n  entry?: OrderEntry;\n  quantity?: number;\n  quantityAdded?: number;\n  statusCode?: string;\n  statusMessage?: string;\n}\n","export interface CmsComponent {\n  modifiedTime?: Date;\n  name?: string;\n  otherProperties?: any;\n  typeCode?: string;\n  uid?: string;\n}\n\nexport enum PageType {\n  CONTENT_PAGE = 'ContentPage',\n  PRODUCT_PAGE = 'ProductPage',\n  CATEGORY_PAGE = 'CategoryPage',\n  CATALOG_PAGE = 'CatalogPage',\n}\n\nexport interface CmsLinkComponent extends CmsComponent {\n  url?: string;\n  container?: boolean;\n  external?: boolean;\n  contentPage?: string;\n  contentPageLabelOrId?: string;\n  linkName?: string;\n  target?: boolean;\n}\n\nexport interface CmsSiteContextSelectorComponent extends CmsComponent {\n  context?: string;\n}\n\nexport interface CmsSearchBoxComponent extends CmsComponent {\n  container?: boolean;\n  maxSuggestions?: number;\n  maxProducts?: number;\n  displaySuggestions?: boolean;\n  displayProducts?: boolean;\n  displayProductImages?: boolean;\n  waitTimeBeforeRequest?: number;\n  minCharactersBeforeRequest?: number;\n}\n\nexport interface CmsParagraphComponent extends CmsComponent {\n  content?: string;\n  container?: string;\n  title?: string;\n}\n\nexport interface CMSTabParagraphContainer extends CmsComponent {\n  container?: string;\n  components?: string;\n}\n\nexport interface CmsBannerComponentMedia {\n  altText?: string;\n  code?: string;\n  mime?: string;\n  url?: string;\n}\n\nexport interface CmsResponsiveBannerComponentMedia {\n  desktop?: CmsBannerComponentMedia;\n  mobile?: CmsBannerComponentMedia;\n  tablet?: CmsBannerComponentMedia;\n  widescreen?: CmsBannerComponentMedia;\n}\n\nexport interface CmsBannerComponent extends CmsComponent {\n  headline?: string;\n  content?: string;\n  container?: string;\n  media?: CmsBannerComponentMedia | CmsResponsiveBannerComponentMedia;\n  urlLink?: string;\n  external?: string;\n}\n\nexport enum CmsBannerCarouselEffect {\n  FADE = 'FADE',\n  ZOOM = 'ZOOM',\n  CURTAIN = 'CURTAINX',\n  TURNDOWN = 'TURNDOWN',\n}\n\nexport interface CmsBannerCarouselComponent extends CmsComponent {\n  banners?: string;\n  effect?: CmsBannerCarouselEffect;\n}\n\nexport interface CmsProductCarouselComponent extends CmsComponent {\n  title?: string;\n  productCodes?: string;\n  container?: string;\n  popup?: string;\n  scroll?: string;\n}\n\nexport interface CmsProductReferencesComponent extends CmsComponent {\n  title?: string;\n  displayProductTitles?: string;\n  displayProductPrices?: string;\n  maximumNumberProducts?: number;\n  productReferenceTypes?: string;\n  container?: string;\n}\n\nexport interface CmsMiniCartComponent extends CmsComponent {\n  container?: string;\n  shownProductCount?: string;\n  title?: string;\n  totalDisplay?: string;\n  lightboxBannerComponent?: CmsBannerComponent;\n}\n\n// TODO: Upgrade model when Breadcrumbs will be finally used in project\nexport interface CmsBreadcrumbsComponent extends CmsComponent {\n  container?: string;\n}\n\nexport interface CmsNavigationNode {\n  uid?: string;\n  title?: string;\n  children?: Array<CmsNavigationNode>;\n  entries?: Array<CmsNavigationEntry>;\n}\n\nexport interface CmsNavigationEntry {\n  itemId?: string;\n  itemSuperType?: string;\n  itemType?: string;\n}\n\nexport interface CmsNavigationComponent extends CmsComponent {\n  container?: string;\n  styleClass?: string;\n  wrapAfter?: string;\n  notice?: string;\n  showLanguageCurrency?: string;\n  navigationNode?: CmsNavigationNode;\n}\n\nexport interface CmsProductFacetNavigationComponent extends CmsComponent {\n  container?: string;\n  activeFacetValueCode?: string;\n  searchResult?: string;\n  minPerFacet?: string;\n}\n","export interface ConsentTemplate {\n  id?: string;\n  name?: string;\n  description?: string;\n  version?: number;\n  currentConsent?: Consent;\n}\n\nexport interface Consent {\n  code?: string;\n  consentGivenDate?: Date;\n  consentWithdrawnDate?: Date;\n}\n\nexport interface AnonymousConsent {\n  templateCode?: string;\n  version?: number;\n  consentState?: ANONYMOUS_CONSENT_STATUS;\n}\n\nexport enum ANONYMOUS_CONSENT_STATUS {\n  GIVEN = 'GIVEN',\n  WITHDRAWN = 'WITHDRAWN',\n}\n","export interface Images {\n  [imageType: string]: ImageGroup | ImageGroup[];\n}\n\nexport interface Image {\n  altText?: string;\n  format?: string;\n  galleryIndex?: number;\n  imageType?: ImageType;\n  url?: string;\n}\n\nexport enum ImageType {\n  PRIMARY = 'PRIMARY',\n  GALLERY = 'GALLERY',\n}\n\nexport interface ImageGroup {\n  [format: string]: Image;\n}\n","import { Image, Images } from './image.model';\nimport { User } from './misc.model';\n\nexport interface VariantOptionQualifier {\n  image?: Image;\n  name?: string;\n  qualifier?: VariantQualifier;\n  value?: string;\n}\n\nexport interface PromotionRestriction {\n  description?: string;\n  restrictionType?: string;\n}\n\nexport interface FeatureUnit {\n  name?: string;\n  symbol?: string;\n  unitType?: string;\n}\n\nexport interface FeatureValue {\n  value?: string;\n}\n\nexport interface Feature {\n  code?: string;\n  comparable?: boolean;\n  description?: string;\n  featureUnit?: FeatureUnit;\n  featureValues?: FeatureValue[];\n  name?: string;\n  range?: boolean;\n  type?: string;\n}\n\nexport interface VariantCategory {\n  hasImage?: boolean;\n  name?: string;\n  priority?: number;\n}\n\nexport interface VariantValueCategory {\n  name?: string;\n  sequence?: number;\n  superCategories?: VariantCategory[];\n}\n\nexport enum VariantType {\n  SIZE = 'ApparelSizeVariantProduct',\n  STYLE = 'ApparelStyleVariantProduct',\n  COLOR = 'ElectronicsColorVariantProduct',\n}\n\nexport enum PriceType {\n  BUY = 'BUY',\n  FROM = 'FROM',\n}\n\nexport interface Price {\n  currencyIso?: string;\n  formattedValue?: string;\n  maxQuantity?: number;\n  minQuantity?: number;\n  priceType?: PriceType;\n  value?: number;\n}\n\nexport interface Stock {\n  stockLevel?: number;\n  stockLevelStatus?: string;\n}\n\nexport interface VariantOption {\n  code?: string;\n  priceData?: Price;\n  stock?: Stock;\n  url?: string;\n  variantOptionQualifiers?: VariantOptionQualifier[];\n}\n\nexport interface Promotion {\n  code?: string;\n  couldFireMessages?: string[];\n  description?: string;\n  enabled?: boolean;\n  endDate?: Date;\n  firedMessages?: string[];\n  priority?: number;\n  productBanner?: Image;\n  promotionGroup?: string;\n  promotionType?: string;\n  restrictions?: PromotionRestriction[];\n  startDate?: Date;\n  title?: string;\n}\n\nexport interface Category {\n  code?: string;\n  name?: string;\n  image?: Image;\n  url?: string;\n}\n\nexport interface Classification {\n  code?: string;\n  features?: Feature[];\n  name?: string;\n}\n\nexport interface FutureStock {\n  date?: Date;\n  formattedDate?: string;\n  stock?: Stock;\n}\n\nexport interface PriceRange {\n  maxPrice?: Price;\n  minPrice?: Price;\n}\n\nexport interface ProductReference {\n  description?: string;\n  preselected?: boolean;\n  quantity?: number;\n  referenceType?: string;\n  target?: Product;\n}\n\nexport interface Review {\n  alias?: string;\n  comment?: string;\n  date?: Date;\n  headline?: string;\n  id?: string;\n  principal?: User;\n  rating?: number;\n}\n\nexport interface VariantMatrixElement {\n  elements?: VariantMatrixElement[];\n  isLeaf?: boolean;\n  parentVariantCategory?: VariantCategory;\n  variantOption?: VariantOption;\n  variantValueCategory?: VariantValueCategory;\n}\n\nexport interface ProductReferences {\n  [referenceType: string]: ProductReference[];\n}\n\nexport interface BaseOption {\n  options?: VariantOption[];\n  selected?: VariantOption;\n  variantType?: VariantType;\n}\n\nexport interface Product {\n  availableForPickup?: boolean;\n  averageRating?: number;\n  baseOptions?: BaseOption[];\n  baseProduct?: string;\n  categories?: Category[];\n  classifications?: Classification[];\n  code?: string;\n  description?: string;\n  futureStocks?: FutureStock[];\n  images?: Images;\n  manufacturer?: string;\n  multidimensional?: boolean;\n  name?: string;\n  nameHtml?: string;\n  numberOfReviews?: number;\n  potentialPromotions?: Promotion[];\n  price?: Price;\n  priceRange?: PriceRange;\n  productReferences?: ProductReferences;\n  purchasable?: boolean;\n  reviews?: Review[];\n  stock?: Stock;\n  summary?: string;\n  url?: string;\n  variantMatrix?: VariantMatrixElement[];\n  variantOptions?: VariantOption[];\n  variantType?: VariantType;\n  volumePrices?: Price[];\n  volumePricesFlag?: boolean;\n}\n\nexport enum VariantQualifier {\n  SIZE = 'size',\n  STYLE = 'style',\n  COLOR = 'color',\n  THUMBNAIL = 'thumbnail',\n  PRODUCT = 'product',\n  ROLLUP_PROPERTY = 'rollupProperty',\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAuthConfig } from './config/default-auth-config';\nimport { interceptors } from './http-interceptors/index';\nimport { AuthServices } from './services/index';\nimport { AuthStoreModule } from './store/auth-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AuthStoreModule],\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        provideDefaultConfig(defaultAuthConfig),\n        ...interceptors,\n        ...AuthServices,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RoutingService } from '../../routing/facade/routing.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRedirectService {\n  /**\n   * This service is responsible for redirecting to the last page before authorization. \"The last page\" can be:\n   * 1. Just the previously opened page; or\n   * 2. The page that we just tried to open, but AuthGuard cancelled it\n   *\n   * For example:\n   * 1. The user opens the product page, then clicks /login link and signs in\n   *    -> Then we should redirect to the product page; or\n   * 2. The user opens the product page, then he clicks /my-account link,\n   *    but is automatically redirected to the login page by the AuthGuard, and he signs in\n   *    -> Then we should redirect to the my-account page, not the product page\n   */\n  constructor(private routing: RoutingService, private router: Router) {}\n\n  private redirectUrl: string;\n  private ignoredUrls = new Set<string>();\n  private lastAuthGuardNavigation: {\n    url: string;\n    navigationId: number;\n  };\n\n  redirect() {\n    if (this.redirectUrl === undefined) {\n      this.routing.go('/');\n    } else {\n      this.routing.goByUrl(this.redirectUrl);\n    }\n    this.redirectUrl = undefined;\n    this.lastAuthGuardNavigation = undefined;\n  }\n\n  reportAuthGuard() {\n    const { url, navigationId } = this.getCurrentNavigation();\n    this.lastAuthGuardNavigation = { url, navigationId };\n    this.redirectUrl = url;\n  }\n\n  reportNotAuthGuard() {\n    const { url, initialUrl, navigationId } = this.getCurrentNavigation();\n\n    this.ignoredUrls.add(url);\n\n    // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)\n    if (!this.ignoredUrls.has(initialUrl)) {\n      // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent\n      // than the last opened page\n      if (\n        !this.lastAuthGuardNavigation ||\n        this.lastAuthGuardNavigation.navigationId < navigationId - 1\n      ) {\n        this.redirectUrl = initialUrl;\n        this.lastAuthGuardNavigation = undefined;\n      }\n    }\n  }\n\n  private getCurrentNavigation(): {\n    navigationId: number;\n    url: string;\n    initialUrl: string;\n  } {\n    const initialUrl = this.router.url;\n    const navigation = this.router.getCurrentNavigation();\n    const url = this.router.serializeUrl(navigation.finalUrl);\n    return {\n      navigationId: navigation.id,\n      url,\n      initialUrl,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { UserToken } from '../models/token-types.model';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token: UserToken) => {\n        if (!token.access_token) {\n          this.authRedirectService.reportAuthGuard();\n          this.routingService.go({ cxRoute: 'login' });\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { AuthService } from '../facade/auth.service';\nimport { AuthRedirectService } from './auth-redirect.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    this.authRedirectService.reportNotAuthGuard();\n\n    // redirect, if user is already logged in:\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Product } from './product.model';\nimport { Pagination, Sort } from './unused.model';\n\nexport interface ProductInterestEntry {\n  interestType?: NotificationType;\n  dateAdded?: string;\n  expirationDate?: string;\n}\n\nexport interface ProductInterestEntryRelation {\n  product?: Product;\n  productInterestEntry?: ProductInterestEntry[];\n}\n\nexport interface ProductInterestSearchResult {\n  results?: ProductInterestEntryRelation[];\n  sorts?: Sort[];\n  pagination?: Pagination;\n}\n\nexport enum NotificationType {\n  BACK_IN_STOCK = 'BACK_IN_STOCK',\n}\n","import { Injectable, StaticProvider } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { AuthConfig } from '../../auth/config/auth-config';\nimport { KymaConfig } from '../../kyma/config/kyma-config';\nimport { OccConfig } from '../../occ/config/occ-config';\nimport { Config } from '../../config/config.module';\n\nexport interface StandardCmsComponentConfig {\n  CMSSiteContextComponent?: CmsComponentMapping;\n  CMSLinkComponent?: CmsComponentMapping;\n  SimpleResponsiveBannerComponent?: CmsComponentMapping;\n  SimpleBannerComponent?: CmsComponentMapping;\n  BannerComponent?: CmsComponentMapping;\n  CMSParagraphComponent?: CmsComponentMapping;\n  BreadcrumbComponent?: CmsComponentMapping;\n  NavigationComponent?: CmsComponentMapping;\n  FooterNavigationComponent?: CmsComponentMapping;\n  CategoryNavigationComponent?: CmsComponentMapping;\n  ProductAddToCartComponent?: CmsComponentMapping;\n  MiniCartComponent?: CmsComponentMapping;\n  ProductCarouselComponent?: CmsComponentMapping;\n  SearchBoxComponent?: CmsComponentMapping;\n  ProductReferencesComponent?: CmsComponentMapping;\n  CMSTabParagraphComponent?: CmsComponentMapping;\n  LoginComponent?: CmsComponentMapping;\n}\n\nexport interface JspIncludeCmsComponentConfig {\n  AccountAddressBookComponent?: CmsComponentMapping;\n  ForgotPasswordComponent?: CmsComponentMapping;\n  ResetPasswordComponent?: CmsComponentMapping;\n  ProductDetailsTabComponent?: CmsComponentMapping;\n  ProductSpecsTabComponent?: CmsComponentMapping;\n  ProductReviewsTabComponent?: CmsComponentMapping;\n}\n\nexport const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';\nexport const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';\n\nexport interface CmsComponentMapping {\n  component?: any;\n  providers?: StaticProvider[];\n  childRoutes?: Routes;\n  disableSSR?: boolean;\n  i18nKeys?: string[];\n  guards?: any[];\n\n  /**\n   * DeferLoading can be specified globally, but also per component.\n   * Some components require direct loading while it's not initially\n   * in the viewport.\n   */\n  deferLoading?: DeferLoadingStrategy;\n}\n\n/** Strategy to control the loading strategy of DOM elements. */\nexport enum DeferLoadingStrategy {\n  /** Defers loading of DOM elements until element is near/in the users view port */\n  DEFER = 'DEFERRED-LOADING',\n  /** Renders the DOM instantly without being concerned with the view port */\n  INSTANT = 'INSTANT-LOADING',\n}\n\nexport interface CMSComponentConfig\n  extends StandardCmsComponentConfig,\n    JspIncludeCmsComponentConfig {\n  [componentType: string]: CmsComponentMapping;\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsConfig extends OccConfig\n  implements AuthConfig, KymaConfig {\n  authentication?: {\n    client_id?: string;\n    client_secret?: string;\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n\n  cmsComponents?: CMSComponentConfig;\n}\n","import { AnonymousConsent, ConsentTemplate } from '../../model/consent.model';\nimport { StateUtils } from '../../state';\n\nexport const ANONYMOUS_CONSENTS_STORE_FEATURE = 'anonymous-consents';\nexport const ANONYMOUS_CONSENTS = '[Anonymous Consents] Anonymous Consents';\n\nexport interface StateWithAnonymousConsents {\n  [ANONYMOUS_CONSENTS_STORE_FEATURE]: AnonymousConsentsState;\n}\n\nexport interface AnonymousConsentsState {\n  templates: StateUtils.LoaderState<ConsentTemplate[]>;\n  consents: AnonymousConsent[];\n  ui: {\n    bannerDismissed: boolean;\n    updated: boolean;\n  };\n}\n","import {\n  AnonymousConsent,\n  ConsentTemplate,\n} from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ANONYMOUS_CONSENTS } from '../anonymous-consents-state';\n\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Load Anonymous Consent Templates';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS =\n  '[Anonymous Consents] Load Anonymous Consent Templates Success';\nexport const LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL =\n  '[Anonymous Consents] Load Anonymous Consent Templates Fail';\nexport const RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES =\n  '[Anonymous Consents] Reset Load Anonymous Consent Templates';\n\nexport const GET_ALL_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Get All Anonymous Consents';\nexport const GET_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Get Anonymous Consent';\nexport const SET_ANONYMOUS_CONSENTS =\n  '[Anonymous Consents] Set Anonymous Consents';\nexport const GIVE_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Give Anonymous Consent';\nexport const WITHDRAW_ANONYMOUS_CONSENT =\n  '[Anonymous Consents] Withdraw Anonymous Consent';\n\nexport const TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED =\n  '[Anonymous Consents] Toggle Anonymous Consents Banner Dismissed';\nexport const TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED =\n  '[Anonymous Consents] Anonymous Consent Templates Updated';\n\nexport class LoadAnonymousConsentTemplates extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class LoadAnonymousConsentTemplatesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\nexport class LoadAnonymousConsentTemplatesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ANONYMOUS_CONSENT_TEMPLATES_FAIL;\n  constructor(payload: any) {\n    super(ANONYMOUS_CONSENTS, payload);\n  }\n}\n\nexport class ResetLoadAnonymousConsentTemplates extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_ANONYMOUS_CONSENT_TEMPLATES;\n  constructor() {\n    super(ANONYMOUS_CONSENTS);\n  }\n}\n\nexport class GetAllAnonymousConsents {\n  readonly type = GET_ALL_ANONYMOUS_CONSENTS;\n  constructor() {}\n}\n\nexport class GetAnonymousConsent {\n  readonly type = GET_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class SetAnonymousConsents {\n  readonly type = SET_ANONYMOUS_CONSENTS;\n  constructor(public payload: AnonymousConsent[]) {}\n}\n\nexport class GiveAnonymousConsent {\n  readonly type = GIVE_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class WithdrawAnonymousConsent {\n  readonly type = WITHDRAW_ANONYMOUS_CONSENT;\n  constructor(public templateCode: string) {}\n}\n\nexport class ToggleAnonymousConsentsBannerDissmissed {\n  readonly type = TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED;\n  constructor(public dismissed: boolean) {}\n}\n\nexport class ToggleAnonymousConsentTemplatesUpdated {\n  readonly type = TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED;\n  constructor(public updated: boolean) {}\n}\n\nexport type AnonymousConsentsActions =\n  | LoadAnonymousConsentTemplates\n  | LoadAnonymousConsentTemplatesSuccess\n  | LoadAnonymousConsentTemplatesFail\n  | ResetLoadAnonymousConsentTemplates\n  | GetAllAnonymousConsents\n  | SetAnonymousConsents\n  | GetAnonymousConsent\n  | GiveAnonymousConsent\n  | WithdrawAnonymousConsent\n  | ToggleAnonymousConsentsBannerDissmissed\n  | ToggleAnonymousConsentTemplatesUpdated;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS_STORE_FEATURE,\n  StateWithAnonymousConsents,\n} from '../anonymous-consents-state';\n\nexport const getAnonymousConsentState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsentsState\n> = createFeatureSelector<AnonymousConsentsState>(\n  ANONYMOUS_CONSENTS_STORE_FEATURE\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesState: MemoizedSelector<\n  StateWithAnonymousConsents,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getAnonymousConsentState, (state) => state.templates);\n\nexport const getAnonymousConsentTemplatesValue: MemoizedSelector<\n  StateWithAnonymousConsents,\n  ConsentTemplate[]\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderValueSelector\n);\n\nexport const getAnonymousConsentTemplatesLoading: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderLoadingSelector\n);\n\nexport const getAnonymousConsentTemplatesSuccess: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderSuccessSelector\n);\n\nexport const getAnonymousConsentTemplatesError: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentTemplatesState,\n  StateUtils.loaderErrorSelector\n);\n\nexport const getAnonymousConsentTemplate = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, ConsentTemplate> => {\n  return createSelector(getAnonymousConsentTemplatesValue, (templates) => {\n    return templates\n      ? templates.find((template) => template.id === templateCode)\n      : null;\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsentTemplatesUpdate: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(getAnonymousConsentState, (state) => state.ui.updated);\n\nexport const getAnonymousConsentsBannerDismissed: MemoizedSelector<\n  StateWithAnonymousConsents,\n  boolean\n> = createSelector(\n  getAnonymousConsentState,\n  (state) => state.ui.bannerDismissed\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AnonymousConsent } from '../../../model/consent.model';\nimport { StateWithAnonymousConsents } from '../anonymous-consents-state';\nimport { getAnonymousConsentState } from './feature.selector';\n\nexport const getAnonymousConsents: MemoizedSelector<\n  StateWithAnonymousConsents,\n  AnonymousConsent[]\n> = createSelector(getAnonymousConsentState, (state) => state.consents);\n\nexport const getAnonymousConsentByTemplateCode = (\n  templateCode: string\n): MemoizedSelector<StateWithAnonymousConsents, AnonymousConsent> =>\n  createSelector(getAnonymousConsents, (consents) =>\n    consents.find((consent) => consent.templateCode === templateCode)\n  );\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '../../model/index';\nimport { AnonymousConsentsActions } from '../store/actions/index';\nimport { StateWithAnonymousConsents } from '../store/anonymous-consents-state';\nimport { AnonymousConsentsSelectors } from '../store/selectors/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsService {\n  constructor(\n    protected store: Store<StateWithAnonymousConsents>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves the anonymous consent templates.\n   */\n  loadTemplates(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.LoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Conditionally triggers the load of the anonymous consent templates if:\n   *   - `loadIfMissing` parameter is set to `true`\n   *   - the `templates` in the store are `undefined`\n   *\n   * Othewise it just returns the value from the store.\n   *\n   * @param loadIfMissing setting to `true` will trigger the load of the templates if the currently stored templates are `undefined`\n   */\n  getTemplates(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue),\n        withLatestFrom(this.getLoadTemplatesLoading()),\n        filter(([_templates, loading]) => !loading),\n        tap(([templates, _loading]) => {\n          if (!Boolean(templates)) {\n            this.loadTemplates();\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(\n        select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesValue)\n      )\n    );\n  }\n\n  /**\n   * Returns the anonymous consent templates with the given template code.\n   * @param templateCode a template code by which to filter anonymous consent templates.\n   */\n  getTemplate(templateCode: string): Observable<ConsentTemplate> {\n    return this.store.pipe(\n      select(\n        AnonymousConsentsSelectors.getAnonymousConsentTemplate(templateCode)\n      )\n    );\n  }\n\n  /**\n   * Returns an indicator for the loading status for the anonymous consent templates.\n   */\n  getLoadTemplatesLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesLoading)\n    );\n  }\n\n  /**\n   * Returns an indicator for the success status for the anonymous consent templates.\n   */\n  getLoadTemplatesSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesSuccess)\n    );\n  }\n\n  /**\n   * Returns an indicator for the error status for the anonymous consent templates.\n   */\n  getLoadTemplatesError(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesError)\n    );\n  }\n\n  /**\n   * Resets the loading, success and error indicators for the anonymous consent templates.\n   */\n  resetLoadTemplatesState(): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ResetLoadAnonymousConsentTemplates()\n    );\n  }\n\n  /**\n   * Returns all the anonymous consents.\n   */\n  getConsents(): Observable<AnonymousConsent[]> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsents)\n    );\n  }\n\n  /**\n   * Puts the provided anonymous consents into the store.\n   */\n  setConsents(consents: AnonymousConsent[]): void {\n    return this.store.dispatch(\n      new AnonymousConsentsActions.SetAnonymousConsents(consents)\n    );\n  }\n\n  /**\n   * Returns the anonymous consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getTemplates(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter anonymous consent templates.\n   */\n  getConsent(templateId: string): Observable<AnonymousConsent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter((authenticated) => !authenticated),\n      tap(() => this.getTemplates(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(\n            AnonymousConsentsSelectors.getAnonymousConsentByTemplateCode(\n              templateId\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * Give a consent for the given `templateCode`\n   * @param templateCode for which to give the consent\n   */\n  giveConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.GiveAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to given.\n   */\n  giveAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.giveConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is given.\n   * @param consent a consent to test\n   */\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN;\n  }\n\n  /**\n   * Withdraw a consent for the given `templateCode`\n   * @param templateCode for which to withdraw the consent\n   */\n  withdrawConsent(templateCode: string): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.WithdrawAnonymousConsent(templateCode)\n    );\n  }\n\n  /**\n   * Sets all the anonymous consents' state to withdrawn.\n   */\n  withdrawAllConsents(): Observable<ConsentTemplate[]> {\n    return this.getTemplates(true).pipe(\n      tap((templates) =>\n        templates.forEach((template) => this.withdrawConsent(template.id))\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if the provided `consent` is withdrawn.\n   * @param consent a consent to test\n   */\n  isConsentWithdrawn(consent: AnonymousConsent): boolean {\n    return (\n      consent && consent.consentState === ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n    );\n  }\n\n  /**\n   * Toggles the dismissed state of the anonymous consents banner.\n   * @param dismissed the banner will be dismissed if `true` is passed, otherwise it will be visible.\n   */\n  toggleBannerDismissed(dismissed: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed(\n        dismissed\n      )\n    );\n    if (dismissed) {\n      this.toggleTemplatesUpdated(false);\n    }\n  }\n\n  /**\n   * Returns `true` if the banner was dismissed, `false` otherwise.\n   */\n  isBannerDismissed(): Observable<boolean> {\n    return this.store.pipe(\n      select(AnonymousConsentsSelectors.getAnonymousConsentsBannerDismissed)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent templates were updated on the back-end.\n   * If the templates are not present in the store, it triggers the load.\n   */\n  getTemplatesUpdated(): Observable<boolean> {\n    return this.getTemplates(true).pipe(\n      switchMap(() =>\n        this.store.pipe(\n          select(AnonymousConsentsSelectors.getAnonymousConsentTemplatesUpdate)\n        )\n      )\n    );\n  }\n\n  /**\n   * Toggles the `updated` slice of the state\n   * @param updated\n   */\n  toggleTemplatesUpdated(updated: boolean): void {\n    this.store.dispatch(\n      new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n        updated\n      )\n    );\n  }\n\n  /**\n   * Returns `true` if either the banner is not dismissed or if the templates were updated on the back-end.\n   * Otherwise, it returns `false`.\n   */\n  isBannerVisible(): Observable<boolean> {\n    return combineLatest([\n      this.isBannerDismissed(),\n      this.getTemplatesUpdated(),\n    ]).pipe(map(([dismissed, updated]) => !dismissed || updated));\n  }\n\n  /**\n   * Returns `true` if there's a missmatch in template versions between the provided `currentTemplates` and `newTemplates`\n   * @param currentTemplates current templates to check\n   * @param newTemplates new templates to check\n   */\n  detectUpdatedTemplates(\n    currentTemplates: ConsentTemplate[],\n    newTemplates: ConsentTemplate[]\n  ): boolean {\n    if (newTemplates.length !== currentTemplates.length) {\n      return true;\n    }\n\n    for (let i = 0; i < newTemplates.length; i++) {\n      const newTemplate = newTemplates[i];\n      const currentTemplate = currentTemplates[i];\n      if (newTemplate.version !== currentTemplate.version) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Serializes using `JSON.stringify()` and encodes using `encodeURIComponent()` methods\n   * @param consents to serialize and encode\n   */\n  serializeAndEncode(consents: AnonymousConsent[]): string {\n    if (!consents) {\n      return '';\n    }\n    const serialized = JSON.stringify(consents);\n    const encoded = encodeURIComponent(serialized);\n    return encoded;\n  }\n\n  /**\n   * Decodes using `decodeURIComponent()` and deserializes using `JSON.parse()`\n   * @param rawConsents to decode an deserialize\n   */\n  decodeAndDeserialize(rawConsents: string): AnonymousConsent[] {\n    const decoded = decodeURIComponent(rawConsents);\n    const unserialized = JSON.parse(decoded) as AnonymousConsent[];\n    return unserialized;\n  }\n\n  /**\n   *\n   * Compares the given `newConsents` and `previousConsents` and returns `true` if there are differences (the `newConsents` are updates).\n   * Otherwise it returns `false`.\n   *\n   * @param newConsents new consents to compare\n   * @param previousConsents old consents to compare\n   */\n  consentsUpdated(\n    newConsents: AnonymousConsent[],\n    previousConsents: AnonymousConsent[]\n  ): boolean {\n    const newRawConsents = this.serializeAndEncode(newConsents);\n    const previousRawConsents = this.serializeAndEncode(previousConsents);\n    return newRawConsents !== previousRawConsents;\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccAsmConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        asmCustomerSearch: '/assistedservicewebservices/customers/search',\n      },\n    },\n  },\n};\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable, InjectionToken, Injector } from '@angular/core';\nimport { Observable, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Converter is used to convert source data model to target data model.\n * By convention, we distinguish two flows:\n *   - *Normalize* is the conversion from backend models to UI models\n *   - *Serialize* is the conversion of UI models to backend models (in case of submitting data to the backend).\n *\n * Converters can be stacked together to to apply decoupled customizations\n */\nexport interface Converter<S, T> {\n  /**\n   * Convert converts source model to target model. Can use optional target parameter,\n   * used in case of stacking multiple converters (for example, to implement populator pattern).\n   *\n   * @param source Source data model\n   * @param target Optional, partially converted target model\n   */\n  convert(source: S, target?: T): T;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConverterService {\n  constructor(protected injector: Injector) {}\n\n  private converters: Map<\n    InjectionToken<Converter<any, any>>,\n    Converter<any, any>[]\n  > = new Map();\n\n  private getConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): Converter<S, T>[] {\n    if (!this.converters.has(injectionToken)) {\n      const converters = this.injector.get<Converter<S, T>[]>(\n        injectionToken,\n        []\n      );\n      if (!Array.isArray(converters)) {\n        console.warn(\n          'Converter must be multi-provided, please use \"multi: true\" for',\n          injectionToken.toString()\n        );\n      }\n      this.converters.set(injectionToken, converters);\n    }\n\n    return this.converters.get(injectionToken);\n  }\n\n  /**\n   * Will return true if converters for specified token were provided\n   */\n  hasConverters<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): boolean {\n    const converters = this.getConverters(injectionToken);\n    return Array.isArray(converters) && converters.length > 0;\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream\n   */\n  pipeable<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S, T> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S) => this.convertSource(model, injectionToken));\n    } else {\n      return (observable: Observable<any>) => observable as Observable<T>;\n    }\n  }\n\n  /**\n   * Pipeable operator to apply converter logic in a observable stream to collection of items\n   */\n  pipeableMany<S, T>(\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): OperatorFunction<S[], T[]> {\n    if (this.hasConverters(injectionToken)) {\n      return map((model: S[]) => this.convertMany(model, injectionToken));\n    } else {\n      return (observable: Observable<any[]>) => observable as Observable<T[]>;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to source data\n   */\n  convert<S, T>(source: S, injectionToken: InjectionToken<Converter<S, T>>): T {\n    if (this.hasConverters(injectionToken)) {\n      return this.convertSource(source, injectionToken);\n    } else {\n      return source as any;\n    }\n  }\n\n  /**\n   * Apply converter logic specified by injection token to a collection\n   */\n  convertMany<S, T>(\n    sources: S[],\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T[] {\n    if (this.hasConverters(injectionToken) && Array.isArray(sources)) {\n      return sources.map((source) =>\n        this.convertSource(source, injectionToken)\n      );\n    } else {\n      return sources as any[];\n    }\n  }\n\n  private convertSource<S, T>(\n    source: S,\n    injectionToken: InjectionToken<Converter<S, T>>\n  ): T {\n    return this.getConverters(injectionToken).reduce((target, converter) => {\n      return converter.convert(source, target);\n    }, undefined as T);\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsmConfig } from '../../../asm/config/asm-config';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { CUSTOMER_SEARCH_PAGE_NORMALIZER } from '../../../asm/connectors/converters';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../../asm/models/asm.models';\nimport { BaseSiteService } from '../../../site-context/facade/base-site.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccAsmAdapter implements AsmAdapter {\n  private activeBaseSite: string;\n\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService,\n    protected config: AsmConfig,\n    protected baseSiteService: BaseSiteService\n  ) {\n    this.baseSiteService\n      .getActive()\n      .subscribe((value) => (this.activeBaseSite = value));\n  }\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    const headers = InterceptorUtil.createHeader(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      true,\n      new HttpHeaders()\n    );\n    let params: HttpParams = new HttpParams()\n      .set('baseSite', this.activeBaseSite)\n      .set('sort', 'byNameAsc');\n\n    if (typeof options['query'] !== 'undefined') {\n      params = params.set('query', '' + options.query);\n    }\n\n    if (typeof options['pageSize'] !== 'undefined') {\n      params = params.set('pageSize', '' + options.pageSize);\n    }\n\n    const url = this.occEndpointsService.getRawEndpoint('asmCustomerSearch');\n\n    return this.http\n      .get<CustomerSearchPage>(url, { headers, params })\n      .pipe(this.converterService.pipeable(CUSTOMER_SEARCH_PAGE_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AsmAdapter } from '../../../asm/connectors/asm.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { defaultOccAsmConfig } from './default-occ-asm-config';\nimport { OccAsmAdapter } from './occ-asm.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccAsmConfig),\n    {\n      provide: AsmAdapter,\n      useClass: OccAsmAdapter,\n    },\n  ],\n})\nexport class AsmOccModule {}\n","import { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\n\nexport abstract class CartAdapter {\n  /**\n   * Abstract method used to load all carts\n   *\n   * @param userId\n   */\n  abstract loadAll(userId: string): Observable<Cart[]>;\n\n  /**\n   * Abstract method used to load cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract load(userId: string, cartId: string): Observable<Cart>;\n\n  /**\n   * Abstract method used to create cart. If toMergeCartGuid is specified, cart will be merged with existing one\n   *\n   * @param userId\n   * @param oldCartId\n   * @param toMergeCartGuid\n   */\n  abstract create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart>;\n\n  /**\n   * Abstract method used to delete cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract delete(userId: string, cartId: string): Observable<{}>;\n\n  /**\n   * Abstract method to assign an email to the cart. This step is required to make a guest checkout\n   * @param userId\n   * @param cartId\n   * @param email\n   */\n  abstract addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Cart } from '../../../model/cart.model';\n\nexport const CART_NORMALIZER = new InjectionToken<Converter<any, Cart>>(\n  'CartNormalizer'\n);\n","import { Observable } from 'rxjs';\nimport { CartModification } from '../../../model/cart.model';\n\nexport abstract class CartEntryAdapter {\n  /**\n   * Abstract method used to add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to update entry in cart\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param qty\n   * @param pickupStore\n   */\n  abstract update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification>;\n\n  /**\n   * Abstract method used to remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any>;\n}\n","import { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\n\nexport abstract class SaveCartAdapter {\n  /**\n   * Abstract method used to save a cart\n   *\n   * @param userId: string\n   * @param cartId: string\n   * @param saveCartName?: string\n   * @param saveCartDescription?: string\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult>;\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class CartVoucherAdapter {\n  /**\n   * Abstract method used to apply voucher to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to remove voucher from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param voucherId\n   */\n  abstract remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Product } from '../../../model/product.model';\n\nexport const PRODUCT_NORMALIZER = new InjectionToken<Converter<any, Product>>(\n  'ProductNormalizer'\n);\n","import { Injectable } from '@angular/core';\nimport { Cart } from '../../../../model/cart.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCartNormalizer implements Converter<Occ.Cart, Cart> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Cart, target?: Cart): Cart {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.entries) {\n      target.entries = source.entries.map((entry) => ({\n        ...entry,\n        product: this.converter.convert(entry.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    this.removeDuplicatePromotions(source, target);\n    return target;\n  }\n\n  /**\n   * Remove all duplicate promotions\n   */\n  private removeDuplicatePromotions(source: any, target: Cart): void {\n    if (source && source.potentialOrderPromotions) {\n      target.potentialOrderPromotions = this.removeDuplicateItems(\n        source.potentialOrderPromotions\n      );\n    }\n\n    if (source && source.potentialProductPromotions) {\n      target.potentialProductPromotions = this.removeDuplicateItems(\n        source.potentialProductPromotions\n      );\n    }\n\n    if (source && source.appliedOrderPromotions) {\n      target.appliedOrderPromotions = this.removeDuplicateItems(\n        source.appliedOrderPromotions\n      );\n    }\n\n    if (source && source.appliedProductPromotions) {\n      target.appliedProductPromotions = this.removeDuplicateItems(\n        source.appliedProductPromotions\n      );\n    }\n  }\n\n  private removeDuplicateItems(itemList: any[]): any[] {\n    return itemList.filter((p, i, a) => {\n      const b = a.map((el) => JSON.stringify(el));\n      return i === b.indexOf(JSON.stringify(p));\n    });\n  }\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccCartConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        carts:\n          'users/${userId}/carts?fields=carts(DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),saveTime,user,name)',\n        cart:\n          'users/${userId}/carts/${cartId}?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        createCart:\n          'users/${userId}/carts?fields=DEFAULT,potentialProductPromotions,appliedProductPromotions,potentialOrderPromotions,appliedOrderPromotions,entries(totalPrice(formattedValue),product(images(FULL),stock(FULL)),basePrice(formattedValue,value),updateable),totalPrice(formattedValue),totalItems,totalPriceWithTax(formattedValue),totalDiscounts(value,formattedValue),subTotal(formattedValue),deliveryItemsQuantity,deliveryCost(formattedValue),totalTax(formattedValue, value),pickupItemsQuantity,net,appliedVouchers,productDiscounts(formattedValue),user',\n        addEntries: 'users/${userId}/carts/${cartId}/entries',\n        updateEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        removeEntries: 'users/${userId}/carts/${cartId}/entries/${entryNumber}',\n        addEmail: 'users/${userId}/carts/${cartId}/email',\n        deleteCart: 'users/${userId}/carts/${cartId}',\n        cartVoucher: 'users/${userId}/carts/${cartId}/vouchers',\n        saveCart: 'users/${userId}/carts/${cartId}/save',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CartModification } from '../../../model/cart.model';\n\nexport const CART_MODIFICATION_NORMALIZER = new InjectionToken<\n  Converter<any, CartModification>\n>('CartModificationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { CART_MODIFICATION_NORMALIZER } from '../../../cart/connectors/entry/converters';\nimport { CartModification } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCartEntryAdapter implements CartEntryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number = 1\n  ): Observable<CartModification> {\n    const toAdd = JSON.stringify({});\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'addEntries',\n      {\n        userId,\n        cartId,\n      },\n      { code: productCode, qty: quantity }\n    );\n\n    return this.http\n      .post<CartModification>(url, toAdd, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    let params = {};\n    if (pickupStore) {\n      params = { pickupStore };\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl(\n      'updateEntries',\n      { userId, cartId, entryNumber },\n      { qty, ...params }\n    );\n\n    return this.http\n      .patch<CartModification>(url, {}, { headers })\n      .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const url = this.occEndpointsService.getUrl('removeEntries', {\n      userId,\n      cartId,\n      entryNumber,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Voucher } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CART_VOUCHER_NORMALIZER = new InjectionToken<\n  Converter<any, Voucher>\n>('CartVoucherNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { CART_VOUCHER_NORMALIZER } from '../../../cart/connectors/voucher/converters';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n\n@Injectable()\nexport class OccCartVoucherAdapter implements CartVoucherAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartVoucherEndpoint(userId: string, cartId): string {\n    return this.occEndpoints.getUrl('cartVoucher', { userId, cartId });\n  }\n\n  protected getHeaders(userId: string): HttpHeaders {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return headers;\n  }\n\n  add(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url = this.getCartVoucherEndpoint(userId, cartId);\n\n    const toAdd = JSON.stringify({});\n\n    const params: HttpParams = new HttpParams().set('voucherId', voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http.post(url, toAdd, { headers, params }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(CART_VOUCHER_NORMALIZER)\n    );\n  }\n\n  remove(userId: string, cartId: string, voucherId: string): Observable<{}> {\n    const url =\n      this.getCartVoucherEndpoint(userId, cartId) +\n      '/' +\n      encodeURIComponent(voucherId);\n\n    const headers = this.getHeaders(userId);\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { Cart } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCartAdapter implements CartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.http\n      .get<Occ.CartList>(this.occEndpointsService.getUrl('carts', { userId }))\n      .pipe(\n        pluck('carts'),\n        this.converterService.pipeableMany(CART_NORMALIZER)\n      );\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    if (cartId === OCC_CART_ID_CURRENT) {\n      return this.loadAll(userId).pipe(\n        map((carts) => {\n          if (carts) {\n            const activeCart = carts.find((cart) => {\n              return cart['saveTime'] === undefined;\n            });\n            return activeCart;\n          } else {\n            return null;\n          }\n        })\n      );\n    } else {\n      return this.http\n        .get<Occ.Cart>(\n          this.occEndpointsService.getUrl('cart', { userId, cartId })\n        )\n        .pipe(this.converterService.pipeable(CART_NORMALIZER));\n    }\n  }\n\n  create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    const toAdd = JSON.stringify({});\n\n    let params = {};\n\n    if (oldCartId) {\n      params = { oldCartId: oldCartId };\n    }\n    if (toMergeCartGuid) {\n      params['toMergeCartGuid'] = toMergeCartGuid;\n    }\n\n    return this.http\n      .post<Occ.Cart>(\n        this.occEndpointsService.getUrl('createCart', { userId }, params),\n        toAdd\n      )\n      .pipe(this.converterService.pipeable(CART_NORMALIZER));\n  }\n\n  delete(userId: string, cartId: string): Observable<{}> {\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    return this.http.delete<{}>(\n      this.occEndpointsService.getUrl('deleteCart', { userId, cartId }),\n      { headers }\n    );\n  }\n\n  addEmail(userId: string, cartId: string, email: string): Observable<{}> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams().set('email', email);\n\n    const url = this.occEndpointsService.getUrl('addEmail', {\n      userId,\n      cartId,\n    });\n\n    return this.http.put(url, httpParams, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const SAVE_CART_NORMALIZER = new InjectionToken<\n  Converter<any, SaveCartResult>\n>('SaveCartNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SAVE_CART_NORMALIZER } from '../../../cart/connectors/save-cart/converters';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSaveCartAdapter implements SaveCartAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    let httpParams = new HttpParams();\n\n    if (Boolean(saveCartName)) {\n      httpParams = httpParams.set('saveCartName', saveCartName);\n    }\n\n    if (Boolean(saveCartDescription)) {\n      httpParams = httpParams.set('saveCartDescription', saveCartDescription);\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .patch<Occ.SaveCartResult>(\n        this.occEndpointsService.getUrl('saveCart', { userId, cartId }),\n        httpParams,\n        { headers }\n      )\n      .pipe(this.converterService.pipeable(SAVE_CART_NORMALIZER));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CartAdapter } from '../../../cart/connectors/cart/cart.adapter';\nimport { CART_NORMALIZER } from '../../../cart/connectors/cart/converters';\nimport { CartEntryAdapter } from '../../../cart/connectors/entry/cart-entry.adapter';\nimport { SaveCartAdapter } from '../../../cart/connectors/save-cart/save-cart.adapter';\nimport { CartVoucherAdapter } from '../../../cart/connectors/voucher/cart-voucher.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { OccCartNormalizer } from './converters/occ-cart-normalizer';\nimport { defaultOccCartConfig } from './default-occ-cart-config';\nimport { OccCartEntryAdapter } from './occ-cart-entry.adapter';\nimport { OccCartVoucherAdapter } from './occ-cart-voucher.adapter';\nimport { OccCartAdapter } from './occ-cart.adapter';\nimport { OccSaveCartAdapter } from './occ-save-cart.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccCartConfig),\n    {\n      provide: CartAdapter,\n      useClass: OccCartAdapter,\n    },\n    {\n      provide: CART_NORMALIZER,\n      useExisting: OccCartNormalizer,\n      multi: true,\n    },\n    {\n      provide: CartEntryAdapter,\n      useClass: OccCartEntryAdapter,\n    },\n    {\n      provide: CartVoucherAdapter,\n      useClass: OccCartVoucherAdapter,\n    },\n    {\n      provide: SaveCartAdapter,\n      useClass: OccSaveCartAdapter,\n    },\n  ],\n})\nexport class CartOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Order } from '../../../model/order.model';\n\nexport const ORDER_NORMALIZER = new InjectionToken<Converter<any, Order>>(\n  'OrderNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { Order } from '../../../model/order.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n// To be changed to a more optimised params after ticket: C3PO-1076\nconst FULL_PARAMS = 'fields=FULL';\nconst CHECKOUT_PARAMS = 'deliveryAddress(FULL),deliveryMode,paymentInfo(FULL)';\nconst ORDERS_ENDPOINT = '/orders';\nconst CARTS_ENDPOINT = '/carts/';\n\n@Injectable()\nexport class OccCheckoutAdapter implements CheckoutAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getEndpoint(userId: string, subEndpoint: string): string {\n    const orderEndpoint = 'users/' + userId + subEndpoint;\n    return this.occEndpoints.getEndpoint(orderEndpoint);\n  }\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    const url = this.getEndpoint(userId, ORDERS_ENDPOINT);\n    const params = new HttpParams({\n      fromString: 'cartId=' + cartId + '&' + FULL_PARAMS,\n    });\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .post<Occ.Order>(url, {}, { headers, params })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    const url = this.getEndpoint(userId, CARTS_ENDPOINT) + cartId;\n    const params = new HttpParams({\n      fromString: `fields=${CHECKOUT_PARAMS}`,\n    });\n    return this.http.get<CheckoutDetails>(url, { params });\n  }\n\n  clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/addresses/delivery`;\n    return this.http.delete<any>(url);\n  }\n\n  clearCheckoutDeliveryMode(userId: string, cartId: string): Observable<any> {\n    const url = `${this.getEndpoint(\n      userId,\n      CARTS_ENDPOINT\n    )}${cartId}/deliverymode`;\n    return this.http.delete<any>(url);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport const DELIVERY_MODE_NORMALIZER = new InjectionToken<\n  Converter<any, DeliveryMode>\n>('DeliveryModeNormalizer');\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const ADDRESS_NORMALIZER = new InjectionToken<Converter<any, Address>>(\n  'AddressNormalizer'\n);\n\nexport const ADDRESS_SERIALIZER = new InjectionToken<Converter<Address, any>>(\n  'AddressSerializer'\n);\n\nexport const ADDRESS_VALIDATION_NORMALIZER = new InjectionToken<\n  Converter<any, AddressValidation>\n>('AddressValidationNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { DELIVERY_MODE_NORMALIZER } from '../../../checkout/connectors/delivery/converters';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n} from '../../../user/connectors/address/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCheckoutDeliveryAdapter implements CheckoutDeliveryAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<Occ.Address>(\n        this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n        address,\n        {\n          headers: new HttpHeaders().set('Content-Type', 'application/json'),\n        }\n      )\n      .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/addresses/delivery',\n      {},\n      {\n        params: { addressId: addressId },\n      }\n    );\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/deliverymode',\n      {},\n      {\n        params: { deliveryModeId: deliveryModeId },\n      }\n    );\n  }\n\n  public getMode(userId: string, cartId: string): Observable<any> {\n    return this.http\n      .get(this.getCartEndpoint(userId) + cartId + '/deliverymode')\n      .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.http\n      .get<Occ.DeliveryModeList>(\n        this.getCartEndpoint(userId) + cartId + '/deliverymodes'\n      )\n      .pipe(\n        pluck('deliveryModes'),\n        this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER)\n      );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport const PAYMENT_DETAILS_NORMALIZER = new InjectionToken<\n  Converter<any, PaymentDetails>\n>('PaymentDetailsNormalizer');\n\nexport const PAYMENT_DETAILS_SERIALIZER = new InjectionToken<\n  Converter<PaymentDetails, any>\n>('PaymentDetailsSerializer');\n\nexport const CARD_TYPE_NORMALIZER = new InjectionToken<\n  Converter<any, CardType>\n>('CardTypeNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport {\n  CARD_TYPE_NORMALIZER,\n  PAYMENT_DETAILS_NORMALIZER,\n  PAYMENT_DETAILS_SERIALIZER,\n} from '../../../checkout/connectors/payment/converters';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { CustomEncoder } from '../cart/custom.encoder';\n\nconst ENDPOINT_CARD_TYPES = 'cardtypes';\n\n@Injectable()\nexport class OccCheckoutPaymentAdapter implements CheckoutPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {\n    if (typeof DOMParser !== 'undefined') {\n      this.domparser = new DOMParser();\n    }\n  }\n\n  private domparser: DOMParser;\n\n  protected getCartEndpoint(userId: string): string {\n    const cartEndpoint = 'users/' + userId + '/carts/';\n    return this.occEndpoints.getEndpoint(cartEndpoint);\n  }\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    paymentDetails = this.converter.convert(\n      paymentDetails,\n      PAYMENT_DETAILS_SERIALIZER\n    );\n    return this.getProviderSubInfo(userId, cartId).pipe(\n      map((data) => {\n        const labelsMap = this.convertToMap(data.mappingLabels.entry);\n        return {\n          url: data.postUrl,\n          parameters: this.getParamsForPaymentProvider(\n            paymentDetails,\n            data.parameters.entry,\n            labelsMap\n          ),\n          mappingLabels: labelsMap,\n        };\n      }),\n      mergeMap((sub) => {\n        // create a subscription directly with payment provider\n        return this.createSubWithProvider(sub.url, sub.parameters).pipe(\n          map((response) => this.extractPaymentDetailsFromHtml(response)),\n          mergeMap((fromPaymentProvider) => {\n            fromPaymentProvider['defaultPayment'] =\n              paymentDetails.defaultPayment;\n            fromPaymentProvider['savePaymentInfo'] = true;\n            return this.createDetailsWithParameters(\n              userId,\n              cartId,\n              fromPaymentProvider\n            ).pipe(this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));\n          })\n        );\n      })\n    );\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.http.put(\n      this.getCartEndpoint(userId) + cartId + '/paymentdetails',\n      {},\n      {\n        params: { paymentDetailsId: paymentDetailsId },\n      }\n    );\n  }\n\n  loadCardTypes(): Observable<CardType[]> {\n    return this.http\n      .get<Occ.CardTypeList>(this.occEndpoints.getEndpoint(ENDPOINT_CARD_TYPES))\n      .pipe(\n        map((cardTypeList) => cardTypeList.cardTypes),\n        this.converter.pipeableMany(CARD_TYPE_NORMALIZER)\n      );\n  }\n\n  protected getProviderSubInfo(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.http.get(\n      this.getCartEndpoint(userId) +\n        cartId +\n        '/payment/sop/request?responseUrl=sampleUrl'\n    );\n  }\n\n  protected createSubWithProvider(\n    postUrl: string,\n    parameters: any\n  ): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'text/html',\n    });\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    return this.http.post(postUrl, httpParams, {\n      headers,\n      responseType: 'text',\n    });\n  }\n\n  protected createDetailsWithParameters(\n    userId: string,\n    cartId: string,\n    parameters: any\n  ): Observable<PaymentDetails> {\n    let httpParams = new HttpParams({ encoder: new CustomEncoder() });\n    Object.keys(parameters).forEach((key) => {\n      httpParams = httpParams.append(key, parameters[key]);\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http.post<PaymentDetails>(\n      this.getCartEndpoint(userId) + cartId + '/payment/sop/response',\n      httpParams,\n      { headers }\n    );\n  }\n\n  private getParamsForPaymentProvider(\n    paymentDetails: PaymentDetails,\n    parameters: { key; value }[],\n    mappingLabels: any\n  ) {\n    const params = this.convertToMap(parameters);\n    params[mappingLabels['hybris_account_holder_name']] =\n      paymentDetails.accountHolderName;\n    params[mappingLabels['hybris_card_type']] = paymentDetails.cardType.code;\n    params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;\n    if (mappingLabels['hybris_combined_expiry_date'] === 'true') {\n      params[mappingLabels['hybris_card_expiry_date']] =\n        paymentDetails.expiryMonth +\n        mappingLabels['hybris_separator_expiry_date'] +\n        paymentDetails.expiryYear;\n    } else {\n      params[mappingLabels['hybris_card_expiration_month']] =\n        paymentDetails.expiryMonth;\n      params[mappingLabels['hybris_card_expiration_year']] =\n        paymentDetails.expiryYear;\n    }\n    params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;\n\n    // billing address\n    params[mappingLabels['hybris_billTo_country']] =\n      paymentDetails.billingAddress.country.isocode;\n    params[mappingLabels['hybris_billTo_firstname']] =\n      paymentDetails.billingAddress.firstName;\n    params[mappingLabels['hybris_billTo_lastname']] =\n      paymentDetails.billingAddress.lastName;\n    params[mappingLabels['hybris_billTo_street1']] =\n      paymentDetails.billingAddress.line1 +\n      ' ' +\n      paymentDetails.billingAddress.line2;\n    params[mappingLabels['hybris_billTo_city']] =\n      paymentDetails.billingAddress.town;\n    if (paymentDetails.billingAddress.region) {\n      params[mappingLabels['hybris_billTo_region']] =\n        paymentDetails.billingAddress.region.isocodeShort;\n    } else {\n      params[mappingLabels['hybris_billTo_region']] = '';\n    }\n    params[mappingLabels['hybris_billTo_postalcode']] =\n      paymentDetails.billingAddress.postalCode;\n    return params;\n  }\n\n  private extractPaymentDetailsFromHtml(html: string): any {\n    const domdoc = this.domparser.parseFromString(html, 'text/xml');\n    const responseForm = domdoc.getElementsByTagName('form')[0];\n    const inputs = responseForm.getElementsByTagName('input');\n\n    const values = {};\n    for (let i = 0; inputs[i]; i++) {\n      const input = inputs[i];\n      if (\n        input.getAttribute('name') !== '{}' &&\n        input.getAttribute('value') !== ''\n      ) {\n        values[input.getAttribute('name')] = input.getAttribute('value');\n      }\n    }\n\n    return values;\n  }\n\n  private convertToMap(paramList: { key; value }[]) {\n    return paramList.reduce(function (result, item) {\n      const key = item.key;\n      result[key] = item.value;\n      return result;\n    }, {});\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\nexport abstract class CheckoutAdapter {\n  /**\n   * Abstract method used to place an order.\n   *\n   * @param userId The `userId` for given user\n   * @param cartId The `cartId` for cart used for placing order\n   */\n  abstract placeOrder(userId: string, cartId: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load checkout details\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails>;\n\n  /**\n   * Abstract method used to clear checkout delivery address\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to clear checkout delivery mode\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Order, OrderEntry } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccOrderNormalizer implements Converter<Occ.Order, Order> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.Order, target?: Order): Order {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.entries) {\n      target.entries = source.entries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    if (source.consignments) {\n      target.consignments = source.consignments.map((consignment) => ({\n        ...consignment,\n        entries: consignment.entries.map((entry) => ({\n          ...entry,\n          orderEntry: this.convertOrderEntry(entry.orderEntry),\n        })),\n      }));\n    }\n\n    if (source.unconsignedEntries) {\n      target.unconsignedEntries = source.unconsignedEntries.map((entry) =>\n        this.convertOrderEntry(entry)\n      );\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\nexport abstract class CheckoutDeliveryAdapter {\n  /**\n   * Abstract method used to create address in cart\n   *\n   * @param userId\n   * @param cartId\n   * @param address\n   */\n  abstract createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address>;\n\n  /**\n   * Abstract method used to set adress for delivery\n   *\n   * @param userId\n   * @param cartId\n   * @param addressId\n   */\n  abstract setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to set delivery mode on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param deliveryModeId\n   */\n  abstract setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get current delivery mode from cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getMode(userId: string, cartId: string): Observable<DeliveryMode>;\n\n  /**\n   * Abstract method used to get supported delivery modes for cart\n   *\n   * @param userId\n   * @param cartId\n   */\n  abstract getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]>;\n}\n","import { Observable } from 'rxjs';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class CheckoutPaymentAdapter {\n  /**\n   * Abstract method used to create payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetails\n   */\n  abstract create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails>;\n\n  /**\n   * Abstract method used to set payment details on cart\n   *\n   * @param userId\n   * @param cartId\n   * @param paymentDetailsId\n   */\n  abstract set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any>;\n\n  /**\n   * Abstract method used to get available cart types\n   */\n  abstract loadCardTypes(): Observable<CardType[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CheckoutAdapter } from '../../../checkout/connectors/checkout/checkout.adapter';\nimport { OccCheckoutAdapter } from './occ-checkout.adapter';\nimport { OccOrderNormalizer } from './converters/occ-order-normalizer';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { CheckoutDeliveryAdapter } from '../../../checkout/connectors/delivery/checkout-delivery.adapter';\nimport { OccCheckoutDeliveryAdapter } from './occ-checkout-delivery.adapter';\nimport { CheckoutPaymentAdapter } from '../../../checkout/connectors/payment/checkout-payment.adapter';\nimport { OccCheckoutPaymentAdapter } from './occ-checkout-payment.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CheckoutAdapter,\n      useClass: OccCheckoutAdapter,\n    },\n    { provide: ORDER_NORMALIZER, useExisting: OccOrderNormalizer, multi: true },\n    {\n      provide: CheckoutDeliveryAdapter,\n      useClass: OccCheckoutDeliveryAdapter,\n    },\n    {\n      provide: CheckoutPaymentAdapter,\n      useClass: OccCheckoutPaymentAdapter,\n    },\n  ],\n})\nexport class CheckoutOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CmsStructureModel>\n>('CmsPageNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsStructureModel } from '../../../cms/model/page.model';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsPageAdapter implements CmsPageAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<CmsStructureModel> {\n    // load page by Id\n    if (pageContext.type === undefined) {\n      return this.http\n        .get(\n          this.occEndpoints.getUrl(\n            'page',\n            {\n              id: pageContext.id,\n            },\n            { fields: fields ? fields : 'DEFAULT' }\n          ),\n          {\n            headers: this.headers,\n          }\n        )\n        .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n    }\n\n    // load page by PageContext\n    const httpParams = this.getPagesRequestParams(pageContext);\n    return this.http\n      .get(this.getPagesEndpoint(httpParams, fields), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable(CMS_PAGE_NORMALIZER));\n  }\n\n  private getPagesEndpoint(\n    params: {\n      [key: string]: string;\n    },\n    fields?: string\n  ): string {\n    fields = fields ? fields : 'DEFAULT';\n    return this.occEndpoints.getUrl('pages', {}, { fields, ...params });\n  }\n\n  private getPagesRequestParams(\n    pageContext: PageContext\n  ): { [key: string]: any } {\n    let httpParams = {};\n\n    // smartedit preview page is loaded by previewToken which added by interceptor\n    if (pageContext.id !== 'smartedit-preview') {\n      httpParams = { pageType: pageContext.type };\n\n      if (pageContext.type === PageType.CONTENT_PAGE) {\n        httpParams['pageLabelOrId'] = pageContext.id;\n      } else {\n        httpParams['code'] = pageContext.id;\n      }\n    }\n    return httpParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const CMS_COMPONENT_NORMALIZER = new InjectionToken<\n  Converter<any, CmsComponent>\n>('CmsComponentNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\nimport { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';\nimport { CmsComponent, PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccCmsComponentAdapter implements CmsComponentAdapter {\n  protected headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.http\n      .get<T>(this.getComponentEndPoint(id, pageContext), {\n        headers: this.headers,\n      })\n      .pipe(this.converter.pipeable<any, T>(CMS_COMPONENT_NORMALIZER));\n  }\n\n  findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    requestParams['componentIds'] = ids.toString();\n\n    return this.http\n      .get<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext,\n    fields = 'DEFAULT',\n    currentPage = 0,\n    pageSize = ids.length,\n    sort?: string\n  ): Observable<CmsComponent[]> {\n    const idList: Occ.ComponentIDList = { idList: ids };\n\n    const requestParams = {\n      ...this.getContextParams(pageContext),\n      ...this.getPaginationParams(currentPage, pageSize, sort),\n    };\n\n    return this.http\n      .post<Occ.ComponentList>(\n        this.getComponentsEndpoint(requestParams, fields),\n        idList,\n        {\n          headers: this.headers,\n        }\n      )\n      .pipe(\n        pluck('component'),\n        this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER)\n      );\n  }\n\n  protected getComponentEndPoint(id: string, pageContext: PageContext): string {\n    return this.occEndpoints.getUrl(\n      'component',\n      { id },\n      this.getContextParams(pageContext)\n    );\n  }\n\n  protected getComponentsEndpoint(requestParams: any, fields: string): string {\n    return this.occEndpoints.getUrl(\n      'components',\n      {},\n      { fields, ...requestParams }\n    );\n  }\n\n  private getPaginationParams(\n    currentPage?: number,\n    pageSize?: number,\n    sort?: string\n  ): { [key: string]: string } {\n    const requestParams = {};\n    if (currentPage !== undefined) {\n      requestParams['currentPage'] = currentPage.toString();\n    }\n    if (pageSize !== undefined) {\n      requestParams['pageSize'] = pageSize.toString();\n    }\n    if (sort !== undefined) {\n      requestParams['sort'] = sort;\n    }\n\n    return requestParams;\n  }\n\n  private getContextParams(\n    pageContext: PageContext\n  ): { [key: string]: string } {\n    let requestParams = {};\n    switch (pageContext.type) {\n      case PageType.PRODUCT_PAGE: {\n        requestParams = { productCode: pageContext.id };\n        break;\n      }\n      case PageType.CATEGORY_PAGE: {\n        requestParams = { categoryCode: pageContext.id };\n        break;\n      }\n      case PageType.CATALOG_PAGE: {\n        requestParams = { catalogCode: pageContext.id };\n        break;\n      }\n    }\n\n    return requestParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CMS_FLEX_COMPONENT_TYPE,\n  JSP_INCLUDE_CMS_COMPONENT_TYPE,\n} from '../../../../cms/config/cms-config';\nimport { ContentSlotComponentData } from '../../../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../../../cms/model/content-slot-data.model';\nimport { CmsStructureModel } from '../../../../cms/model/page.model';\nimport { Converter } from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccCmsPageNormalizer\n  implements Converter<Occ.CMSPage, CmsStructureModel> {\n  convert(\n    source: Occ.CMSPage,\n    target: CmsStructureModel = {}\n  ): CmsStructureModel {\n    this.normalizePageData(source, target);\n    this.normalizePageSlotData(source, target);\n    this.normalizePageComponentData(source, target);\n    this.normalizeComponentData(source, target);\n    return target;\n  }\n\n  private normalizePageData(source: any, target: CmsStructureModel): void {\n    target.page = {\n      loadTime: Date.now(),\n      name: source.name,\n      type: source.typeCode,\n      title: source.title,\n      pageId: source.uid,\n      template: source.template,\n      slots: {},\n      properties: source.properties,\n      label: source.label,\n    };\n  }\n\n  private normalizePageSlotData(source: any, target: CmsStructureModel): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      target.page.slots[slot.position] = {\n        components: [],\n        properties: slot.properties,\n      } as ContentSlotData;\n    }\n  }\n\n  private normalizePageComponentData(\n    source: any,\n    target: CmsStructureModel\n  ): void {\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component) {\n          const comp: ContentSlotComponentData = {\n            uid: component.uid,\n            typeCode: component.typeCode,\n            properties: component.properties,\n          };\n\n          if (component.typeCode === CMS_FLEX_COMPONENT_TYPE) {\n            comp.flexType = component.flexType;\n          } else if (component.typeCode === JSP_INCLUDE_CMS_COMPONENT_TYPE) {\n            comp.flexType = component.uid;\n          } else {\n            comp.flexType = component.typeCode;\n          }\n          target.page.slots[slot.position].components.push(comp);\n        }\n      }\n    }\n  }\n\n  private normalizeComponentData(source: any, target: CmsStructureModel): void {\n    target.components = [];\n\n    for (const slot of source.contentSlots.contentSlot) {\n      if (\n        slot.components.component &&\n        Array.isArray(slot.components.component)\n      ) {\n        for (const component of slot.components.component as any) {\n          // we dont put properties into component state\n          if (component.properties) {\n            component.properties = undefined;\n          }\n          target.components.push(component);\n        }\n      }\n    }\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n/**\n * Abstract class that can be used to implement custom loader logic\n * in order to load CMS structure from third-party CMS system.\n */\nexport abstract class CmsPageAdapter {\n  /**\n   * Abstract method must be used to load the page structure for a given `PageContext`.\n   * The page can be loaded from alternative sources, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load(pageContext: PageContext): Observable<CmsStructureModel>;\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/models/page-context.model';\n\nexport abstract class CmsComponentAdapter {\n  /**\n   * Abstract method must be used to load the component for a given `id` and `PageContext`.\n   * The component can be loaded from alternative backend, as long as the structure\n   * converts to the `CmsStructureModel`.\n   *\n   * @param pageContext The `PageContext` holding the page Id.\n   */\n  abstract load<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext,\n    fields?: string\n  ): Observable<T>;\n\n  abstract findComponentsByIds(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n\n  abstract findComponentsByIdsLegacy(\n    ids: string[],\n    pageContext: PageContext\n  ): Observable<CmsComponent[]>;\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsPageAdapter } from '../../../cms/connectors/page/cms-page.adapter';\nimport { OccCmsComponentAdapter } from './occ-cms-component.adapter';\nimport { OccCmsPageNormalizer } from './converters/occ-cms-page-normalizer';\nimport { OccCmsPageAdapter } from './occ-cms-page.adapter';\nimport { CMS_PAGE_NORMALIZER } from '../../../cms/connectors/page/converters';\nimport { CmsComponentAdapter } from '../../../cms/connectors/component/cms-component.adapter';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    {\n      provide: CmsPageAdapter,\n      useClass: OccCmsPageAdapter,\n    },\n    {\n      provide: CMS_PAGE_NORMALIZER,\n      useExisting: OccCmsPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: CmsComponentAdapter,\n      useClass: OccCmsComponentAdapter,\n    },\n  ],\n})\nexport class CmsOccModule {}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\nimport { Images } from '../../../../model/image.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductImageNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.images) {\n      target.images = this.normalize(source.images);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the image structure we'd like to have. Instead of\n   * having a single list with all images despite type and format\n   * we create a proper structure. With that we can do:\n   * - images.primary.thumnail.url\n   * - images.GALLERY[0].thumnail.url\n   */\n  normalize(source: Occ.Image[]): Images {\n    const images = {};\n    if (source) {\n      for (const image of source) {\n        const isList = image.hasOwnProperty('galleryIndex');\n        if (!images.hasOwnProperty(image.imageType)) {\n          images[image.imageType] = isList ? [] : {};\n        }\n\n        let imageContainer;\n        if (isList && !images[image.imageType][image.galleryIndex]) {\n          images[image.imageType][image.galleryIndex] = {};\n        }\n\n        if (isList) {\n          imageContainer = images[image.imageType][image.galleryIndex];\n        } else {\n          imageContainer = images[image.imageType];\n        }\n\n        const targetImage = { ...image };\n        targetImage.url = this.normalizeImageUrl(targetImage.url);\n        imageContainer[image.format] = targetImage;\n      }\n    }\n    return images;\n  }\n  /**\n   * Traditionally, in an on-prem world, medias and other backend related calls\n   * are hosted at the same platform, but in a cloud setup, applications are are\n   * typically distributed cross different environments. For media, we use the\n   * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`\n   * if none provided.\n   */\n  private normalizeImageUrl(url: string): string {\n    if (new RegExp(/^(http|data:image|\\/\\/)/i).test(url)) {\n      return url;\n    }\n    return (\n      (this.config.backend.media.baseUrl ||\n        this.config.backend.occ.baseUrl ||\n        '') + url\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product, ProductReferences } from '../../../../model/product.model';\n\n@Injectable()\nexport class ProductReferenceNormalizer\n  implements Converter<Occ.Product, Product> {\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.productReferences) {\n      target.productReferences = this.normalize(source.productReferences);\n    }\n    return target;\n  }\n\n  /**\n   * @desc\n   * Creates the reference structure we'd like to have. Instead of\n   * having a single list with all references we create a proper structure.\n   * With that we have a semantic API for the clients\n   * - product.references.SIMILAR[0].code\n   */\n  protected normalize(source: Occ.ProductReference[]): ProductReferences {\n    const references = {};\n\n    if (source) {\n      for (const reference of source) {\n        if (!references.hasOwnProperty(reference.referenceType)) {\n          references[reference.referenceType] = [];\n        }\n        references[reference.referenceType].push(reference);\n      }\n    }\n    return references;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Facet,\n  ProductSearchPage,\n} from '../../../../model/product-search.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { Occ } from '../../../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductSearchPageNormalizer\n  implements Converter<Occ.ProductSearchPage, ProductSearchPage> {\n  constructor(private converterService: ConverterService) {}\n\n  /**\n   * Specifies the minimal number of top values in case\n   * non have been setup by the business.\n   */\n  protected DEFAULT_TOP_VALUES = 6;\n\n  convert(\n    source: Occ.ProductSearchPage,\n    target: ProductSearchPage = {}\n  ): ProductSearchPage {\n    target = {\n      ...target,\n      ...(source as any),\n    };\n\n    this.normalizeFacets(target);\n    if (source.products) {\n      target.products = source.products.map((product) =>\n        this.converterService.convert(product, PRODUCT_NORMALIZER)\n      );\n    }\n    return target;\n  }\n\n  private normalizeFacets(target: ProductSearchPage): void {\n    this.normalizeFacetValues(target);\n    this.normalizeUselessFacets(target);\n  }\n\n  /**\n   * The (current) backend returns facets with values that do not contribute\n   * to the facet navigation much, as the number in the result list will not get\n   * behaviour, see https://jira.hybris.com/browse/CS-427.\n   *\n   * As long as this is not in place, we manually filter the facet from the list;\n   * any facet that does not have a count < the total results will be dropped from\n   * the facets.\n   */\n  private normalizeUselessFacets(target: ProductSearchPage): void {\n    target.facets = target.facets.filter((facet) => {\n      return (\n        !target.pagination ||\n        !target.pagination.totalResults ||\n        ((!facet.hasOwnProperty('visible') || facet.visible) &&\n          facet.values &&\n          facet.values.find((value) => {\n            return (\n              value.selected || value.count < target.pagination.totalResults\n            );\n          }))\n      );\n    });\n  }\n\n  /*\n   * In case there are so-called `topValues` given for the facet values,\n   * values are obsolete.\n   *\n   * `topValues` is a feature in Adaptive Search which can limit a large\n   * amount of facet values to a small set (5 by default). As long as the backend\n   * provides all facet values AND topValues, we normalize the data to not bother\n   * the UI with this specific feature.\n   */\n  private normalizeFacetValues(target: ProductSearchPage): void {\n    if (target.facets) {\n      target.facets = target.facets.map((facetSource: Facet) => {\n        const { topValues, ...facetTarget } = facetSource;\n        facetTarget.topValueCount = topValues\n          ? topValues.length\n          : this.DEFAULT_TOP_VALUES;\n        return facetTarget;\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductReference } from '../../../../model/product.model';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class OccProductReferencesListNormalizer\n  implements Converter<Occ.ProductReferenceList, ProductReference[]> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductReferenceList,\n    target: ProductReference[] = []\n  ): ProductReference[] {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source && source.references) {\n      target = source.references.map((reference) => ({\n        ...reference,\n        target: this.converter.convert(reference.target, PRODUCT_NORMALIZER),\n      }));\n\n      return target;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../../../config/occ-config';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { Converter } from '../../../../util/converter.service';\nimport { Product } from '../../../../model/product.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProductNameNormalizer implements Converter<Occ.Product, Product> {\n  constructor(protected config: OccConfig) {}\n\n  convert(source: Occ.Product, target?: Product): Product {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source.name) {\n      target.name = this.normalize(source.name);\n      target.nameHtml = source.name;\n    }\n    return target;\n  }\n\n  protected normalize(name: string): string {\n    return name.replace(/<[^>]*>/g, '');\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ProductReference } from '../../../model/product.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const PRODUCT_REFERENCES_NORMALIZER = new InjectionToken<\n  Converter<any, ProductReference[]>\n>('ProductReferencesListNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\n\n@Injectable()\nexport class OccProductReferencesAdapter implements ProductReferencesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, referenceType, pageSize))\n      .pipe(this.converter.pipeable(PRODUCT_REFERENCES_NORMALIZER));\n  }\n\n  protected getEndpoint(\n    code: string,\n    reference?: string,\n    pageSize?: number\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productReferences',\n      {\n        productCode: code,\n      },\n      { referenceType: reference, pageSize }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Review } from '../../../model/product.model';\n\nexport const PRODUCT_REVIEW_NORMALIZER = new InjectionToken<\n  Converter<any, Review>\n>('ProductReviewNormalizer');\n\nexport const PRODUCT_REVIEW_SERIALIZER = new InjectionToken<\n  Converter<Review, any>\n>('ProductReviewSerializer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { Review } from '../../../model/product.model';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport {\n  PRODUCT_REVIEW_NORMALIZER,\n  PRODUCT_REVIEW_SERIALIZER,\n} from '../../../product/connectors/reviews/converters';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\n\n@Injectable()\nexport class OccProductReviewsAdapter implements ProductReviewsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.http\n      .get(this.getEndpoint(productCode, maxCount))\n      .pipe(\n        pluck('reviews'),\n        this.converter.pipeableMany(PRODUCT_REVIEW_NORMALIZER)\n      );\n  }\n\n  post(productCode: string, review: any): Observable<Review> {\n    review = this.converter.convert(review, PRODUCT_REVIEW_SERIALIZER);\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    const body = new URLSearchParams();\n    body.append('headline', review.headline);\n    body.append('comment', review.comment);\n    body.append('rating', review.rating.toString());\n    body.append('alias', review.alias);\n\n    return this.http.post(this.getEndpoint(productCode), body.toString(), {\n      headers,\n    });\n  }\n\n  protected getEndpoint(code: string, maxCount?: number): string {\n    return this.occEndpoints.getUrl(\n      'productReviews',\n      {\n        productCode: code,\n      },\n      { maxCount }\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport const PRODUCT_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, ProductSearchPage>\n>('ProductSearchPageNormalizer');\n\nexport const PRODUCT_SUGGESTION_NORMALIZER = new InjectionToken<\n  Converter<any, Suggestion>\n>('ProductSuggestionNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  PRODUCT_SEARCH_PAGE_NORMALIZER,\n  PRODUCT_SUGGESTION_NORMALIZER,\n} from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { SearchConfig } from '../../../product/model/search-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst DEFAULT_SEARCH_CONFIG: SearchConfig = {\n  pageSize: 20,\n};\n\n@Injectable()\nexport class OccProductSearchAdapter implements ProductSearchAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig = DEFAULT_SEARCH_CONFIG\n  ): Observable<ProductSearchPage> {\n    return this.http\n      .get(this.getSearchEndpoint(query, searchConfig))\n      .pipe(this.converter.pipeable(PRODUCT_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadSuggestions(\n    term: string,\n    pageSize: number = 3\n  ): Observable<Suggestion[]> {\n    return this.http\n      .get(this.getSuggestionEndpoint(term, pageSize.toString()))\n      .pipe(\n        pluck('suggestions'),\n        this.converter.pipeableMany(PRODUCT_SUGGESTION_NORMALIZER)\n      );\n  }\n\n  protected getSearchEndpoint(\n    query: string,\n    searchConfig: SearchConfig\n  ): string {\n    return this.occEndpoints.getUrl(\n      'productSearch',\n      {},\n      {\n        query,\n        pageSize: searchConfig.pageSize,\n        currentPage: searchConfig.currentPage,\n        sort: searchConfig.sortCode,\n      }\n    );\n  }\n\n  protected getSuggestionEndpoint(term: string, max: string): string {\n    return this.occEndpoints.getUrl('productSuggestions', {}, { term, max });\n  }\n}\n","import { deepMerge, isObject } from '../../config/utils/deep-merge';\n\n/**\n * Merge occ fields parameters\n *\n * @param fields Fields definition as string or object\n */\nexport function mergeFields(fields: (string | object)[]): string {\n  const parsedFields = fields.map((f) =>\n    typeof f === 'string' ? parseFields(f) : f\n  );\n  const mergedFields = optimizeFields(deepMerge({}, ...parsedFields));\n  return stringifyFields(mergedFields);\n}\n\n/**\n * Optimize fields definition by removing not needed groups\n *\n * @param fields\n */\nexport function optimizeFields(fields: object = {}): object {\n  const keys = Object.keys(fields);\n  if (keys.includes('FULL')) {\n    delete fields['DEFAULT'];\n    delete fields['BASIC'];\n  } else if (keys.includes('DEFAULT')) {\n    delete fields['BASIC'];\n  }\n  Object.keys(fields).forEach((key) => {\n    fields[key] = optimizeFields(fields[key]);\n  });\n  return fields;\n}\n\n/**\n * Parse string field definition to an AST object\n *\n * @param fields Fields string definition\n * @param startIndex Used for recurrence\n */\nexport function parseFields(\n  fields: string,\n  startIndex = 0\n): [object, number] | object {\n  const parsedFields = {};\n\n  let i = startIndex;\n  while (i < fields.length) {\n    if (fields[i] === ',') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      startIndex = i + 1;\n    } else if (fields[i] === '(') {\n      const subFields = parseFields(fields, i + 1);\n      if (Array.isArray(subFields)) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = subFields[0];\n        startIndex = subFields[1];\n        i = startIndex - 1;\n      } else {\n        return parsedFields;\n      }\n    } else if (fields[i] === ')') {\n      if (i > startIndex) {\n        parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n      }\n      return [parsedFields, i + 1];\n    }\n    i++;\n  }\n\n  if (startIndex < fields.length) {\n    parsedFields[fields.substr(startIndex, i - startIndex)] = {};\n  }\n\n  return parsedFields;\n}\n\n/**\n * Convert AST object fields definition to string representation\n *\n * @param fields\n */\nexport function stringifyFields(fields: object): string {\n  return Object.keys(fields)\n    .map((key) => {\n      const subFields = stringifyFields(fields[key]);\n      return subFields ? `${key}(${subFields})` : key;\n    })\n    .join(',');\n}\n\n/**\n * Extract part of the object described by fields definition\n *\n * @param data\n * @param fields\n */\nexport function extractFields<T>(data: T, fields: string | object): T {\n  const parsedFields =\n    typeof fields === 'string' ? parseFields(fields) : fields;\n  return getObjectPart<T>(data, parsedFields);\n}\n\nfunction getObjectPart<T>(data: T, fields: object): T {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  const keys = Object.keys(fields);\n\n  if (\n    keys.length === 0 ||\n    // we should not extract parts of the object with ambiguous fields definitions\n    keys.find((el) => el === 'BASIC' || el === 'DEFAULT' || el === 'FULL')\n  ) {\n    return data;\n  }\n\n  const result = {} as T;\n\n  keys.forEach((key) => {\n    if (data.hasOwnProperty(key)) {\n      result[key] = getObjectPart(data[key], fields[key]);\n    }\n  });\n\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { mergeFields, parseFields } from '../utils/occ-fields';\nimport { ScopedData } from '../../model/scoped-data';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface ScopedDataWithUrl {\n  /** Url (with fields) to load scoped data */\n  url?: string;\n  /** scoped data model */\n  scopedData: ScopedData<any>;\n}\n\n/**\n * Intermediate model to accommodate all data needed to perform occ fields optimizations\n * wrapping ScopedData with url and fields\n */\nexport interface OccFieldsModel extends ScopedDataWithUrl {\n  /** extracted fields object, used to extract data from broader model */\n  fields?: object;\n}\n\n/**\n * Grouped rest calls with optimal urls\n *\n * One url groups all scopes it covers with related occFieldsModels\n */\nexport interface OccOptimimalUrlGroups {\n  [optimalUrl: string]: {\n    [scope: string]: OccFieldsModel;\n  };\n}\n\n/**\n * Helper service for optimizing endpoint calls to occ backend\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccFieldsService {\n  constructor(protected http: HttpClient) {}\n\n  protected FIELDS_PARAM = 'fields';\n\n  /**\n   * Merge similar occ endpoints calls by merging fields parameter\n   *\n   * We assume that different scopes are defined by different fields parameters,\n   * so we are grouping all requests with the same urls (except fields definition)\n   * and merging into one request with fields that will satisfy all separate ones.\n   *\n   * @param models\n   */\n  getOptimalUrlGroups(models: ScopedDataWithUrl[]): OccOptimimalUrlGroups {\n    const groupedByUrls: OccOptimimalUrlGroups = {};\n    for (const model of models as OccFieldsModel[]) {\n      const [urlPart, fields] = this.splitFields(model.url);\n      if (!groupedByUrls[urlPart]) {\n        groupedByUrls[urlPart] = {};\n      }\n      model.fields = fields ? parseFields(fields) : {};\n      groupedByUrls[urlPart][model.scopedData.scope] = model;\n    }\n\n    const mergedUrls: OccOptimimalUrlGroups = {};\n    for (const [url, group] of Object.entries(groupedByUrls)) {\n      const urlWithFields = this.getUrlWithFields(\n        url,\n        Object.values(group).map((lo) => lo.fields)\n      );\n      mergedUrls[urlWithFields] = group;\n    }\n\n    return mergedUrls;\n  }\n\n  /**\n   * Extract fields parameter from occ endpoint url\n   *\n   * @param urlWithFields\n   */\n  private splitFields(urlWithFields: string): [string, string] {\n    const [url, params] = urlWithFields.split('?');\n\n    const paramsMap = {};\n\n    if (params) {\n      params.split('&').map((param) => {\n        const keyValue = param.split('=');\n        paramsMap[keyValue[0]] = keyValue[1];\n      });\n    }\n\n    const nonFieldsParams = Object.keys(paramsMap)\n      .sort()\n      .reduce((id, par) => {\n        if (par !== this.FIELDS_PARAM) {\n          id.push(paramsMap[par] ? `${par}=${paramsMap[par]}` : par);\n        }\n        return id;\n      }, []);\n\n    const nonFields = nonFieldsParams.join('&');\n\n    return [\n      nonFields ? `${url}?${nonFields}` : url,\n      paramsMap[this.FIELDS_PARAM],\n    ];\n  }\n\n  /**\n   * Combine url with field parameters\n   *\n   * @param url\n   * @param fields\n   */\n  private getUrlWithFields(url: string, fields: (string | object)[]): string {\n    const mergedFields = mergeFields(fields);\n\n    if (mergedFields) {\n      url += url.includes('?') ? '&' : '?';\n      url += `${this.FIELDS_PARAM}=${mergedFields}`;\n    }\n\n    return url;\n  }\n}\n","export enum ProductScope {\n  LIST = 'list',\n  DETAILS = 'details',\n  ATTRIBUTES = 'attributes',\n  VARIANTS = 'variants',\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ScopedData } from '../../model/scoped-data';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { extractFields } from '../utils/occ-fields';\nimport {\n  OccFieldsModel,\n  OccFieldsService,\n  ScopedDataWithUrl,\n} from './occ-fields.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OccRequestsOptimizerService {\n  constructor(\n    protected http: HttpClient,\n    protected occFields: OccFieldsService\n  ) {}\n\n  /**\n   * Optimize occ endpoint calls merging requests to the same url by merging field parameters\n   *\n   * @param scopedDataWithUrls\n   * @param dataFactory\n   */\n  scopedDataLoad<T>(\n    scopedDataWithUrls: ScopedDataWithUrl[],\n    dataFactory?: (url: string) => Observable<T>\n  ): ScopedData<T>[] {\n    const result = [];\n\n    if (!dataFactory) {\n      dataFactory = (url) => this.http.get<any>(url);\n    }\n\n    const mergedUrls = this.occFields.getOptimalUrlGroups(scopedDataWithUrls);\n\n    Object.entries(mergedUrls).forEach(\n      ([url, groupedModelsSet]: [\n        string,\n        {\n          [scope: string]: OccFieldsModel;\n        }\n      ]) => {\n        const groupedModels = Object.values(groupedModelsSet);\n\n        if (groupedModels.length === 1) {\n          // only one scope for url, we can pass the data straightaway\n          result.push({\n            ...groupedModels[0].scopedData,\n            data$: dataFactory(url),\n          });\n        } else {\n          // multiple scopes per url\n          // we have to split the model per each scope\n          const data$ = dataFactory(url).pipe(shareReplay(1));\n\n          groupedModels.forEach((modelData) => {\n            result.push({\n              ...modelData.scopedData,\n              data$: data$.pipe(\n                map((data) => extractFields<T>(data, modelData.fields))\n              ),\n            });\n          });\n        }\n      }\n    );\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from '../../../product/connectors/product/scoped-product-data';\nimport { ScopedDataWithUrl } from '../../services/occ-fields.service';\nimport { Occ } from '../../occ-models';\nimport { OccRequestsOptimizerService } from '../../services/occ-requests-optimizer.service';\n\n@Injectable()\nexport class OccProductAdapter implements ProductAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected requestsOptimizer: OccRequestsOptimizerService\n  ) {}\n\n  load(productCode: string, scope?: string): Observable<Product> {\n    return this.http\n      .get(this.getEndpoint(productCode, scope))\n      .pipe(this.converter.pipeable(PRODUCT_NORMALIZER));\n  }\n\n  loadMany(products: ScopedProductData[]): ScopedProductData[] {\n    const scopedDataWithUrls: ScopedDataWithUrl[] = products.map((model) => ({\n      scopedData: model,\n      url: this.getEndpoint(model.code, model.scope),\n    }));\n\n    return this.requestsOptimizer\n      .scopedDataLoad<Occ.Product>(scopedDataWithUrls)\n      .map(\n        (scopedProduct) =>\n          ({\n            ...scopedProduct,\n            data$: scopedProduct.data$.pipe(\n              this.converter.pipeable(PRODUCT_NORMALIZER)\n            ),\n          } as ScopedProductData)\n      );\n  }\n\n  protected getEndpoint(code: string, scope?: string): string {\n    return this.occEndpoints.getUrl(\n      'product',\n      {\n        productCode: code,\n      },\n      undefined,\n      scope\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ScopedProductData } from './scoped-product-data';\n\nexport abstract class ProductAdapter {\n  /**\n   * Abstract method used to load product's details data.\n   * Product's data can be loaded from alternative sources, as long as the structure\n   * converts to the `Product`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param scope The product scope to load\n   */\n  abstract load(productCode: string, scope?: string): Observable<Product>;\n\n  /**\n   * Abstract method used to load data for multiple product and scopes\n   * Adapter is able to optimize necessary backend calls and load\n   * products in the most efficient way possible.\n   *\n   * @param products\n   */\n  abstract loadMany?(products: ScopedProductData[]): ScopedProductData[];\n}\n","import { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\n\nexport abstract class ProductReferencesAdapter {\n  /**\n   * Abstract method used to load product references for a given product.\n   * References can be loaded from alternative sources, as long as the structure\n   * converts to the `ProductReference[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param referenceType Reference type according to enum ProductReferenceTypeEnum\n   * @param pageSize Maximum number of product refrence to load\n   */\n  abstract load(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Review } from '../../../model/product.model';\n\nexport abstract class ProductReviewsAdapter {\n  /**\n   * Abstract method used to load reviews for a given product.\n   * Reviews can be loaded from alternative sources, as long as the structure\n   * converts to the `Review[]`.\n   *\n   * @param productCode The `productCode` for given product\n   * @param maxCount Maximum number of review to load\n   */\n  abstract load(productCode: string, maxCount?: number): Observable<Review[]>;\n\n  /**\n   * Abstract method used to post review for a given product.\n   *\n   * @param productCode The `productCode` for given product\n   * @param review Review to post\n   */\n  abstract post(productCode: string, review: any): Observable<Review>;\n}\n","import { SearchConfig } from '../../model/search-config';\n\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\nexport abstract class ProductSearchAdapter {\n  abstract search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage>;\n\n  abstract loadSuggestions(\n    term: string,\n    pageSize?: number\n  ): Observable<Suggestion[]>;\n}\n","import { ProductScope } from '../../../product/model/product-scope';\nimport { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccProductConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        product: {\n          default:\n            'products/${productCode}?fields=DEFAULT,averageRating,images(FULL),classifications,manufacturer,numberOfReviews,categories(FULL),baseOptions,baseProduct,variantOptions,variantType',\n          list:\n            'products/${productCode}?fields=code,name,summary,price(formattedValue),images(DEFAULT,galleryIndex)',\n          details:\n            'products/${productCode}?fields=averageRating,stock(DEFAULT),description,availableForPickup,code,url,price(DEFAULT),numberOfReviews,manufacturer,categories(FULL),priceRange,multidimensional,configuratorType,configurable,tags,images(FULL)',\n          attributes: 'products/${productCode}?fields=classifications',\n          variants:\n            'products/${productCode}?fields=name,purchasable,baseOptions(DEFAULT),baseProduct,variantOptions(DEFAULT),variantType',\n        },\n        productReviews: 'products/${productCode}/reviews',\n        // Uncomment this when occ gets configured\n        // productReferences:\n        //   'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))&referenceType=${referenceType}',\n        productReferences:\n          'products/${productCode}/references?fields=DEFAULT,references(target(images(FULL)))',\n        // tslint:disable:max-line-length\n        productSearch:\n          'products/search?fields=products(code,name,summary,price(FULL),images(DEFAULT),stock(FULL),averageRating,variantOptions),facets,breadcrumbs,pagination(DEFAULT),sorts(DEFAULT),freeTextSearch,currentQuery',\n        // tslint:enable\n        productSuggestions: 'products/suggestions',\n      },\n    },\n    loadingScopes: {\n      product: {\n        details: {\n          include: [ProductScope.LIST, ProductScope.VARIANTS],\n        },\n      },\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { PRODUCT_NORMALIZER } from '../../../product/connectors/product/converters';\nimport { ProductAdapter } from '../../../product/connectors/product/product.adapter';\nimport { PRODUCT_REFERENCES_NORMALIZER } from '../../../product/connectors/references/converters';\nimport { ProductReferencesAdapter } from '../../../product/connectors/references/product-references.adapter';\nimport { ProductReviewsAdapter } from '../../../product/connectors/reviews/product-reviews.adapter';\nimport { PRODUCT_SEARCH_PAGE_NORMALIZER } from '../../../product/connectors/search/converters';\nimport { ProductSearchAdapter } from '../../../product/connectors/search/product-search.adapter';\nimport { OccProductReferencesListNormalizer } from './converters/occ-product-references-list-normalizer';\nimport { OccProductSearchPageNormalizer } from './converters/occ-product-search-page-normalizer';\nimport { ProductImageNormalizer } from './converters/product-image-normalizer';\nimport { OccProductReferencesAdapter } from './occ-product-references.adapter';\nimport { OccProductReviewsAdapter } from './occ-product-reviews.adapter';\nimport { OccProductSearchAdapter } from './occ-product-search.adapter';\nimport { OccProductAdapter } from './occ-product.adapter';\nimport { ProductNameNormalizer } from './converters/product-name-normalizer';\nimport { defaultOccProductConfig } from './default-occ-product-config';\nimport './product-occ-config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccProductConfig),\n    {\n      provide: ProductAdapter,\n      useClass: OccProductAdapter,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductImageNormalizer,\n      multi: true,\n    },\n    {\n      provide: PRODUCT_NORMALIZER,\n      useExisting: ProductNameNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReferencesAdapter,\n      useClass: OccProductReferencesAdapter,\n    },\n    {\n      provide: PRODUCT_REFERENCES_NORMALIZER,\n      useExisting: OccProductReferencesListNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductSearchAdapter,\n      useClass: OccProductSearchAdapter,\n    },\n    {\n      provide: PRODUCT_SEARCH_PAGE_NORMALIZER,\n      useExisting: OccProductSearchPageNormalizer,\n      multi: true,\n    },\n    {\n      provide: ProductReviewsAdapter,\n      useClass: OccProductReviewsAdapter,\n    },\n  ],\n})\nexport class ProductOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../util/converter.service';\nimport { Currency, Language } from '../../model/misc.model';\nimport { Country, Region } from '../../model/address.model';\n\nexport const LANGUAGE_NORMALIZER = new InjectionToken<Converter<any, Language>>(\n  'LanguageNormalizer'\n);\n\nexport const CURRENCY_NORMALIZER = new InjectionToken<Converter<any, Currency>>(\n  'CurrencyNormalizer'\n);\n\nexport const COUNTRY_NORMALIZER = new InjectionToken<Converter<any, Country>>(\n  'CountryNormalizer'\n);\n\nexport const REGION_NORMALIZER = new InjectionToken<Converter<any, Region>>(\n  'RegionNormalizer'\n);\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country, CountryType, Region } from '../../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../../model/misc.model';\nimport {\n  COUNTRY_NORMALIZER,\n  CURRENCY_NORMALIZER,\n  LANGUAGE_NORMALIZER,\n  REGION_NORMALIZER,\n} from '../../../site-context/connectors/converters';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccSiteAdapter implements SiteAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  loadLanguages(): Observable<Language[]> {\n    return this.http\n      .get<Occ.LanguageList>(this.occEndpointsService.getUrl('languages'))\n      .pipe(\n        map((languageList) => languageList.languages),\n        this.converterService.pipeableMany(LANGUAGE_NORMALIZER)\n      );\n  }\n\n  loadCurrencies(): Observable<Currency[]> {\n    return this.http\n      .get<Occ.CurrencyList>(this.occEndpointsService.getUrl('currencies'))\n      .pipe(\n        map((currencyList) => currencyList.currencies),\n        this.converterService.pipeableMany(CURRENCY_NORMALIZER)\n      );\n  }\n\n  loadCountries(type?: CountryType): Observable<Country[]> {\n    return this.http\n      .get<Occ.CountryList>(\n        this.occEndpointsService.getUrl(\n          'countries',\n          undefined,\n          type ? { type } : undefined\n        )\n      )\n      .pipe(\n        map((countryList) => countryList.countries),\n        this.converterService.pipeableMany(COUNTRY_NORMALIZER)\n      );\n  }\n\n  loadRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.http\n      .get<Occ.RegionList>(\n        this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode })\n      )\n      .pipe(\n        map((regionList) => regionList.regions),\n        this.converterService.pipeableMany(REGION_NORMALIZER)\n      );\n  }\n\n  loadBaseSite(): Observable<BaseSite> {\n    const baseUrl = this.occEndpointsService.getBaseEndpoint();\n    const urlSplits = baseUrl.split('/');\n    const activeSite = urlSplits.pop();\n    const url = urlSplits.join('/') + '/basesites';\n\n    const params = new HttpParams({\n      fromString: 'fields=FULL',\n    });\n\n    return this.http\n      .get<{ baseSites: BaseSite[] }>(url, { params: params })\n      .pipe(\n        map((siteList) => {\n          return siteList.baseSites.find((site) => site.uid === activeSite);\n        })\n      );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\n\nexport abstract class SiteAdapter {\n  /**\n   * Abstract method used to load languages.\n   */\n  abstract loadLanguages(): Observable<Language[]>;\n\n  /**\n   * Abstract method used to load currencies.\n   */\n  abstract loadCurrencies(): Observable<Currency[]>;\n\n  /**\n   * Abstract method used to get countries with optional type.\n   */\n  abstract loadCountries(type?: CountryType): Observable<Country[]>;\n\n  /**\n   * Abstract method used to get regions for a country.\n   */\n  abstract loadRegions(countryIsoCode: string): Observable<Region[]>;\n\n  /**\n   * Abstract method used to get base site data.\n   */\n  abstract loadBaseSite(): Observable<BaseSite>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccSiteContextConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        languages: 'languages',\n        currencies: 'currencies',\n        countries: 'countries',\n        regions:\n          'countries/${isoCode}/regions?fields=regions(name,isocode,isocodeShort)',\n      },\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Currency } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { CURRENCY_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to curreny state, actions and selectors.\n */\n@Injectable()\nexport class CurrencyService implements SiteContext<Currency> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the currencies supported by the current store.\n   */\n  getAll(): Observable<Currency[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllCurrencies),\n      tap((currencies) => {\n        if (!currencies) {\n          this.store.dispatch(new SiteContextActions.LoadCurrencies());\n        }\n      }),\n      filter((currenies) => Boolean(currenies))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active currency.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveCurrency),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveCurrency), take(1))\n      .subscribe((activeCurrency) => {\n        if (activeCurrency !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveCurrency(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active currency. The active currency is either given\n   * by the last visit (stored in session storage) or by the\n   * default session currency of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionCurrency =\n      this.sessionStorage && this.sessionStorage.getItem('currency');\n    if (\n      sessionCurrency &&\n      getContextParameterValues(this.config, CURRENCY_CONTEXT_ID).includes(\n        sessionCurrency\n      )\n    ) {\n      this.setActive(sessionCurrency);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, CURRENCY_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { Language } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { LANGUAGE_CONTEXT_ID } from '../providers/context-ids';\nimport { SiteContextActions } from '../store/actions/index';\nimport { SiteContextSelectors } from '../store/selectors/index';\nimport { StateWithSiteContext } from '../store/state';\nimport { SiteContext } from './site-context.interface';\n\n/**\n * Facade that provides easy access to language state, actions and selectors.\n */\n@Injectable()\nexport class LanguageService implements SiteContext<Language> {\n  private sessionStorage: Storage;\n\n  constructor(\n    protected store: Store<StateWithSiteContext>,\n    winRef: WindowRef,\n    protected config: SiteContextConfig\n  ) {\n    this.sessionStorage = winRef.sessionStorage;\n  }\n\n  /**\n   * Represents all the languages supported by the current store.\n   */\n  getAll(): Observable<Language[]> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getAllLanguages),\n      tap((languages) => {\n        if (!languages) {\n          this.store.dispatch(new SiteContextActions.LoadLanguages());\n        }\n      }),\n      filter((languages) => Boolean(languages))\n    );\n  }\n\n  /**\n   * Represents the isocode of the active language.\n   */\n  getActive(): Observable<string> {\n    return this.store.pipe(\n      select(SiteContextSelectors.getActiveLanguage),\n      filter((active) => Boolean(active))\n    );\n  }\n\n  /**\n   * Sets the active language.\n   */\n  setActive(isocode: string) {\n    return this.store\n      .pipe(select(SiteContextSelectors.getActiveLanguage), take(1))\n      .subscribe((activeLanguage) => {\n        if (activeLanguage !== isocode) {\n          this.store.dispatch(\n            new SiteContextActions.SetActiveLanguage(isocode)\n          );\n        }\n      });\n  }\n\n  /**\n   * Initials the active language. The active language is either given\n   * by the last visit (stored in session storage) or by the\n   * default session language of the store.\n   */\n  initialize() {\n    let value;\n    this.getActive()\n      .subscribe((val) => (value = val))\n      .unsubscribe();\n    if (value) {\n      // don't initialize, if there is already a value (i.e. retrieved from route or transferred from SSR)\n      return;\n    }\n\n    const sessionLanguage =\n      this.sessionStorage && this.sessionStorage.getItem('language');\n    if (\n      sessionLanguage &&\n      getContextParameterValues(this.config, LANGUAGE_CONTEXT_ID).includes(\n        sessionLanguage\n      )\n    ) {\n      this.setActive(sessionLanguage);\n    } else {\n      this.setActive(\n        getContextParameterDefault(this.config, LANGUAGE_CONTEXT_ID)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { CurrencyService } from '../../../site-context/facade/currency.service';\nimport { LanguageService } from '../../../site-context/facade/language.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { SiteContextConfig } from '../../../site-context/config/site-context-config';\nimport { getContextParameterDefault } from '../../../site-context/config/context-config-utils';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../../site-context/providers/context-ids';\n\n@Injectable({ providedIn: 'root' })\nexport class SiteContextInterceptor implements HttpInterceptor {\n  activeLang: string;\n  activeCurr: string;\n\n  constructor(\n    private languageService: LanguageService,\n    private currencyService: CurrencyService,\n    private occEndpoints: OccEndpointsService,\n    private config: SiteContextConfig\n  ) {\n    this.activeLang = getContextParameterDefault(\n      this.config,\n      LANGUAGE_CONTEXT_ID\n    );\n    this.activeCurr = getContextParameterDefault(\n      this.config,\n      CURRENCY_CONTEXT_ID\n    );\n\n    this.languageService\n      .getActive()\n      .subscribe((data) => (this.activeLang = data));\n\n    this.currencyService.getActive().subscribe((data) => {\n      this.activeCurr = data;\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes(this.occEndpoints.getBaseEndpoint())) {\n      request = request.clone({\n        setParams: {\n          lang: this.activeLang,\n          curr: this.activeCurr,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { SiteAdapter } from '../../../site-context/connectors/site.adapter';\nimport { defaultOccSiteContextConfig } from './default-occ-site-context-config';\nimport { OccSiteAdapter } from './occ-site.adapter';\nimport { SiteContextInterceptor } from './site-context.interceptor';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccSiteContextConfig),\n    {\n      provide: SiteAdapter,\n      useClass: OccSiteAdapter,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: SiteContextInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class SiteContextOccModule {}\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccStoreFinderConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        store: 'stores/${storeId}?fields=FULL',\n        stores:\n          'stores?fields=stores(name,displayName,formattedDistance,openingHours(weekDayOpeningList(FULL),specialDayOpeningList(FULL)),geoPoint(latitude,longitude),address(line1,line2,town,region(FULL),postalCode,phone,country,email), features),pagination(DEFAULT),sorts(DEFAULT)',\n        storescounts: 'stores/storescounts',\n      },\n    },\n  },\n};\n","import { StoreFinderSearchConfig } from '../model/search-config';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { GeoPoint } from '../../model/misc.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { Converter } from '../../util/converter.service';\nimport { PointOfService } from '../../model/point-of-service.model';\nimport { InjectionToken } from '@angular/core';\nimport {\n  StoreFinderSearchPage,\n  StoreCount,\n} from '../../model/store-finder.model';\n\nexport const POINT_OF_SERVICE_NORMALIZER = new InjectionToken<\n  Converter<any, PointOfService>\n>('PointOfServiceNormalizer');\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { GeoPoint } from '../../../model/misc.model';\nimport { PointOfService } from '../../../model/point-of-service.model';\nimport {\n  StoreCount,\n  StoreFinderSearchPage,\n} from '../../../model/store-finder.model';\nimport {\n  POINT_OF_SERVICE_NORMALIZER,\n  STORE_COUNT_NORMALIZER,\n  STORE_FINDER_SEARCH_PAGE_NORMALIZER,\n} from '../../../store-finder/connectors';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { StoreFinderSearchConfig } from '../../../store-finder/model';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccStoreFinderAdapter implements StoreFinderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpointsService: OccEndpointsService,\n    protected converterService: ConverterService\n  ) {}\n\n  search(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.callOccFindStores(\n      query,\n      searchConfig,\n      longitudeLatitude,\n      radius\n    ).pipe(this.converterService.pipeable(STORE_FINDER_SEARCH_PAGE_NORMALIZER));\n  }\n\n  loadCounts(): Observable<StoreCount[]> {\n    return this.http\n      .get<Occ.StoreCountList>(this.occEndpointsService.getUrl('storescounts'))\n      .pipe(\n        map(\n          ({ countriesAndRegionsStoreCount }) => countriesAndRegionsStoreCount\n        ),\n        this.converterService.pipeableMany(STORE_COUNT_NORMALIZER)\n      );\n  }\n\n  load(storeId: string): Observable<PointOfService> {\n    return this.http\n      .get<Occ.PointOfService>(\n        this.occEndpointsService.getUrl('store', { storeId })\n      )\n      .pipe(this.converterService.pipeable(POINT_OF_SERVICE_NORMALIZER));\n  }\n\n  protected callOccFindStores(\n    query: string,\n    searchConfig: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<Occ.StoreFinderSearchPage> {\n    const params = {};\n\n    if (longitudeLatitude) {\n      params['longitude'] = String(longitudeLatitude.longitude);\n      params['latitude'] = String(longitudeLatitude.latitude);\n      params['radius'] = String(radius);\n    } else {\n      params['query'] = query;\n    }\n\n    if (searchConfig.pageSize) {\n      params['pageSize'] = String(searchConfig.pageSize);\n    }\n    if (searchConfig.currentPage) {\n      params['currentPage'] = String(searchConfig.currentPage);\n    }\n    if (searchConfig.sort) {\n      params['sort'] = searchConfig.sort;\n    }\n\n    return this.http.get<Occ.StoreFinderSearchPage>(\n      this.occEndpointsService.getUrl('stores', undefined, params)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { StoreFinderAdapter } from '../../../store-finder/connectors/store-finder.adapter';\nimport { defaultOccStoreFinderConfig } from './default-occ-store-finder-config';\nimport { OccStoreFinderAdapter } from './occ-store-finder.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccStoreFinderConfig),\n    { provide: StoreFinderAdapter, useClass: OccStoreFinderAdapter },\n  ],\n})\nexport class StoreFinderOccModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport const CONSENT_TEMPLATE_NORMALIZER = new InjectionToken<\n  Converter<any, ConsentTemplate>\n>('ConsentTemplateNormalizer');\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccAnonymousConsentTemplatesAdapter\n  implements AnonymousConsentTemplatesAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('anonymousConsentTemplates');\n    return this.http.get<Occ.ConsentTemplateList>(url).pipe(\n      catchError((error) => throwError(error)),\n      map((consentList) => consentList.consentTemplates),\n      this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n    );\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Address, AddressValidation } from '../../../model/address.model';\nimport {\n  ADDRESS_NORMALIZER,\n  ADDRESS_SERIALIZER,\n  ADDRESS_VALIDATION_NORMALIZER,\n} from '../../../user/connectors/address/converters';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserAddressAdapter implements UserAddressAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<Address[]> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.AddressList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((addressList) => addressList.addresses),\n        this.converter.pipeableMany(ADDRESS_NORMALIZER)\n      );\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addresses', { userId });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .patch(url, address, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    const url = this.occEndpoints.getUrl('addressVerification', { userId });\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n    address = this.converter.convert(address, ADDRESS_SERIALIZER);\n\n    return this.http\n      .post<AddressValidation>(url, address, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        this.converter.pipeable(ADDRESS_VALIDATION_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('addressDetail', {\n      userId,\n      addressId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { CONSENT_TEMPLATE_NORMALIZER } from '../../../user/connectors/consent/converters';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserConsentAdapter implements UserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    const url = this.occEndpoints.getUrl('consentTemplates', { userId });\n    const headers = new HttpHeaders({ 'Cache-Control': 'no-cache' });\n    return this.http\n      .get<Occ.ConsentTemplateList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((consentList) => consentList.consentTemplates),\n        this.converter.pipeableMany(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    const url = this.occEndpoints.getUrl('consents', { userId });\n    const httpParams = new HttpParams()\n      .set('consentTemplateId', consentTemplateId)\n      .set('consentTemplateVersion', consentTemplateVersion.toString());\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cache-Control': 'no-cache',\n    });\n    return this.http\n      .post<Occ.ConsentTemplate>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(error)),\n        this.converter.pipeable(CONSENT_TEMPLATE_NORMALIZER)\n      );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    const headers = new HttpHeaders({\n      'Cache-Control': 'no-cache',\n    });\n    const url = this.occEndpoints.getUrl('consentDetail', {\n      userId,\n      consentId: consentCode,\n    });\n\n    return this.http.delete(url, { headers });\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport {\n  OrderHistoryList,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequest,\n} from '../../../model/order.model';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ORDER_NORMALIZER } from '../../../checkout/connectors/checkout/converters';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  CONSIGNMENT_TRACKING_NORMALIZER,\n  ORDER_HISTORY_NORMALIZER,\n  ORDER_RETURNS_NORMALIZER,\n  ORDER_RETURN_REQUEST_INPUT_SERIALIZER,\n  ORDER_RETURN_REQUEST_NORMALIZER,\n} from '../../../user/connectors/order/converters';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\nimport {\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n} from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccUserOrderAdapter implements UserOrderAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  public load(userId: string, orderCode: string): Observable<Order> {\n    const url = this.occEndpoints.getUrl('orderDetail', {\n      userId,\n      orderId: orderCode,\n    });\n\n    let headers = new HttpHeaders();\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    }\n\n    return this.http\n      .get<Occ.Order>(url, { headers })\n      .pipe(this.converter.pipeable(ORDER_NORMALIZER));\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderHistory', { userId }, params);\n\n    return this.http\n      .get<Occ.OrderHistoryList>(url)\n      .pipe(this.converter.pipeable(ORDER_HISTORY_NORMALIZER));\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId: string = OCC_USER_ID_CURRENT\n  ): Observable<ConsignmentTracking> {\n    const url = this.occEndpoints.getUrl('consignmentTracking', {\n      userId,\n      orderCode,\n      consignmentCode,\n    });\n    return this.http\n      .get<ConsignmentTracking>(url)\n      .pipe(this.converter.pipeable(CONSIGNMENT_TRACKING_NORMALIZER));\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelOrder', {\n      userId,\n      orderId: orderCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .post(url, cancelRequestInput, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  public createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('returnOrder', {\n      userId,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    returnRequestInput = this.converter.convert(\n      returnRequestInput,\n      ORDER_RETURN_REQUEST_INPUT_SERIALIZER\n    );\n\n    return this.http.post(url, returnRequestInput, { headers }).pipe(\n      catchError((error: any) => throwError(error)),\n      this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER)\n    );\n  }\n\n  public loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    const params = {};\n    if (pageSize) {\n      params['pageSize'] = pageSize.toString();\n    }\n    if (currentPage) {\n      params['currentPage'] = currentPage.toString();\n    }\n    if (sort) {\n      params['sort'] = sort.toString();\n    }\n\n    const url = this.occEndpoints.getUrl('orderReturns', { userId }, params);\n\n    return this.http\n      .get<ReturnRequestList>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURNS_NORMALIZER));\n  }\n\n  public loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    const url = this.occEndpoints.getUrl('orderReturnDetail', {\n      userId,\n      returnRequestCode,\n    });\n\n    return this.http\n      .get<ReturnRequest>(url)\n      .pipe(this.converter.pipeable(ORDER_RETURN_REQUEST_NORMALIZER));\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('cancelReturn', {\n      userId,\n      returnRequestCode,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(url, returnRequestModification, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { PAYMENT_DETAILS_NORMALIZER } from '../../../checkout/connectors/payment/converters';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\n@Injectable()\nexport class OccUserPaymentAdapter implements UserPaymentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  loadAll(userId: string): Observable<PaymentDetails[]> {\n    const url =\n      this.occEndpoints.getUrl('paymentDetailsAll', { userId }) + '?saved=true';\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .get<Occ.PaymentDetailsList>(url, { headers })\n      .pipe(\n        catchError((error: any) => throwError(error)),\n        map((methodList) => methodList.payments),\n        this.converter.pipeableMany(PAYMENT_DETAILS_NORMALIZER)\n      );\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .delete(url, { headers })\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('paymentDetail', {\n      userId,\n      paymentDetailId: paymentMethodID,\n    });\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http\n      .patch(\n        url,\n        // TODO: Remove billingAddress property\n        { billingAddress: { titleCode: 'mr' }, defaultPayment: true },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport const USER_NORMALIZER = new InjectionToken<Converter<any, User>>(\n  'UserNormalizer'\n);\n\nexport const USER_SERIALIZER = new InjectionToken<Converter<User, any>>(\n  'UserSerializer'\n);\n\nexport const USER_SIGN_UP_SERIALIZER = new InjectionToken<\n  Converter<UserSignUp, any>\n>('UserSignUpSerializer');\n\nexport const TITLE_NORMALIZER = new InjectionToken<Converter<any, Title>>(\n  'TitleNormalizer'\n);\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport {\n  TITLE_NORMALIZER,\n  USER_NORMALIZER,\n  USER_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '../../../user/connectors/user/converters';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport {\n  InterceptorUtil,\n  USE_CLIENT_TOKEN,\n} from '../../utils/interceptor-util';\n@Injectable()\nexport class OccUserAdapter implements UserAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  load(userId: string): Observable<User> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http\n      .get<Occ.User>(url)\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  update(userId: string, user: User): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    user = this.converter.convert(user, USER_SERIALIZER);\n    return this.http.patch(url, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(this.converter.pipeable(USER_NORMALIZER));\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http.post(url, httpParams, { headers });\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http.post(url, { token, newPassword }, { headers });\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http.put(url, httpParams, { headers });\n  }\n\n  remove(userId: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('user', { userId });\n    return this.http.delete<User>(url);\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      map((titleList) => titleList.titles),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\n\nexport abstract class AnonymousConsentTemplatesAdapter {\n  /**\n   * Abstract method used to load anonymous consents.\n   */\n  abstract loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]>;\n}\n","import { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport abstract class UserAddressAdapter {\n  abstract loadAll(userId: string): Observable<Address[]>;\n\n  abstract add(userId: string, address: Address): Observable<{}>;\n\n  abstract update(\n    userId: string,\n    addressId: string,\n    address: Address\n  ): Observable<{}>;\n\n  abstract verify(\n    userId: string,\n    address: Address\n  ): Observable<AddressValidation>;\n\n  abstract delete(userId: string, addressId: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\nexport abstract class UserConsentAdapter {\n  abstract loadConsents(userId: string): Observable<ConsentTemplate[]>;\n\n  abstract giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate>;\n\n  abstract withdrawConsent(userId: string, consentCode: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\n\nexport abstract class UserOrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\nexport abstract class UserPaymentAdapter {\n  abstract loadAll(userId: string): Observable<PaymentDetails[]>;\n\n  abstract delete(userId: string, paymentMethodID: string): Observable<{}>;\n\n  abstract setDefault(userId: string, paymentMethodID: string): Observable<{}>;\n}\n","import { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\n\nexport abstract class UserAdapter {\n  abstract load(userId: string): Observable<User>;\n\n  abstract update(username: string, user: User): Observable<{}>;\n\n  abstract register(user: UserSignUp): Observable<User>;\n\n  abstract registerGuest(guid: string, password: string): Observable<User>;\n\n  abstract requestForgotPasswordEmail(userEmailAddress: string): Observable<{}>;\n\n  abstract resetPassword(token: string, newPassword: string): Observable<{}>;\n\n  abstract updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}>;\n\n  abstract updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}>;\n\n  abstract remove(userId: string): Observable<{}>;\n\n  abstract loadTitles(): Observable<Title[]>;\n}\n","import { OccConfig } from '../../config/occ-config';\n\nexport const defaultOccUserConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        // tslint:disable:max-line-length\n        user: 'users/${userId}',\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n        paymentDetailsAll: 'users/${userId}/paymentdetails',\n        paymentDetail: 'users/${userId}/paymentdetails/${paymentDetailId}',\n        orderHistory: 'users/${userId}/orders',\n        orderDetail: 'users/${userId}/orders/${orderId}?fields=FULL',\n        anonymousConsentTemplates: 'users/anonymous/consenttemplates',\n        consentTemplates: 'users/${userId}/consenttemplates',\n        consents: 'users/${userId}/consents',\n        consentDetail: 'users/${userId}/consents/${consentId}',\n        addresses: 'users/${userId}/addresses',\n        addressDetail: 'users/${userId}/addresses/${addressId}',\n        addressVerification: 'users/${userId}/addresses/verification',\n        consignmentTracking:\n          'users/${userId}/orders/${orderCode}/consignments/${consignmentCode}/tracking',\n        customerCoupons: 'users/${userId}/customercoupons',\n        claimCoupon: 'users/${userId}/customercoupons/${couponCode}/claim',\n        couponNotification:\n          'users/${userId}/customercoupons/${couponCode}/notification',\n        notificationPreference: 'users/${userId}/notificationpreferences',\n        productInterests: 'users/${userId}/productinterests',\n        getProductInterests:\n          'users/${userId}/productinterests?fields=sorts,pagination,results(productInterestEntry,product(code))',\n        cancelOrder: 'users/${userId}/orders/${orderId}/cancellation',\n        returnOrder:\n          'users/${userId}/orderReturns?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        orderReturns: 'users/${userId}/orderReturns?fields=BASIC',\n        orderReturnDetail:\n          'users/${userId}/orderReturns/${returnRequestCode}?fields=BASIC,returnEntries(BASIC,refundAmount(formattedValue),orderEntry(basePrice(formattedValue),product(name,code,baseOptions,images(DEFAULT,galleryIndex)))),deliveryCost(formattedValue),totalPrice(formattedValue),subTotal(formattedValue)',\n        cancelReturn: 'users/${userId}/orderReturns/${returnRequestCode}',\n        // tslint:enable\n      },\n    },\n  },\n};\n","import { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\n\nexport abstract class CustomerCouponAdapter {\n  abstract getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult>;\n\n  abstract turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification>;\n\n  abstract turnOffNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<{}>;\n\n  abstract claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerCouponSearchResult>\n>('CustomerCouponSearchResultNormalizer');\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  CustomerCoupon2Customer,\n  CustomerCouponNotification,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\nimport { CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER } from '../../../user/connectors/customer-coupon/converters';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { Occ } from '../../occ-models/occ.models';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { OCC_USER_ID_ANONYMOUS } from '../../utils/occ-constants';\n\n@Injectable()\nexport class OccCustomerCouponAdapter implements CustomerCouponAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    // Currently OCC only supports calls for customer coupons in case of logged users\n    if (userId === OCC_USER_ID_ANONYMOUS) {\n      return of({});\n    }\n\n    const url = this.occEndpoints.getUrl('customerCoupons', { userId });\n\n    let params = new HttpParams().set('sort', sort ? sort : 'startDate:asc');\n\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n\n    const headers = this.newHttpHeader();\n\n    return this.http\n      .get<Occ.CustomerCouponSearchResult>(url, { headers, params })\n      .pipe(this.converter.pipeable(CUSTOMER_COUPON_SEARCH_RESULT_NORMALIZER));\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.delete(url, { headers });\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    const url = this.occEndpoints.getUrl('couponNotification', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    const url = this.occEndpoints.getUrl('claimCoupon', {\n      userId,\n      couponCode,\n    });\n    const headers = this.newHttpHeader();\n\n    return this.http.post(url, { headers });\n  }\n\n  private newHttpHeader() {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  }\n}\n","import { Observable } from 'rxjs';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport abstract class UserNotificationPreferenceAdapter {\n  /**\n   * Abstract method used to load notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   */\n  abstract loadAll(userId: string): Observable<NotificationPreference[]>;\n\n  /**\n   * Abstract method used to update notification preferences for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param preferences The notification preferences to be updated.\n   */\n  abstract update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}>;\n}\n","import { InjectionToken } from '@angular/core';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { Converter } from '../../../util/converter.service';\n\nexport const NOTIFICATION_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<NotificationPreference[], any>\n>('NotificationPreferenceSerializer');\n\nexport const NOTIFICATION_PREFERENCE_NORMALIZER = new InjectionToken<\n  Converter<any, NotificationPreference>\n>('NotificationPreferenceNormalizer');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserNotificationPreferenceAdapter } from './user-notification-preference.adapter';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceConnector {\n  constructor(protected adapter: UserNotificationPreferenceAdapter) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  update(userId: string, preferences: NotificationPreference[]) {\n    return this.adapter.update(userId, preferences);\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  NotificationPreference,\n  NotificationPreferenceList,\n} from '../../../model/notification-preference.model';\nimport {\n  NOTIFICATION_PREFERENCE_NORMALIZER,\n  NOTIFICATION_PREFERENCE_SERIALIZER,\n} from '../../../user/connectors/notification-preference';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { ConverterService } from '../../../util/converter.service';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserNotificationPreferenceAdapter\n  implements UserNotificationPreferenceAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected converter: ConverterService,\n    protected occEndpoints: OccEndpointsService\n  ) {}\n\n  loadAll(userId: string): Observable<NotificationPreference[]> {\n    return this.http\n      .get<NotificationPreferenceList>(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        {\n          headers,\n        }\n      )\n      .pipe(\n        map((list) => list.preferences),\n        this.converter.pipeableMany(NOTIFICATION_PREFERENCE_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  update(\n    userId: string,\n    preferences: NotificationPreference[]\n  ): Observable<{}> {\n    preferences = this.converter.convert(\n      preferences,\n      NOTIFICATION_PREFERENCE_SERIALIZER\n    );\n    return this.http\n      .patch(\n        this.occEndpoints.getUrl('notificationPreference', { userId }),\n        { preferences: preferences },\n        { headers }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const PRODUCT_INTERESTS_NORMALIZER = new InjectionToken<\n  Converter<any, ProductInterestSearchResult>\n>('ProductInterestsNormalizer');\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { OccEndpointsService } from '../../services/occ-endpoints.service';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { OccConfig } from '../../config/occ-config';\nimport { ConverterService } from '../../../util/converter.service';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\n\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n});\n\n@Injectable()\nexport class OccUserInterestsAdapter implements UserInterestsAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected config: OccConfig,\n    protected converter: ConverterService\n  ) {}\n\n  public getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    let params = new HttpParams().set('sort', sort ? sort : 'name:asc');\n    if (pageSize) {\n      params = params.set('pageSize', pageSize.toString());\n    }\n    if (currentPage) {\n      params = params.set('currentPage', currentPage.toString());\n    }\n    if (productCode) {\n      params = params.set('productCode', productCode);\n    }\n    if (notificationType) {\n      params = params.set('notificationType', notificationType.toString());\n    }\n\n    return this.http\n      .get(this.occEndpoints.getUrl('getProductInterests', { userId }), {\n        headers,\n        params,\n      })\n      .pipe(\n        this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER),\n        catchError((error: any) => throwError(error))\n      );\n  }\n\n  public removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    const r: Observable<any>[] = [];\n    item.productInterestEntry.forEach((entry: any) => {\n      const params: HttpParams = new HttpParams()\n        .set('productCode', item.product.code)\n        .set('notificationType', entry.interestType);\n      r.push(\n        this.http\n          .delete(this.occEndpoints.getUrl('productInterests', { userId }), {\n            params: params,\n          })\n          .pipe(catchError((error: any) => throwError(error)))\n      );\n    });\n    return forkJoin(r);\n  }\n\n  public addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    const params = new HttpParams()\n      .set('productCode', productCode)\n      .set('notificationType', notificationType.toString());\n    return this.http\n      .post(\n        this.occEndpoints.getUrl('productInterests', { userId }),\n        {},\n        {\n          headers,\n          params,\n        }\n      )\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","import { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\nexport abstract class UserInterestsAdapter {\n  /**\n   * Abstract method used to load product interests for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   * @param productCode The product code\n   * @param  notificationType The notification type\n   */\n  abstract getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult>;\n\n  /**\n   * Abstract method used to remove product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param ProductInterestRelation The product interest to be removed.\n   */\n  abstract removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]>;\n\n  /**\n   * Abstract method to add a product interest for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param productCode The product code\n   * @param notificationType The notification type\n   */\n  abstract addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { ProductInterestSearchResult } from '../../../../model/product-interest.model';\n\n@Injectable({ providedIn: 'root' })\nexport class OccUserInterestsNormalizer\n  implements\n    Converter<Occ.ProductInterestSearchResult, ProductInterestSearchResult> {\n  constructor(private converter: ConverterService) {}\n\n  convert(\n    source: Occ.ProductInterestSearchResult,\n    target?: ProductInterestSearchResult\n  ): ProductInterestSearchResult {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n    if (source && source.results) {\n      target.results = source.results.map((result) => ({\n        ...result,\n        product: this.converter.convert(result.product, PRODUCT_NORMALIZER),\n      }));\n    }\n\n    return target;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Occ } from '../../../occ-models/occ.models';\nimport {\n  Converter,\n  ConverterService,\n} from '../../../../util/converter.service';\nimport { OrderEntry, ReturnRequest } from '../../../../model/order.model';\nimport { PRODUCT_NORMALIZER } from '../../../../product/connectors/product/converters';\n\n@Injectable({ providedIn: 'root' })\nexport class OccReturnRequestNormalizer\n  implements Converter<Occ.ReturnRequest, ReturnRequest> {\n  constructor(private converter: ConverterService) {}\n\n  convert(source: Occ.ReturnRequest, target?: ReturnRequest): ReturnRequest {\n    if (target === undefined) {\n      target = { ...(source as any) };\n    }\n\n    if (source.returnEntries) {\n      target.returnEntries = source.returnEntries.map((entry) => ({\n        ...entry,\n        orderEntry: this.convertOrderEntry(entry.orderEntry),\n      }));\n    }\n\n    return target;\n  }\n\n  private convertOrderEntry(source: Occ.OrderEntry): OrderEntry {\n    return {\n      ...source,\n      product: this.converter.convert(source.product, PRODUCT_NORMALIZER),\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AnonymousConsentTemplatesAdapter } from '../../../anonymous-consents/connectors/anonymous-consent-templates.adapter';\nimport { provideDefaultConfig } from '../../../config/config.module';\nimport { UserAddressAdapter } from '../../../user/connectors/address/user-address.adapter';\nimport { UserConsentAdapter } from '../../../user/connectors/consent/user-consent.adapter';\nimport { UserOrderAdapter } from '../../../user/connectors/order/user-order.adapter';\nimport { UserPaymentAdapter } from '../../../user/connectors/payment/user-payment.adapter';\nimport { UserAdapter } from '../../../user/connectors/user/user.adapter';\nimport { defaultOccUserConfig } from './default-occ-user-config';\nimport { OccAnonymousConsentTemplatesAdapter } from './occ-anonymous-consent-templates.adapter';\nimport { OccUserAddressAdapter } from './occ-user-address.adapter';\nimport { OccUserConsentAdapter } from './occ-user-consent.adapter';\nimport { OccUserOrderAdapter } from './occ-user-order.adapter';\nimport { OccUserPaymentAdapter } from './occ-user-payment.adapter';\nimport { OccUserAdapter } from './occ-user.adapter';\nimport { CustomerCouponAdapter } from '../../../user/connectors/customer-coupon/customer-coupon.adapter';\nimport { OccCustomerCouponAdapter } from '../user/occ-customer-coupon.adapter';\nimport { UserNotificationPreferenceAdapter } from '../../../user/connectors/notification-preference/user-notification-preference.adapter';\nimport { OccUserNotificationPreferenceAdapter } from './occ-user-notification-preference.adapter';\nimport { OccUserInterestsAdapter } from './occ-user-interests.adapter';\nimport { UserInterestsAdapter } from '../../../user/connectors/interests/user-interests.adapter';\nimport { OccUserInterestsNormalizer } from './converters/occ-user-interests-normalizer';\nimport { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';\nimport { ORDER_RETURN_REQUEST_NORMALIZER } from '../../../user/connectors/order/converters';\nimport { OccReturnRequestNormalizer } from './converters/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  providers: [\n    provideDefaultConfig(defaultOccUserConfig),\n    { provide: UserAdapter, useClass: OccUserAdapter },\n    { provide: UserAddressAdapter, useClass: OccUserAddressAdapter },\n    { provide: UserConsentAdapter, useClass: OccUserConsentAdapter },\n    {\n      provide: AnonymousConsentTemplatesAdapter,\n      useClass: OccAnonymousConsentTemplatesAdapter,\n    },\n    {\n      provide: UserPaymentAdapter,\n      useClass: OccUserPaymentAdapter,\n    },\n    { provide: UserOrderAdapter, useClass: OccUserOrderAdapter },\n    { provide: CustomerCouponAdapter, useClass: OccCustomerCouponAdapter },\n    {\n      provide: UserNotificationPreferenceAdapter,\n      useClass: OccUserNotificationPreferenceAdapter,\n    },\n    { provide: UserInterestsAdapter, useClass: OccUserInterestsAdapter },\n    {\n      provide: PRODUCT_INTERESTS_NORMALIZER,\n      useExisting: OccUserInterestsNormalizer,\n      multi: true,\n    },\n    {\n      provide: ORDER_RETURN_REQUEST_NORMALIZER,\n      useExisting: OccReturnRequestNormalizer,\n      multi: true,\n    },\n  ],\n})\nexport class UserOccModule {}\n","import { Injectable, isDevMode } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class JavaRegExpConverter {\n  /**\n   * Pattern that extracts modifiers from the Java regexp.\n   *\n   * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:\n   * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`\n   * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`\n   * - or multiple combined:  `(?iu)PATTERN`\n   * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n   *\n   * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:\n   *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)\n   *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)\n   *    3. the rest of the regexp, i.e. `PATTERN`\n   */\n  private readonly EXTRACT_JAVA_REGEXP_MODIFIERS: RegExp = /^(\\(\\?([a-z]+)\\))?(.*)/;\n\n  /**\n   * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers\n   * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)\n   *\n   * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!\n   * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.\n   *\n   * See differences between Java and Javascript regexps:\n   * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax\n   * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features\n   */\n  toJsRegExp(javaSyntax: string): RegExp {\n    const parts = javaSyntax.match(this.EXTRACT_JAVA_REGEXP_MODIFIERS);\n    if (!parts) {\n      return null;\n    }\n    const [, , modifiers, jsSyntax] = parts;\n    try {\n      return new RegExp(jsSyntax, modifiers);\n    } catch (error) {\n      if (isDevMode()) {\n        console.warn(\n          `WARNING: Could not convert Java regexp into Javascript. Original regexp: ${javaSyntax} \\nMessage: ${error}`\n        );\n      }\n      return null;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const CONFIG_INITIALIZER = new InjectionToken('ConfigInitializer');\n\n/**\n * Used to provide asynchronous config during app initialization\n */\nexport interface ConfigInitializer {\n  /**\n   * List of config parts that are resolved by configFactory, e.g.:\n   * 'context.baseSite', 'context.language'\n   */\n  scopes: string[];\n  /**\n   * Promise that returns config chunk\n   */\n  configFactory: () => Promise<any>;\n}\n\nexport const CONFIG_INITIALIZER_FORROOT_GUARD = new InjectionToken<void>(\n  'CONFIG_INITIALIZER_FORROOT_GUARD'\n);\n","import { InjectionToken } from '@angular/core';\n\n/**\n * The url of the server request when running SSR\n * */\nexport const SERVER_REQUEST_URL = new InjectionToken<string>(\n  'SERVER_REQUEST_URL'\n);\n\n/**\n * The url of the server request host when running SSR\n * */\nexport const SERVER_REQUEST_ORIGIN = new InjectionToken<string>(\n  'SERVER_REQUEST_ORIGIN'\n);\n","import { Injectable } from '@angular/core';\nimport { I18nConfig } from '../../i18n';\nimport { BaseSite } from '../../model/misc.model';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../../site-context/providers/context-ids';\nimport { Occ } from '../occ-models/occ.models';\nimport { JavaRegExpConverter } from './java-reg-exp-converter';\nimport { OccLoadedConfig } from './occ-loaded-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccLoadedConfigConverter {\n  constructor(private javaRegExpConverter: JavaRegExpConverter) {}\n\n  fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig {\n    const baseSite = baseSites.find((site) =>\n      this.isCurrentBaseSite(site, currentUrl)\n    );\n    if (!baseSite) {\n      throw this.getError(\n        `Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`\n      );\n    }\n\n    // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.\n    const baseStore = baseSite.stores && baseSite.stores[0];\n    if (!baseStore) {\n      throw this.getError(\n        `Current base site (${baseSite.uid}) doesn't have any base store.`\n      );\n    }\n\n    return {\n      baseSite: baseSite.uid,\n      languages: this.getIsoCodes(\n        baseStore.languages,\n        baseSite.defaultLanguage || baseStore.defaultLanguage\n      ),\n      currencies: this.getIsoCodes(\n        baseStore.currencies,\n        baseStore.defaultCurrency\n      ),\n      urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),\n    };\n  }\n\n  toSiteContextConfig({\n    baseSite,\n    languages,\n    currencies,\n    urlParameters: urlEncodingAttributes,\n  }: OccLoadedConfig): SiteContextConfig {\n    const result = {\n      context: {\n        urlParameters: urlEncodingAttributes,\n        [BASE_SITE_CONTEXT_ID]: [baseSite],\n        [LANGUAGE_CONTEXT_ID]: languages,\n        [CURRENCY_CONTEXT_ID]: currencies,\n      },\n    };\n    return result;\n  }\n\n  toI18nConfig({ languages }: OccLoadedConfig): I18nConfig {\n    return { i18n: { fallbackLang: languages[0] } };\n  }\n\n  private isCurrentBaseSite(site: Occ.BaseSite, currentUrl: string): boolean {\n    const index = (site.urlPatterns || []).findIndex((javaRegexp) => {\n      const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);\n      if (jsRegexp) {\n        const result = jsRegexp.test(currentUrl);\n        return result;\n      }\n    });\n\n    return index !== -1;\n  }\n\n  /**\n   * Returns an array of url encoded site context parameters.\n   *\n   * It maps the string \"storefront\" (used in OCC) to the \"baseSite\" (used in Spartacus)\n   */\n  private getUrlParams(params: string[]): string[] {\n    const STOREFRONT_PARAM = 'storefront';\n\n    return (params || []).map((param) =>\n      param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param\n    );\n  }\n\n  /**\n   * Returns iso codes in a array, where the first element is the default iso code.\n   */\n  private getIsoCodes(\n    elements: { isocode?: string }[],\n    defaultElement: { isocode?: string }\n  ) {\n    const result = this.moveToFirst(\n      elements,\n      (el) => el.isocode === defaultElement.isocode\n    ).map((el) => el.isocode);\n    return result;\n  }\n\n  /**\n   * Moves to the start of the array the first element that satisfies the given predicate.\n   *\n   * @param array array to modify\n   * @param predicate function called on elements\n   */\n  private moveToFirst(array: any[], predicate: (el: any) => boolean): any[] {\n    array = [...array];\n    const index = array.findIndex(predicate);\n    if (index !== -1) {\n      const [el] = array.splice(index, 1);\n      array.unshift(el);\n    }\n    return array;\n  }\n\n  private getError(message: string): Error {\n    return new Error(`Error: Cannot get base site config! ${message}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseSite } from '../../model/misc.model';\nimport { OccConfig } from '../config/occ-config';\nimport { Occ } from '../occ-models/occ.models';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSitesConfigLoader {\n  constructor(protected config: OccConfig, protected http: HttpClient) {}\n\n  protected readonly endpoint =\n    'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)))';\n\n  private get baseEndpoint(): string {\n    return (\n      (this.config.backend.occ.baseUrl || '') + this.config.backend.occ.prefix\n    );\n  }\n\n  private get url(): string {\n    return `${this.baseEndpoint}${this.endpoint}`;\n  }\n\n  load(): Observable<BaseSite[]> {\n    if (!this.config || !this.config.backend || !this.config.backend.occ) {\n      return throwError(new Error(`Missing config for OCC backend!`));\n    }\n\n    return this.http\n      .get<Occ.BaseSites>(this.url)\n      .pipe(map(({ baseSites }) => baseSites));\n  }\n}\n","import { DOCUMENT, isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  makeStateKey,\n  StateKey,\n  TransferState,\n} from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Config } from '../../config/config.module';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { I18nConfig } from '../../i18n/config/i18n-config';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { SERVER_REQUEST_URL } from '../../ssr/ssr.providers';\nimport { OccLoadedConfig } from './occ-loaded-config';\nimport { OccLoadedConfigConverter } from './occ-loaded-config-converter';\nimport { OccSitesConfigLoader } from './occ-sites-config-loader';\n\nexport const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string> = makeStateKey<\n  string\n>('cx-external-config');\n\n@Injectable({ providedIn: 'root' })\nexport class OccConfigLoaderService {\n  constructor(\n    @Inject(PLATFORM_ID) protected platform: any,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(Config) protected config: any,\n    protected sitesConfigLoader: OccSitesConfigLoader,\n    protected converter: OccLoadedConfigConverter,\n    @Optional() protected transferState: TransferState,\n\n    @Optional()\n    @Inject(SERVER_REQUEST_URL)\n    protected serverRequestUrl?: string\n  ) {}\n\n  private get currentUrl(): string {\n    if (isPlatformBrowser(this.platform)) {\n      return this.document.location.href;\n    }\n    if (this.serverRequestUrl) {\n      return this.serverRequestUrl;\n    }\n    if (isDevMode()) {\n      console.error(\n        `Please provide token 'SERVER_REQUEST_URL' with the requested URL for SSR`\n      );\n    }\n  }\n\n  /**\n   * Initializes the Spartacus config asynchronously basing on the external config\n   */\n  loadConfig(): Promise<I18nConfig | SiteContextConfig> {\n    return this.get()\n      .pipe(\n        tap((externalConfig) => this.transfer(externalConfig)),\n        map((externalConfig) =>\n          deepMerge({}, ...this.getConfigChunks(externalConfig))\n        )\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns the external config\n   */\n  protected get(): Observable<OccLoadedConfig> {\n    const rehydratedExternalConfig = this.rehydrate();\n\n    return rehydratedExternalConfig\n      ? of(rehydratedExternalConfig)\n      : this.load();\n  }\n\n  /**\n   * Loads the external config from backend\n   */\n  protected load(): Observable<OccLoadedConfig> {\n    return this.sitesConfigLoader\n      .load()\n      .pipe(\n        map((baseSites) =>\n          this.converter.fromOccBaseSites(baseSites, this.currentUrl)\n        )\n      );\n  }\n\n  /**\n   * Tries to rehydrate external config in the browser from SSR\n   */\n  protected rehydrate(): OccLoadedConfig {\n    if (this.transferState && isPlatformBrowser(this.platform)) {\n      return this.transferState.get(EXTERNAL_CONFIG_TRANSFER_ID, undefined);\n    }\n  }\n\n  /**\n   * Transfers the given external config in SSR to the browser\n   *\n   * @param externalConfig\n   */\n  protected transfer(externalConfig: OccLoadedConfig) {\n    if (\n      this.transferState &&\n      isPlatformServer(this.platform) &&\n      externalConfig\n    ) {\n      this.transferState.set(EXTERNAL_CONFIG_TRANSFER_ID, externalConfig);\n    }\n  }\n\n  protected getConfigChunks(\n    externalConfig: OccLoadedConfig\n  ): (I18nConfig | SiteContextConfig)[] {\n    const chunks: any[] = [this.converter.toSiteContextConfig(externalConfig)];\n\n    if (this.shouldReturnI18nChunk()) {\n      chunks.push(this.converter.toI18nConfig(externalConfig));\n    }\n\n    return chunks;\n  }\n\n  private shouldReturnI18nChunk(): boolean {\n    const fallbackLangExists =\n      typeof (\n        this.config &&\n        this.config.i18n &&\n        this.config.i18n.fallbackLang\n      ) !== 'undefined';\n    if (fallbackLangExists && isDevMode()) {\n      console.warn(\n        `There is an already provided static config for 'i18n.fallbackLang', so the value from OCC loaded config is ignored.`\n      );\n    }\n    return !fallbackLangExists;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  ConfigInitializer,\n  CONFIG_INITIALIZER,\n} from '../../config/config-initializer/config-initializer';\nimport { SiteContextConfig } from '../../site-context/config/site-context-config';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';\nimport { OccConfigLoaderService } from './occ-config-loader.service';\n\n/**\n * Initializes the Spartacus config asynchronously basing on the external config\n */\nexport function initConfig(\n  configLoader: OccConfigLoaderService,\n  config: SiteContextConfig\n): ConfigInitializer {\n  /**\n   * Load config for `context` from backend only when there is no static config for `context.baseSite`\n   */\n  if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {\n    return {\n      scopes: ['context', 'i18n.fallbackLang'],\n      configFactory: () => configLoader.loadConfig(),\n    };\n  }\n  return null;\n}\n\n/**\n * Re-provides the external config chunk given before Angular bootstrap\n */\n@NgModule()\nexport class OccConfigLoaderModule {\n  static forRoot(): ModuleWithProviders<OccConfigLoaderModule> {\n    return {\n      ngModule: OccConfigLoaderModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER,\n          useFactory: initConfig,\n          deps: [OccConfigLoaderService, SiteContextConfig],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { provideConfigFactory } from '../../config/config.module';\nimport { OccConfig } from './occ-config';\n\nexport const OCC_BASE_URL_META_TAG_NAME = 'occ-backend-base-url';\nexport const OCC_BASE_URL_META_TAG_PLACEHOLDER = 'OCC_BACKEND_BASE_URL_VALUE';\nexport const MEDIA_BASE_URL_META_TAG_NAME = 'media-backend-base-url';\nexport const MEDIA_BASE_URL_META_TAG_PLACEHOLDER =\n  'MEDIA_BACKEND_BASE_URL_VALUE';\n\nexport function occServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(OCC_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== OCC_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { occ: { baseUrl } } }\n    : {};\n}\n\nexport function mediaServerConfigFromMetaTagFactory(meta: Meta): OccConfig {\n  const baseUrl = getMetaTagContent(MEDIA_BASE_URL_META_TAG_NAME, meta);\n  return baseUrl && baseUrl !== MEDIA_BASE_URL_META_TAG_PLACEHOLDER\n    ? { backend: { media: { baseUrl } } }\n    : {};\n}\n\nfunction getMetaTagContent(name: string, meta: Meta) {\n  const metaTag = meta.getTag(`name=\"${name}\"`);\n  return metaTag && metaTag.content;\n}\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { OccConfig } from './occ-config';\n\nexport const defaultOccConfig: OccConfig = {\n  backend: {\n    occ: {\n      prefix: '/occ/v2/',\n    },\n    media: {},\n  },\n};\n","import { OccConfig } from '../../occ';\n\nexport function occConfigValidator(config: OccConfig) {\n  if (\n    config.backend === undefined ||\n    config.backend.occ === undefined ||\n    config.backend.occ.baseUrl === undefined\n  ) {\n    return 'Please configure backend.occ.baseUrl before using storefront library!';\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OccConfig } from '../config/occ-config';\n\n/**\n * Http interceptor to add cookies to all cross-site requests.\n */\n@Injectable({ providedIn: 'root' })\nexport class WithCredentialsInterceptor implements HttpInterceptor {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Intercepts each request and adds the `withCredential` flag to it\n   * if it hasn't been added already.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (this.requiresWithCredentials(request)) {\n      request = request.clone({\n        withCredentials: true,\n      });\n    }\n    return next.handle(request);\n  }\n\n  /**\n   * indicates whether the request should use the WithCredentials flag.\n   */\n  protected requiresWithCredentials(request: HttpRequest<any>): boolean {\n    return (\n      this.occConfig?.useWithCredentials &&\n      request.url.indexOf(this.occConfig?.prefix) > -1\n    );\n  }\n\n  private get occConfig() {\n    return this.config.backend.occ;\n  }\n}\n","export namespace Occ {\n  /**\n   *\n   * An interface representing Country.\n   */\n  export interface Country {\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing Region.\n   */\n  export interface Region {\n    /**\n     * @member {string} [countryIso]\n     */\n    countryIso?: string;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [isocodeShort]\n     */\n    isocodeShort?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing RegionList.\n   */\n  export interface RegionList {\n    /**\n     * @member {Region[]} [regions]\n     */\n    regions?: Region[];\n  }\n\n  /**\n   *\n   * An interface representing Address.\n   */\n  export interface Address {\n    /**\n     * @member {string} [companyName]\n     */\n    companyName?: string;\n    /**\n     * @member {Country} [country]\n     */\n    country?: Country;\n    /**\n     * @member {boolean} [defaultAddress]\n     */\n    defaultAddress?: boolean;\n    /**\n     * @member {string} [email]\n     */\n    email?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [formattedAddress]\n     */\n    formattedAddress?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [line1]\n     */\n    line1?: string;\n    /**\n     * @member {string} [line2]\n     */\n    line2?: string;\n    /**\n     * @member {string} [phone]\n     */\n    phone?: string;\n    /**\n     * @member {string} [postalCode]\n     */\n    postalCode?: string;\n    /**\n     * @member {Region} [region]\n     */\n    region?: Region;\n    /**\n     * @member {boolean} [shippingAddress]\n     */\n    shippingAddress?: boolean;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [town]\n     */\n    town?: string;\n    /**\n     * @member {boolean} [visibleInAddressBook]\n     */\n    visibleInAddressBook?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing AddressList.\n   */\n  export interface AddressList {\n    /**\n     * @member {Address[]} [addresses]\n     */\n    addresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing ErrorModel.\n   * Error message\n   *\n   */\n  export interface ErrorModel {\n    /**\n     * @member {string} [message] Descriptive, human readable error message.\n     */\n    message?: string;\n    /**\n     * @member {string} [reason] Additional classification specific for each\n     * error type e.g. 'noStock'.\n     */\n    reason?: string;\n    /**\n     * @member {string} [subject] Identifier of the related object e.g. '1'.\n     */\n    subject?: string;\n    /**\n     * @member {string} [subjectType] Type of the object related to the error\n     * e.g. 'entry'.\n     */\n    subjectType?: string;\n    /**\n     * @member {string} [type] Type of the error e.g. 'LowStockError'.\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing ErrorList.\n   * List of errors\n   *\n   */\n  export interface ErrorList {\n    /**\n     * @member {ErrorModel[]} [errors]\n     */\n    errors?: ErrorModel[];\n  }\n\n  /**\n   *\n   * An interface representing AddressValidation.\n   */\n  export interface AddressValidation {\n    /**\n     * @member {string} [decision]\n     */\n    decision?: string;\n    /**\n     * @member {ErrorList} [errors]\n     */\n    errors?: ErrorList;\n    /**\n     * @member {Address[]} [suggestedAddresses]\n     */\n    suggestedAddresses?: Address[];\n  }\n\n  /**\n   *\n   * An interface representing Price.\n   */\n  export interface Price {\n    /**\n     * @member {string} [currencyIso]\n     */\n    currencyIso?: string;\n    /**\n     * @member {string} [formattedValue]\n     */\n    formattedValue?: string;\n    /**\n     * @member {number} [maxQuantity]\n     */\n    maxQuantity?: number;\n    /**\n     * @member {number} [minQuantity]\n     */\n    minQuantity?: number;\n    /**\n     * @member {PriceType} [priceType] Possible values include: 'BUY', 'FROM'\n     */\n    priceType?: PriceType;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n  }\n\n  /**\n   *\n   * An interface representing Stock.\n   */\n  export interface Stock {\n    /**\n     * @member {number} [stockLevel]\n     */\n    stockLevel?: number;\n    /**\n     * @member {string} [stockLevelStatus]\n     */\n    stockLevelStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing Image.\n   */\n  export interface Image {\n    /**\n     * @member {string} [altText]\n     */\n    altText?: string;\n    /**\n     * @member {string} [format]\n     */\n    format?: string;\n    /**\n     * @member {number} [galleryIndex]\n     */\n    galleryIndex?: number;\n    /**\n     * @member {ImageType} [imageType] Possible values include: 'PRIMARY',\n     * 'GALLERY'\n     */\n    imageType?: ImageType;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOptionQualifier.\n   */\n  export interface VariantOptionQualifier {\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [qualifier]\n     */\n    qualifier?: string;\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing VariantOption.\n   */\n  export interface VariantOption {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [priceData]\n     */\n    priceData?: Price;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantOptionQualifier[]} [variantOptionQualifiers]\n     */\n    variantOptionQualifiers?: VariantOptionQualifier[];\n  }\n\n  /**\n   *\n   * An interface representing BaseOption.\n   */\n  export interface BaseOption {\n    /**\n     * @member {VariantOption[]} [options]\n     */\n    options?: VariantOption[];\n    /**\n     * @member {VariantOption} [selected]\n     */\n    selected?: VariantOption;\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchQuery.\n   */\n  export interface SearchQuery {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SearchState.\n   */\n  export interface SearchState {\n    /**\n     * @member {SearchQuery} [query]\n     */\n    query?: SearchQuery;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Breadcrumb.\n   */\n  export interface Breadcrumb {\n    /**\n     * @member {string} [facetCode]\n     */\n    facetCode?: string;\n    /**\n     * @member {string} [facetName]\n     */\n    facetName?: string;\n    /**\n     * @member {string} [facetValueCode]\n     */\n    facetValueCode?: string;\n    /**\n     * @member {string} [facetValueName]\n     */\n    facetValueName?: string;\n    /**\n     * @member {SearchState} [removeQuery]\n     */\n    removeQuery?: SearchState;\n    /**\n     * @member {SearchState} [truncateQuery]\n     */\n    truncateQuery?: SearchState;\n  }\n\n  /**\n   *\n   * An interface representing Component.\n   */\n  export interface Component {\n    /**\n     * @member {Date} [modifiedTime]\n     */\n    modifiedTime?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {any} [otherProperties]\n     */\n    otherProperties?: any;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing ComponentList.\n   */\n  export interface ComponentList {\n    /**\n     * @member {Component[]} [component]\n     */\n    component?: Component[] | any[];\n  }\n\n  /**\n   *\n   * An interface representing ContentSlot.\n   */\n  export interface ContentSlot {\n    /**\n     * @member {ComponentList} [components]\n     */\n    components?: ComponentList;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [position]\n     */\n    position?: string;\n    /**\n     * @member {string} [slotId]\n     */\n    slotId?: string;\n    /**\n     * @member {boolean} [slotShared]\n     */\n    slotShared?: boolean;\n    /**\n     * @member {string} [slotStatus]\n     */\n    slotStatus?: string;\n  }\n\n  /**\n   *\n   * An interface representing ContentSlotList.\n   */\n  export interface ContentSlotList {\n    /**\n     * @member {ContentSlot[]} [contentSlot]\n     */\n    contentSlot?: ContentSlot[];\n  }\n\n  /**\n   *\n   * An interface representing CMSPage.\n   */\n  export interface CMSPage {\n    /**\n     * @member {ContentSlotList} [contentSlots]\n     */\n    contentSlots?: ContentSlotList;\n    /**\n     * @member {boolean} [defaultPage]\n     */\n    defaultPage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [template]\n     */\n    template?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [typeCode]\n     */\n    typeCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardType.\n   */\n  export interface CardType {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing CardTypeList.\n   */\n  export interface CardTypeList {\n    /**\n     * @member {CardType[]} [cardTypes]\n     */\n    cardTypes?: CardType[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionOrderEntryConsumed.\n   */\n  export interface PromotionOrderEntryConsumed {\n    /**\n     * @member {number} [adjustedUnitPrice]\n     */\n    adjustedUnitPrice?: number;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {number} [orderEntryNumber]\n     */\n    orderEntryNumber?: number;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing PromotionRestriction.\n   */\n  export interface PromotionRestriction {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [restrictionType]\n     */\n    restrictionType?: string;\n  }\n\n  /**\n   *\n   * An interface representing Promotion.\n   */\n  export interface Promotion {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string[]} [couldFireMessages]\n     */\n    couldFireMessages?: string[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [enabled]\n     */\n    enabled?: boolean;\n    /**\n     * @member {Date} [endDate]\n     */\n    endDate?: Date;\n    /**\n     * @member {string[]} [firedMessages]\n     */\n    firedMessages?: string[];\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {Image} [productBanner]\n     */\n    productBanner?: Image;\n    /**\n     * @member {string} [promotionGroup]\n     */\n    promotionGroup?: string;\n    /**\n     * @member {string} [promotionType]\n     */\n    promotionType?: string;\n    /**\n     * @member {PromotionRestriction[]} [restrictions]\n     */\n    restrictions?: PromotionRestriction[];\n    /**\n     * @member {Date} [startDate]\n     */\n    startDate?: Date;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n  }\n\n  /**\n   *\n   * An interface representing PromotionResult.\n   */\n  export interface PromotionResult {\n    /**\n     * @member {PromotionOrderEntryConsumed[]} [consumedEntries]\n     */\n    consumedEntries?: PromotionOrderEntryConsumed[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {Promotion} [promotion]\n     */\n    promotion?: Promotion;\n  }\n\n  /**\n   *\n   * An interface representing Currency.\n   */\n  export interface Currency {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n  }\n\n  /**\n   *\n   * An interface representing Voucher.\n   */\n  export interface Voucher {\n    /**\n     * @member {Price} [appliedValue]\n     */\n    appliedValue?: Price;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [freeShipping]\n     */\n    freeShipping?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [value]\n     */\n    value?: number;\n    /**\n     * @member {string} [valueFormatted]\n     */\n    valueFormatted?: string;\n    /**\n     * @member {string} [valueString]\n     */\n    valueString?: string;\n    /**\n     * @member {string} [voucherCode]\n     */\n    voucherCode?: string;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryMode.\n   */\n  export interface DeliveryMode {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing GeoPoint.\n   */\n  export interface GeoPoint {\n    /**\n     * @member {number} [latitude]\n     */\n    latitude?: number;\n    /**\n     * @member {number} [longitude]\n     */\n    longitude?: number;\n  }\n\n  /**\n   *\n   * An interface representing Time.\n   */\n  export interface Time {\n    /**\n     * @member {string} [formattedHour]\n     */\n    formattedHour?: string;\n    /**\n     * @member {number} [hour]\n     */\n    hour?: number;\n    /**\n     * @member {number} [minute]\n     */\n    minute?: number;\n  }\n\n  /**\n   *\n   * An interface representing SpecialOpeningDay.\n   */\n  export interface SpecialOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n  }\n\n  /**\n   *\n   * An interface representing WeekdayOpeningDay.\n   */\n  export interface WeekdayOpeningDay {\n    /**\n     * @member {boolean} [closed]\n     */\n    closed?: boolean;\n    /**\n     * @member {Time} [closingTime]\n     */\n    closingTime?: Time;\n    /**\n     * @member {Time} [openingTime]\n     */\n    openingTime?: Time;\n    /**\n     * @member {string} [weekDay]\n     */\n    weekDay?: string;\n  }\n\n  /**\n   *\n   * An interface representing OpeningSchedule.\n   */\n  export interface OpeningSchedule {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SpecialOpeningDay[]} [specialDayOpeningList]\n     */\n    specialDayOpeningList?: SpecialOpeningDay[];\n    /**\n     * @member {WeekdayOpeningDay[]} [weekDayOpeningList]\n     */\n    weekDayOpeningList?: WeekdayOpeningDay[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfService.\n   */\n  export interface PointOfService {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Category.\n   */\n  export interface Category {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [code]\n     */\n    name?: string;\n    /**\n     * @member {Image} [image]\n     */\n    image?: Image;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureUnit.\n   */\n  export interface FeatureUnit {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [symbol]\n     */\n    symbol?: string;\n    /**\n     * @member {string} [unitType]\n     */\n    unitType?: string;\n  }\n\n  /**\n   *\n   * An interface representing FeatureValue.\n   */\n  export interface FeatureValue {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing Feature.\n   */\n  export interface Feature {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {boolean} [comparable]\n     */\n    comparable?: boolean;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FeatureUnit} [featureUnit]\n     */\n    featureUnit?: FeatureUnit;\n    /**\n     * @member {FeatureValue[]} [featureValues]\n     */\n    featureValues?: FeatureValue[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [range]\n     */\n    range?: boolean;\n    /**\n     * @member {string} [type]\n     */\n    type?: string;\n  }\n\n  /**\n   *\n   * An interface representing Classification.\n   */\n  export interface Classification {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Feature[]} [features]\n     */\n    features?: Feature[];\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing FutureStock.\n   */\n  export interface FutureStock {\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [formattedDate]\n     */\n    formattedDate?: string;\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n  }\n\n  /**\n   *\n   * An interface representing PriceRange.\n   */\n  export interface PriceRange {\n    /**\n     * @member {Price} [maxPrice]\n     */\n    maxPrice?: Price;\n    /**\n     * @member {Price} [minPrice]\n     */\n    minPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ProductReference.\n   */\n  export interface ProductReference {\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [preselected]\n     */\n    preselected?: boolean;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {string} [referenceType]\n     */\n    referenceType?: string;\n    /**\n     * @member {Product} [target]\n     */\n    target?: Product;\n  }\n\n  /**\n   *\n   * An interface representing Language.\n   */\n  export interface Language {\n    /**\n     * @member {boolean} [active]\n     */\n    active?: boolean;\n    /**\n     * @member {string} [isocode]\n     */\n    isocode?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [nativeName]\n     */\n    nativeName?: string;\n  }\n\n  /**\n   *\n   * An interface representing User.\n   */\n  export interface User {\n    /**\n     * @member {Currency} [currency]\n     */\n    currency?: Currency;\n    /**\n     * @member {string} [customerId]\n     */\n    customerId?: string;\n    /**\n     * @member {Date} [deactivationDate]\n     */\n    deactivationDate?: Date;\n    /**\n     * @member {Address} [defaultAddress]\n     */\n    defaultAddress?: Address;\n    /**\n     * @member {string} [displayUid]\n     */\n    displayUid?: string;\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {Language} [language]\n     */\n    language?: Language;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [title]\n     */\n    title?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Review.\n   */\n  export interface Review {\n    /**\n     * @member {string} [alias]\n     */\n    alias?: string;\n    /**\n     * @member {string} [comment]\n     */\n    comment?: string;\n    /**\n     * @member {Date} [date]\n     */\n    date?: Date;\n    /**\n     * @member {string} [headline]\n     */\n    headline?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {User} [principal]\n     */\n    principal?: User;\n    /**\n     * @member {number} [rating]\n     */\n    rating?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantCategory.\n   */\n  export interface VariantCategory {\n    /**\n     * @member {boolean} [hasImage]\n     */\n    hasImage?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n  }\n\n  /**\n   *\n   * An interface representing VariantValueCategory.\n   */\n  export interface VariantValueCategory {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [sequence]\n     */\n    sequence?: number;\n    /**\n     * @member {VariantCategory[]} [superCategories]\n     */\n    superCategories?: VariantCategory[];\n  }\n\n  /**\n   *\n   * An interface representing VariantMatrixElement.\n   */\n  export interface VariantMatrixElement {\n    /**\n     * @member {VariantMatrixElement[]} [elements]\n     */\n    elements?: VariantMatrixElement[];\n    /**\n     * @member {boolean} [isLeaf]\n     */\n    isLeaf?: boolean;\n    /**\n     * @member {VariantCategory} [parentVariantCategory]\n     */\n    parentVariantCategory?: VariantCategory;\n    /**\n     * @member {VariantOption} [variantOption]\n     */\n    variantOption?: VariantOption;\n    /**\n     * @member {VariantValueCategory} [variantValueCategory]\n     */\n    variantValueCategory?: VariantValueCategory;\n  }\n\n  /**\n   *\n   * An interface representing Product.\n   */\n  export interface Product {\n    /**\n     * @member {boolean} [availableForPickup]\n     */\n    availableForPickup?: boolean;\n    /**\n     * @member {number} [averageRating]\n     */\n    averageRating?: number;\n    /**\n     * @member {BaseOption[]} [baseOptions]\n     */\n    baseOptions?: BaseOption[];\n    /**\n     * @member {string} [baseProduct]\n     */\n    baseProduct?: string;\n    /**\n     * @member {Category[]} [categories]\n     */\n    categories?: Category[];\n    /**\n     * @member {Classification[]} [classifications]\n     */\n    classifications?: Classification[];\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {FutureStock[]} [futureStocks]\n     */\n    futureStocks?: FutureStock[];\n    /**\n     * @member {Image[]} [images]\n     */\n    images?: Image[];\n    /**\n     * @member {string} [manufacturer]\n     */\n    manufacturer?: string;\n    /**\n     * @member {boolean} [multidimensional]\n     */\n    multidimensional?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [numberOfReviews]\n     */\n    numberOfReviews?: number;\n    /**\n     * @member {Promotion[]} [potentialPromotions]\n     */\n    potentialPromotions?: Promotion[];\n    /**\n     * @member {Price} [price]\n     */\n    price?: Price;\n    /**\n     * @member {PriceRange} [priceRange]\n     */\n    priceRange?: PriceRange;\n    /**\n     * @member {ProductReference[]} [productReferences]\n     */\n    productReferences?: ProductReference[];\n    /**\n     * @member {boolean} [purchasable]\n     */\n    purchasable?: boolean;\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n    /**\n     * @member {Stock} [stock]\n     */\n    stock?: Stock;\n    /**\n     * @member {string} [summary]\n     */\n    summary?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n    /**\n     * @member {VariantMatrixElement[]} [variantMatrix]\n     */\n    variantMatrix?: VariantMatrixElement[];\n    /**\n     * @member {VariantOption[]} [variantOptions]\n     */\n    variantOptions?: VariantOption[];\n    /**\n     * @member {string} [variantType]\n     */\n    variantType?: string;\n    /**\n     * @member {Price[]} [volumePrices]\n     */\n    volumePrices?: Price[];\n    /**\n     * @member {boolean} [volumePricesFlag]\n     */\n    volumePricesFlag?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderEntry.\n   */\n  export interface OrderEntry {\n    /**\n     * @member {Price} [basePrice]\n     */\n    basePrice?: Price;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [entryNumber]\n     */\n    entryNumber?: number;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {boolean} [updateable]\n     */\n    updateable?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryOrderEntryGroup.\n   */\n  export interface DeliveryOrderEntryGroup {\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetails.\n   */\n  export interface PaymentDetails {\n    /**\n     * @member {string} [accountHolderName]\n     */\n    accountHolderName?: string;\n    /**\n     * @member {Address} [billingAddress]\n     */\n    billingAddress?: Address;\n    /**\n     * @member {string} [cardNumber]\n     */\n    cardNumber?: string;\n    /**\n     * @member {CardType} [cardType]\n     */\n    cardType?: CardType;\n    /**\n     * @member {string} [cvn]\n     */\n    cvn?: string;\n    /**\n     * @member {boolean} [defaultPayment]\n     */\n    defaultPayment?: boolean;\n    /**\n     * @member {string} [expiryMonth]\n     */\n    expiryMonth?: string;\n    /**\n     * @member {string} [expiryYear]\n     */\n    expiryYear?: string;\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {string} [issueNumber]\n     */\n    issueNumber?: string;\n    /**\n     * @member {boolean} [saved]\n     */\n    saved?: boolean;\n    /**\n     * @member {string} [startMonth]\n     */\n    startMonth?: string;\n    /**\n     * @member {string} [startYear]\n     */\n    startYear?: string;\n    /**\n     * @member {string} [subscriptionId]\n     */\n    subscriptionId?: string;\n  }\n\n  /**\n   *\n   * An interface representing PickupOrderEntryGroup.\n   */\n  export interface PickupOrderEntryGroup {\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {number} [distance]\n     */\n    distance?: number;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n  }\n\n  /**\n   *\n   * An interface representing Principal.\n   */\n  export interface Principal {\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing Cart.\n   */\n  export interface Cart {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {Date} [expirationTime]\n     */\n    expirationTime?: Date;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {PromotionResult[]} [potentialOrderPromotions]\n     */\n    potentialOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [potentialProductPromotions]\n     */\n    potentialProductPromotions?: PromotionResult[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {Date} [saveTime]\n     */\n    saveTime?: Date;\n    /**\n     * @member {Principal} [savedBy]\n     */\n    savedBy?: Principal;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {number} [totalUnitCount]\n     */\n    totalUnitCount?: number;\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing CartList.\n   */\n  export interface CartList {\n    /**\n     * @member {Cart[]} [carts]\n     */\n    carts?: Cart[];\n  }\n\n  /**\n   *\n   * An interface representing CartModification.\n   */\n  export interface CartModification {\n    /**\n     * @member {boolean} [deliveryModeChanged]\n     */\n    deliveryModeChanged?: boolean;\n    /**\n     * @member {OrderEntry} [entry]\n     */\n    entry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [quantityAdded]\n     */\n    quantityAdded?: number;\n    /**\n     * @member {string} [statusCode]\n     */\n    statusCode?: string;\n    /**\n     * @member {string} [statusMessage]\n     */\n    statusMessage?: string;\n  }\n\n  /**\n   *\n   * An interface representing CategoryHierarchy.\n   */\n  export interface CategoryHierarchy {\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {CategoryHierarchy[]} [subcategories]\n     */\n    subcategories?: CategoryHierarchy[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogVersion.\n   */\n  export interface CatalogVersion {\n    /**\n     * @member {CategoryHierarchy[]} [categories]\n     */\n    categories?: CategoryHierarchy[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing Catalog.\n   */\n  export interface Catalog {\n    /**\n     * @member {CatalogVersion[]} [catalogVersions]\n     */\n    catalogVersions?: CatalogVersion[];\n    /**\n     * @member {string} [id]\n     */\n    id?: string;\n    /**\n     * @member {Date} [lastModified]\n     */\n    lastModified?: Date;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing CatalogList.\n   */\n  export interface CatalogList {\n    /**\n     * @member {Catalog[]} [catalogs]\n     */\n    catalogs?: Catalog[];\n  }\n\n  /**\n   *\n   * An interface representing ComponentIDList.\n   */\n  export interface ComponentIDList {\n    /**\n     * @member {string[]} [idList]\n     */\n    idList?: string[];\n  }\n\n  /**\n   *\n   * An interface representing ConsignmentEntry.\n   */\n  export interface ConsignmentEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [quantity]\n     */\n    quantity?: number;\n    /**\n     * @member {number} [shippedQuantity]\n     */\n    shippedQuantity?: number;\n  }\n\n  /**\n   *\n   * An interface representing Consignment.\n   */\n  export interface Consignment {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {PointOfService} [deliveryPointOfService]\n     */\n    deliveryPointOfService?: PointOfService;\n    /**\n     * @member {ConsignmentEntry[]} [entries]\n     */\n    entries?: ConsignmentEntry[];\n    /**\n     * @member {Address} [shippingAddress]\n     */\n    shippingAddress?: Address;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Date} [statusDate]\n     */\n    statusDate?: Date;\n    /**\n     * @member {string} [trackingID]\n     */\n    trackingID?: string;\n  }\n\n  /**\n   *\n   * An interface representing CountryList.\n   */\n  export interface CountryList {\n    /**\n     * @member {Country[]} [countries]\n     */\n    countries?: Country[];\n  }\n\n  /**\n   *\n   * An interface representing CurrencyList.\n   */\n  export interface CurrencyList {\n    /**\n     * @member {Currency[]} [currencies]\n     */\n    currencies?: Currency[];\n  }\n\n  /**\n   * An interface representing CustomerCoupon\n   */\n  export interface CustomerCoupon {\n    /**\n     * @member {string} [couponId]\n     */\n    couponId?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {string} [startDate]\n     */\n    startDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    endDate?: string;\n    /**\n     * @member {string} [endDate]\n     */\n    status?: string;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {boolean} [notificationOn]\n     */\n    notificationOn?: boolean;\n    /**\n     * @member {boolean} [allProductsApplicable]\n     */\n    allProductsApplicable?: boolean;\n  }\n\n  /**\n   * An interface representing CustomerCouponSearchResult\n   */\n  export interface CustomerCouponSearchResult {\n    /**\n     * @member {CustomerCoupon[]} [coupons]\n     */\n    coupons?: CustomerCoupon[];\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n  }\n\n  /**\n   *\n   * An interface representing DeliveryModeList.\n   */\n  export interface DeliveryModeList {\n    /**\n     * @member {DeliveryMode[]} [deliveryModes]\n     */\n    deliveryModes?: DeliveryMode[];\n  }\n\n  /**\n   *\n   * An interface representing FacetValue.\n   */\n  export interface FacetValue {\n    /**\n     * @member {number} [count]\n     */\n    count?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {SearchState} [query]\n     */\n    query?: SearchState;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing Facet.\n   */\n  export interface Facet {\n    /**\n     * @member {boolean} [category]\n     */\n    category?: boolean;\n    /**\n     * @member {boolean} [multiSelect]\n     */\n    multiSelect?: boolean;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {number} [priority]\n     */\n    priority?: number;\n    /**\n     * @member {FacetValue[]} [topValues]\n     */\n    topValues?: FacetValue[];\n    /**\n     * @member {FacetValue[]} [values]\n     */\n    values?: FacetValue[];\n    /**\n     * @member {boolean} [visible]\n     */\n    visible?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing LanguageList.\n   */\n  export interface LanguageList {\n    /**\n     * @member {Language[]} [languages]\n     */\n    languages?: Language[];\n  }\n\n  /**\n   *\n   * An interface representing Pagination.\n   * Pagination info\n   *\n   */\n  export interface Pagination {\n    /**\n     * @member {number} [count] Number of elements on this page\n     */\n    count?: number;\n    /**\n     * @member {number} [page] Current page number\n     */\n    page?: number;\n    /**\n     * @member {number} [totalCount] Total number of elements\n     */\n    totalCount?: number;\n    /**\n     * @member {number} [totalPages] Total number of pages\n     */\n    totalPages?: number;\n  }\n\n  /**\n   *\n   * An interface representing Sort.\n   * Sort option\n   *\n   */\n  export interface Sort {\n    /**\n     * @member {boolean} [asc]\n     */\n    asc?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ListAdaptedComponents.\n   */\n  export interface ListAdaptedComponents {\n    /**\n     * @member {any[]} [components]\n     */\n    components?: any[];\n    /**\n     * @member {Pagination} [pagination]\n     */\n    pagination?: Pagination;\n    /**\n     * @member {Sort[]} [sorts]\n     */\n    sorts?: Sort[];\n  }\n\n  /**\n   *\n   * An interface representing MemberList.\n   */\n  export interface MemberList {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n  }\n\n  /**\n   *\n   * An interface representing OrderEntryList.\n   */\n  export interface OrderEntryList {\n    /**\n     * @member {OrderEntry[]} [orderEntries]\n     */\n    orderEntries?: OrderEntry[];\n  }\n\n  /**\n   *\n   * An interface representing OrderHistory.\n   */\n  export interface OrderHistory {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {Date} [placed]\n     */\n    placed?: Date;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {Price} [total]\n     */\n    total?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaginationModel.\n   */\n  export interface PaginationModel {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {string} [sort]\n     */\n    sort?: string;\n    /**\n     * @member {number} [totalPages]\n     */\n    totalPages?: number;\n    /**\n     * @member {number} [totalResults]\n     */\n    totalResults?: number;\n  }\n\n  /**\n   *\n   * An interface representing SortModel.\n   */\n  export interface SortModel {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {boolean} [selected]\n     */\n    selected?: boolean;\n  }\n\n  /**\n   *\n   * An interface representing OrderHistoryList.\n   */\n  export interface OrderHistoryList {\n    /**\n     * @member {OrderHistory[]} [orders]\n     */\n    orders?: OrderHistory[];\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElement.\n   */\n  export interface OrderStatusUpdateElement {\n    /**\n     * @member {string} [baseSiteId]\n     */\n    baseSiteId?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n  }\n\n  /**\n   *\n   * An interface representing OrderStatusUpdateElementList.\n   */\n  export interface OrderStatusUpdateElementList {\n    /**\n     * @member {OrderStatusUpdateElement[]} [orderStatusUpdateElements]\n     */\n    orderStatusUpdateElements?: OrderStatusUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing Order.\n   */\n  export interface Order {\n    /**\n     * @member {PromotionResult[]} [appliedOrderPromotions]\n     */\n    appliedOrderPromotions?: PromotionResult[];\n    /**\n     * @member {PromotionResult[]} [appliedProductPromotions]\n     */\n    appliedProductPromotions?: PromotionResult[];\n    /**\n     * @member {Voucher[]} [appliedVouchers]\n     */\n    appliedVouchers?: Voucher[];\n    /**\n     * @member {boolean} [calculated]\n     */\n    calculated?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Consignment[]} [consignments]\n     */\n    consignments?: Consignment[];\n    /**\n     * @member {Date} [created]\n     */\n    created?: Date;\n    /**\n     * @member {Address} [deliveryAddress]\n     */\n    deliveryAddress?: Address;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {number} [deliveryItemsQuantity]\n     */\n    deliveryItemsQuantity?: number;\n    /**\n     * @member {DeliveryMode} [deliveryMode]\n     */\n    deliveryMode?: DeliveryMode;\n    /**\n     * @member {DeliveryOrderEntryGroup[]} [deliveryOrderGroups]\n     */\n    deliveryOrderGroups?: DeliveryOrderEntryGroup[];\n    /**\n     * @member {string} [deliveryStatus]\n     */\n    deliveryStatus?: string;\n    /**\n     * @member {string} [deliveryStatusDisplay]\n     */\n    deliveryStatusDisplay?: string;\n    /**\n     * @member {OrderEntry[]} [entries]\n     */\n    entries?: OrderEntry[];\n    /**\n     * @member {boolean} [guestCustomer]\n     */\n    guestCustomer?: boolean;\n    /**\n     * @member {string} [guid]\n     */\n    guid?: string;\n    /**\n     * @member {boolean} [net]\n     */\n    net?: boolean;\n    /**\n     * @member {Price} [orderDiscounts]\n     */\n    orderDiscounts?: Price;\n    /**\n     * @member {PaymentDetails} [paymentInfo]\n     */\n    paymentInfo?: PaymentDetails;\n    /**\n     * @member {number} [pickupItemsQuantity]\n     */\n    pickupItemsQuantity?: number;\n    /**\n     * @member {PickupOrderEntryGroup[]} [pickupOrderGroups]\n     */\n    pickupOrderGroups?: PickupOrderEntryGroup[];\n    /**\n     * @member {Price} [productDiscounts]\n     */\n    productDiscounts?: Price;\n    /**\n     * @member {string} [site]\n     */\n    site?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {string} [statusDisplay]\n     */\n    statusDisplay?: string;\n    /**\n     * @member {string} [store]\n     */\n    store?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalDiscounts]\n     */\n    totalDiscounts?: Price;\n    /**\n     * @member {number} [totalItems]\n     */\n    totalItems?: number;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n    /**\n     * @member {Price} [totalPriceWithTax]\n     */\n    totalPriceWithTax?: Price;\n    /**\n     * @member {Price} [totalTax]\n     */\n    totalTax?: Price;\n    /**\n     * @member {OrderEntry[]} [unconsignedEntries]\n     */\n    unconsignedEntries?: OrderEntry[];\n    /**\n     * @member {Principal} [user]\n     */\n    user?: Principal;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequest.\n   */\n  export interface ReturnRequest {\n    /**\n     * @member {boolean} [cancellable]\n     */\n    cancellable?: boolean;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {Date} [creationTime]\n     */\n    creationTime?: Date;\n    /**\n     * @member {Price} [deliveryCost]\n     */\n    deliveryCost?: Price;\n    /**\n     * @member {order} [order]\n     */\n    order?: Order;\n    /**\n     * @member {boolean} [refundDeliveryCost]\n     */\n    refundDeliveryCost?: boolean;\n    /**\n     * @member {ReturnRequestEntry[]} [returnEntries]\n     */\n    returnEntries?: ReturnRequestEntry[];\n    /**\n     * @member {string} [returnLabelDownloadUrl]\n     */\n    returnLabelDownloadUrl?: string;\n    /**\n     * @member {string} [rma]\n     */\n    rma?: string;\n    /**\n     * @member {string} [status]\n     */\n    status?: string;\n    /**\n     * @member {Price} [subTotal]\n     */\n    subTotal?: Price;\n    /**\n     * @member {Price} [totalPrice]\n     */\n    totalPrice?: Price;\n  }\n\n  /**\n   *\n   * An interface representing ReturnRequestEntry.\n   */\n  export interface ReturnRequestEntry {\n    /**\n     * @member {OrderEntry} [orderEntry]\n     */\n    orderEntry?: OrderEntry;\n    /**\n     * @member {number} [expectedQuantity]\n     */\n    expectedQuantity?: number;\n    /**\n     * @member {Price} [refundAmount]\n     */\n    refundAmount?: Price;\n  }\n\n  /**\n   *\n   * An interface representing PaymentDetailsList.\n   */\n  export interface PaymentDetailsList {\n    /**\n     * @member {PaymentDetails[]} [payments]\n     */\n    payments?: PaymentDetails[];\n  }\n\n  /**\n   *\n   * An interface representing PointOfServiceStock.\n   */\n  export interface PointOfServiceStock {\n    /**\n     * @member {Address} [address]\n     */\n    address?: Address;\n    /**\n     * @member {string} [description]\n     */\n    description?: string;\n    /**\n     * @member {string} [displayName]\n     */\n    displayName?: string;\n    /**\n     * @member {number} [distanceKm]\n     */\n    distanceKm?: number;\n    /**\n     * @member {{ [propertyName: string]: string }} [features]\n     */\n    features?: { [propertyName: string]: string };\n    /**\n     * @member {string} [formattedDistance]\n     */\n    formattedDistance?: string;\n    /**\n     * @member {GeoPoint} [geoPoint]\n     */\n    geoPoint?: GeoPoint;\n    /**\n     * @member {Image} [mapIcon]\n     */\n    mapIcon?: Image;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {OpeningSchedule} [openingHours]\n     */\n    openingHours?: OpeningSchedule;\n    /**\n     * @member {Stock} [stockInfo]\n     */\n    stockInfo?: Stock;\n    /**\n     * @member {string} [storeContent]\n     */\n    storeContent?: string;\n    /**\n     * @member {Image[]} [storeImages]\n     */\n    storeImages?: Image[];\n    /**\n     * @member {string} [url]\n     */\n    url?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElement.\n   */\n  export interface ProductExpressUpdateElement {\n    /**\n     * @member {string} [catalogId]\n     */\n    catalogId?: string;\n    /**\n     * @member {string} [catalogVersion]\n     */\n    catalogVersion?: string;\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductExpressUpdateElementList.\n   */\n  export interface ProductExpressUpdateElementList {\n    /**\n     * @member {ProductExpressUpdateElement[]} [productExpressUpdateElements]\n     */\n    productExpressUpdateElements?: ProductExpressUpdateElement[];\n  }\n\n  /**\n   *\n   * An interface representing ProductList.\n   */\n  export interface ProductList {\n    /**\n     * @member {string} [catalog]\n     */\n    catalog?: string;\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {number} [totalPageCount]\n     */\n    totalPageCount?: number;\n    /**\n     * @member {number} [totalProductCount]\n     */\n    totalProductCount?: number;\n    /**\n     * @member {string} [version]\n     */\n    version?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductReferenceList.\n   */\n  export interface ProductReferenceList {\n    /**\n     * @member {ProductReference[]} [references]\n     */\n    references?: ProductReference[];\n  }\n\n  /**\n   *\n   * An interface representing SpellingSuggestion.\n   */\n  export interface SpellingSuggestion {\n    /**\n     * @member {string} [query]\n     */\n    query?: string;\n    /**\n     * @member {string} [suggestion]\n     */\n    suggestion?: string;\n  }\n\n  /**\n   *\n   * An interface representing ProductSearchPage.\n   */\n  export interface ProductSearchPage {\n    /**\n     * @member {Breadcrumb[]} [breadcrumbs]\n     */\n    breadcrumbs?: Breadcrumb[];\n    /**\n     * @member {string} [categoryCode]\n     */\n    categoryCode?: string;\n    /**\n     * @member {SearchState} [currentQuery]\n     */\n    currentQuery?: SearchState;\n    /**\n     * @member {Facet[]} [facets]\n     */\n    facets?: Facet[];\n    /**\n     * @member {string} [freeTextSearch]\n     */\n    freeTextSearch?: string;\n    /**\n     * @member {string} [keywordRedirectUrl]\n     */\n    keywordRedirectUrl?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product[]} [products]\n     */\n    products?: Product[];\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {SpellingSuggestion} [spellingSuggestion]\n     */\n    spellingSuggestion?: SpellingSuggestion;\n  }\n\n  /**\n   *\n   * An interface representing PromotionList.\n   */\n  export interface PromotionList {\n    /**\n     * @member {Promotion[]} [promotions]\n     */\n    promotions?: Promotion[];\n  }\n\n  /**\n   *\n   * An interface representing PromotionResultList.\n   */\n  export interface PromotionResultList {\n    /**\n     * @member {PromotionResult[]} [promotions]\n     */\n    promotions?: PromotionResult[];\n  }\n\n  /**\n   *\n   * An interface representing ReviewList.\n   */\n  export interface ReviewList {\n    /**\n     * @member {Review[]} [reviews]\n     */\n    reviews?: Review[];\n  }\n\n  /**\n   *\n   * An interface representing SaveCartResult.\n   */\n  export interface SaveCartResult {\n    /**\n     * @member {Cart} [savedCartData]\n     */\n    savedCartData?: Cart;\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderSearchPage.\n   */\n  export interface StoreFinderSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfService[]} [stores]\n     */\n    stores?: PointOfService[];\n  }\n\n  /**\n   *\n   * An interface representing StoreFinderStockSearchPage.\n   */\n  export interface StoreFinderStockSearchPage {\n    /**\n     * @member {number} [boundEastLongitude]\n     */\n    boundEastLongitude?: number;\n    /**\n     * @member {number} [boundNorthLatitude]\n     */\n    boundNorthLatitude?: number;\n    /**\n     * @member {number} [boundSouthLatitude]\n     */\n    boundSouthLatitude?: number;\n    /**\n     * @member {number} [boundWestLongitude]\n     */\n    boundWestLongitude?: number;\n    /**\n     * @member {string} [locationText]\n     */\n    locationText?: string;\n    /**\n     * @member {PaginationModel} [pagination]\n     */\n    pagination?: PaginationModel;\n    /**\n     * @member {Product} [product]\n     */\n    product?: Product;\n    /**\n     * @member {SortModel[]} [sorts]\n     */\n    sorts?: SortModel[];\n    /**\n     * @member {number} [sourceLatitude]\n     */\n    sourceLatitude?: number;\n    /**\n     * @member {number} [sourceLongitude]\n     */\n    sourceLongitude?: number;\n    /**\n     * @member {PointOfServiceStock[]} [stores]\n     */\n    stores?: PointOfServiceStock[];\n  }\n\n  /**\n   *\n   * An interface representing Suggestion.\n   */\n  export interface Suggestion {\n    /**\n     * @member {string} [value]\n     */\n    value?: string;\n  }\n\n  /**\n   *\n   * An interface representing SuggestionList.\n   */\n  export interface SuggestionList {\n    /**\n     * @member {Suggestion[]} [suggestions]\n     */\n    suggestions?: Suggestion[];\n  }\n\n  /**\n   *\n   * An interface representing Title.\n   */\n  export interface Title {\n    /**\n     * @member {string} [code]\n     */\n    code?: string;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n  }\n\n  /**\n   *\n   * An interface representing TitleList.\n   */\n  export interface TitleList {\n    /**\n     * @member {Title[]} [titles]\n     */\n    titles?: Title[];\n  }\n\n  /**\n   *\n   * An interface representing UserGroup.\n   */\n  export interface UserGroup {\n    /**\n     * @member {Principal[]} [members]\n     */\n    members?: Principal[];\n    /**\n     * @member {number} [membersCount]\n     */\n    membersCount?: number;\n    /**\n     * @member {string} [name]\n     */\n    name?: string;\n    /**\n     * @member {UserGroup[]} [subGroups]\n     */\n    subGroups?: UserGroup[];\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  /**\n   *\n   * An interface representing UserGroupList.\n   */\n  export interface UserGroupList {\n    /**\n     * @member {number} [currentPage]\n     */\n    currentPage?: number;\n    /**\n     * @member {number} [numberOfPages]\n     */\n    numberOfPages?: number;\n    /**\n     * @member {number} [pageSize]\n     */\n    pageSize?: number;\n    /**\n     * @member {number} [totalNumber]\n     */\n    totalNumber?: number;\n    /**\n     * @member {UserGroup[]} [userGroups]\n     */\n    userGroups?: UserGroup[];\n  }\n\n  /**\n   *\n   * An interface representing UserSignUp.\n   */\n  export interface UserSignUp {\n    /**\n     * @member {string} [firstName]\n     */\n    firstName?: string;\n    /**\n     * @member {string} [lastName]\n     */\n    lastName?: string;\n    /**\n     * @member {string} [password]\n     */\n    password?: string;\n    /**\n     * @member {string} [titleCode]\n     */\n    titleCode?: string;\n    /**\n     * @member {string} [uid]\n     */\n    uid?: string;\n  }\n\n  export interface StoreCount {\n    count?: number;\n    isoCode?: string;\n    name?: string;\n    type?: string;\n  }\n\n  export interface StoreCountList {\n    countriesAndRegionsStoreCount?: StoreCount[];\n  }\n\n  /**\n   *\n   * An interface representing VoucherList.\n   */\n  export interface VoucherList {\n    /**\n     * @member {Voucher[]} [vouchers]\n     */\n    vouchers?: Voucher[];\n  }\n\n  /**\n   * Defines values for PriceType.\n   * Possible values include: 'BUY', 'FROM'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PriceType = <PriceType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PriceType {\n    BUY = 'BUY',\n    FROM = 'FROM',\n  }\n\n  /**\n   * Defines values for ImageType.\n   * Possible values include: 'PRIMARY', 'GALLERY'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: ImageType = <ImageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum ImageType {\n    PRIMARY = 'PRIMARY',\n    GALLERY = 'GALLERY',\n  }\n\n  /**\n   * Defines values for Fields.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields = <Fields>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields1.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields1 = <Fields1>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields1 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields2.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields2 = <Fields2>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields2 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields3.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields3 = <Fields3>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields3 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields4.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields4 = <Fields4>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields4 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields5.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields5 = <Fields5>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields5 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields6.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields6 = <Fields6>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields6 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for PageType.\n   * Possible values include: 'ContentPage', 'ProductPage', 'CategoryPage',\n   * 'CatalogPage'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: PageType = <PageType>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum PageType {\n    CONTENT_PAGE = 'ContentPage',\n    PRODUCT_PAGE = 'ProductPage',\n    CATEGORY_PAGE = 'CategoryPage',\n    CATALOG_PAGE = 'CatalogPage',\n  }\n\n  /**\n   * Defines values for Fields7.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields7 = <Fields7>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields7 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields8.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields8 = <Fields8>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields8 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields9.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields9 = <Fields9>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields9 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields10.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields10 = <Fields10>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields10 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields11.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields11 = <Fields11>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields11 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields12.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields12 = <Fields12>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields12 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields13.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields13 = <Fields13>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields13 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields14.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields14 = <Fields14>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields14 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields15.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields15 = <Fields15>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields15 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields16.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields16 = <Fields16>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields16 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for SortEnum.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: SortEnum = <SortEnum>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum SortEnum {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields17.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields17 = <Fields17>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields17 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields18.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields18 = <Fields18>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields18 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields19.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields19 = <Fields19>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields19 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields20.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields20 = <Fields20>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields20 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields21.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields21 = <Fields21>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields21 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields22.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields22 = <Fields22>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields22 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields23.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields23 = <Fields23>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields23 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields24.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields24 = <Fields24>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields24 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields25.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields25 = <Fields25>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields25 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields26.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields26 = <Fields26>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields26 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields27.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields27 = <Fields27>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields27 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields28.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields28 = <Fields28>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields28 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields29.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields29 = <Fields29>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields29 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields30.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields30 = <Fields30>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields30 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields31.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields31 = <Fields31>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields31 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields32.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields32 = <Fields32>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields32 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields33.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields33 = <Fields33>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields33 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields34.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields34 = <Fields34>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields34 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields35.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields35 = <Fields35>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields35 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields36.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields36 = <Fields36>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields36 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields37.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields37 = <Fields37>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields37 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields38.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields38 = <Fields38>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields38 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields39.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields39 = <Fields39>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields39 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields40.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields40 = <Fields40>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields40 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields41.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields41 = <Fields41>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields41 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields42.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields42 = <Fields42>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields42 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields43.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields43 = <Fields43>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields43 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields44.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields44 = <Fields44>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields44 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields45.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields45 = <Fields45>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields45 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields46.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields46 = <Fields46>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields46 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields47.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields47 = <Fields47>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields47 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields48.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields48 = <Fields48>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields48 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields49.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields49 = <Fields49>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields49 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields50.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields50 = <Fields50>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields50 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields51.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields51 = <Fields51>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields51 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields52.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields52 = <Fields52>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields52 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields53.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields53 = <Fields53>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields53 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields54.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields54 = <Fields54>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields54 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields55.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields55 = <Fields55>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields55 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields56.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields56 = <Fields56>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields56 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields57.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields57 = <Fields57>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields57 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields58.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields58 = <Fields58>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields58 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields59.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields59 = <Fields59>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields59 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields60.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields60 = <Fields60>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields60 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Fields61.\n   * Possible values include: 'BASIC', 'DEFAULT', 'FULL'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Fields61 = <Fields61>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Fields61 {\n    BASIC = 'BASIC',\n    DEFAULT = 'DEFAULT',\n    FULL = 'FULL',\n  }\n\n  /**\n   * Defines values for Type.\n   * Possible values include: 'all', 'product', 'order'\n   * There could be more values for this enum apart from the ones defined here.If\n   * you want to set a value that is not from the known values then you can do\n   * the following:\n   * let param: Type = <Type>\"someUnknownValueThatWillStillBeValid\";\n   * @readonly\n   * @enum {string}\n   */\n  export enum Type {\n    All = 'all',\n    Product = 'product',\n    Order = 'order',\n  }\n\n  export interface AnonymousConsent {\n    templateCode?: string;\n    version?: number;\n    consentState?: CONSENT_STATUS;\n  }\n\n  export enum CONSENT_STATUS {\n    ANONYMOUS_CONSENT_GIVEN = 'GIVEN',\n    ANONYMOUS_CONSENT_WITHDRAWN = 'WITHDRAWN',\n  }\n\n  export interface ConsentTemplate {\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    currentConsent?: Consent;\n  }\n\n  export interface Consent {\n    code?: string;\n    consentGivenDate?: Date;\n    consentWithdrawnDate?: Date;\n  }\n\n  export interface ConsentTemplateList {\n    consentTemplates?: ConsentTemplate[];\n  }\n\n  export interface BaseSites {\n    baseSites?: BaseSite[];\n  }\n\n  export interface BaseSite {\n    channel?: string;\n    defaultLanguage?: Language;\n    defaultPreviewCatalogId?: string;\n    defaultPreviewCategoryCode?: string;\n    defaultPreviewProductCode?: string;\n    locale?: string;\n    name?: string;\n    theme?: string;\n    uid?: string;\n    stores?: BaseStore[];\n    urlPatterns?: string[];\n    urlEncodingAttributes?: string[];\n  }\n\n  export interface BaseStore {\n    currencies?: Currency[];\n    defaultCurrency?: Currency;\n    languages?: Language[];\n    defaultLanguage?: Language;\n  }\n\n  export interface ProductInterestEntry {\n    interestType?: NotificationType;\n    dateAdded?: string;\n    expirationDate?: string;\n  }\n\n  export interface ProductInterestEntryRelation {\n    product?: Product;\n    productInterestEntry?: ProductInterestEntry[];\n  }\n\n  export interface ProductInterestSearchResult {\n    results?: ProductInterestEntryRelation[];\n    sorts?: Sort[];\n    pagination?: Pagination;\n  }\n\n  export enum NotificationType {\n    BACK_IN_STOCK = 'BACK_IN_STOCK',\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nexport const ConfigValidatorToken = new InjectionToken(\n  'ConfigurationValidator'\n);\n\n/**\n * ConfigValidator is used to validate config and display warning messages in development mode.\n *\n * In case of failed validation, should return a string with error message.\n */\nexport type ConfigValidator = (config: any) => string | void;\n\n/**\n * Use to probide config validation at app bootstrap (when all config chunks are merged)\n *\n * @param configValidator\n */\nexport function provideConfigValidator(\n  configValidator: ConfigValidator\n): Provider {\n  return {\n    provide: ConfigValidatorToken,\n    useValue: configValidator,\n    multi: true,\n  };\n}\n\nexport function validateConfig(\n  config: any,\n  configValidators: ConfigValidator[]\n) {\n  for (const validate of configValidators) {\n    const warning = validate(config);\n    if (warning) {\n      console.warn(warning);\n    }\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { AsmOccModule } from './adapters/asm/asm-occ.module';\nimport { CartOccModule } from './adapters/cart/cart-occ.module';\nimport { CheckoutOccModule } from './adapters/checkout/checkout-occ.module';\nimport { CmsOccModule } from './adapters/cms/cms-occ.module';\nimport { ProductOccModule } from './adapters/product/product-occ.module';\nimport { SiteContextOccModule } from './adapters/site-context/site-context-occ.module';\nimport { StoreFinderOccModule } from './adapters/store-finder/store-finder-occ.module';\nimport { UserOccModule } from './adapters/user/user-occ.module';\nimport { OccConfigLoaderModule } from './config-loader/occ-config-loader.module';\nimport { defaultOccConfig } from './config/default-occ-config';\nimport { occConfigValidator } from './config/occ-config-validator';\nimport { WithCredentialsInterceptor } from './interceptors/with-credentials.interceptor';\n\n@NgModule({\n  imports: [\n    AsmOccModule,\n    CmsOccModule,\n    CartOccModule,\n    CheckoutOccModule,\n    ProductOccModule,\n    SiteContextOccModule,\n    StoreFinderOccModule,\n    UserOccModule,\n    OccConfigLoaderModule.forRoot(),\n  ],\n})\nexport class OccModule {\n  static forRoot(): ModuleWithProviders<OccModule> {\n    return {\n      ngModule: OccModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useExisting: WithCredentialsInterceptor,\n          multi: true,\n        },\n        provideDefaultConfig(defaultOccConfig),\n        provideConfigValidator(occConfigValidator),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '../config/occ-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingScopesService {\n  constructor(protected config: OccConfig) {}\n\n  /**\n   * Aims to expand scopes based on loading scopes config.\n   *\n   * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']\n   *\n   * If scope data overlaps with each other, the data should be merged in the order of scopes provided,\n   * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.\n   * It should apply also to implicit scopes (that are included by configuration).\n   *\n   * @param model\n   * @param scopes\n   */\n  expand(model: string, scopes: string[]): string[] {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n\n    if (scopesConfig) {\n      const expandedScopes = [...scopes];\n      let i = expandedScopes.length;\n\n      while (i > 0) {\n        i--;\n        const includedScopes =\n          scopesConfig[expandedScopes[i]] &&\n          scopesConfig[expandedScopes[i]].include;\n        if (includedScopes) {\n          for (const includedScope of includedScopes) {\n            if (!expandedScopes.includes(includedScope)) {\n              expandedScopes.splice(i, 0, includedScope);\n              i++;\n            }\n          }\n        }\n      }\n\n      return expandedScopes;\n    }\n\n    return scopes;\n  }\n\n  /**\n   * Return maxAge for product scope in milliseconds\n   *\n   * @param model\n   * @param scope\n   */\n  getMaxAge(model: string, scope: string): number {\n    const scopesConfig =\n      this.config &&\n      this.config.backend &&\n      this.config.backend.loadingScopes &&\n      this.config.backend.loadingScopes[model];\n    return (scopesConfig[scope] && scopesConfig[scope].maxAge) * 1000 || 0;\n  }\n}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AnonymousConsentsConfig extends OccConfig {\n  anonymousConsents?: {\n    /**\n     * Specify the consent template ID to be show on the registration page.\n     */\n    registerConsent?: string;\n    /**\n     * Show the legal description at the top of the anonymous consents dialog.\n     */\n    showLegalDescriptionInDialog?: boolean;\n    /**\n     * Specify the list of consent template IDs that are required and which can't be toggled off.\n     */\n    requiredConsents?: string[];\n    /**\n     * Consent management page configuration.\n     */\n    consentManagementPage?: {\n      /**\n       * Show all anonymous consents on the consent management page.\n       */\n      showAnonymousConsents?: boolean;\n      /**\n       * A list of consent template IDs that should be hidden on the consent management page.\n       */\n      hideConsents?: string[];\n    };\n  };\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { AnonymousConsent, ANONYMOUS_CONSENT_STATUS } from '../../model/index';\nimport { OccEndpointsService } from '../../occ/index';\nimport { AnonymousConsentsConfig } from '../config/anonymous-consents-config';\nimport { AnonymousConsentsService } from '../facade/anonymous-consents.service';\n\nexport const ANONYMOUS_CONSENTS_HEADER = 'X-Anonymous-Consents';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentsInterceptor implements HttpInterceptor {\n  constructor(\n    private anonymousConsentsService: AnonymousConsentsService,\n    private authService: AuthService,\n    private occEndpoints: OccEndpointsService,\n    private config: AnonymousConsentsConfig\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.anonymousConsentsService.getConsents().pipe(\n      take(1),\n      withLatestFrom(this.authService.isUserLoggedIn()),\n      switchMap(([consents, isUserLoggedIn]) => {\n        if (!this.isOccUrl(request.url)) {\n          return next.handle(request);\n        }\n\n        const clonedRequest = this.handleRequest(consents, request);\n        return next.handle(clonedRequest).pipe(\n          tap((event) => {\n            if (event instanceof HttpResponse) {\n              this.handleResponse(\n                isUserLoggedIn,\n                event.headers.get(ANONYMOUS_CONSENTS_HEADER),\n                consents\n              );\n            }\n          })\n        );\n      })\n    );\n  }\n\n  private handleResponse(\n    isUserLoggedIn: boolean,\n    newRawConsents: string,\n    previousConsents: AnonymousConsent[]\n  ): void {\n    if (!isUserLoggedIn && newRawConsents) {\n      let newConsents: AnonymousConsent[] = [];\n      newConsents = this.anonymousConsentsService.decodeAndDeserialize(\n        newRawConsents\n      );\n      newConsents = this.giveRequiredConsents(newConsents);\n\n      if (\n        this.anonymousConsentsService.consentsUpdated(\n          newConsents,\n          previousConsents\n        )\n      ) {\n        this.anonymousConsentsService.setConsents(newConsents);\n      }\n    }\n  }\n\n  private handleRequest(\n    consents: AnonymousConsent[],\n    request: HttpRequest<any>\n  ): HttpRequest<any> {\n    if (!consents) {\n      return request;\n    }\n\n    const rawConsents = this.anonymousConsentsService.serializeAndEncode(\n      consents\n    );\n    return request.clone({\n      setHeaders: {\n        [ANONYMOUS_CONSENTS_HEADER]: rawConsents,\n      },\n    });\n  }\n\n  private isOccUrl(url: string): boolean {\n    return url.includes(this.occEndpoints.getBaseEndpoint());\n  }\n\n  private giveRequiredConsents(\n    consents: AnonymousConsent[]\n  ): AnonymousConsent[] {\n    const givenConsents = [...consents];\n\n    if (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents)\n    ) {\n      for (const consent of givenConsents) {\n        if (\n          this.config.anonymousConsents.requiredConsents.includes(\n            consent.templateCode\n          )\n        ) {\n          consent.consentState = ANONYMOUS_CONSENT_STATUS.GIVEN;\n        }\n      }\n    }\n    return givenConsents;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { AnonymousConsentsInterceptor } from './anonymous-consents-interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: AnonymousConsentsInterceptor,\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode, Type } from '@angular/core';\nimport { BehaviorSubject, merge, Observable, Subject } from 'rxjs';\nimport { share, switchMap, tap } from 'rxjs/operators';\n\n/**\n * The object holds registered source observables as well as the merged result observable.\n */\ninterface EventMeta<T> {\n  /**\n   * Input subject used for dispatching occasional event (without registering a source)\n   */\n  inputSubject$: Subject<T>;\n\n  /**\n   * Observable with array of sources of the event\n   */\n  sources$: BehaviorSubject<Observable<T>[]>;\n\n  /**\n   * Output observable with merged all event sources\n   */\n  output$: Observable<T>;\n}\n\n/**\n * A service to register and observe event sources. Events are driven by event types, which are class signatures\n * for the given event.\n *\n * It is possible to register multiple sources to a single event, even without\n * knowing as multiple decoupled features can attach sources to the same\n * event type.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  /**\n   * The various events meta are collected in a map, stored by the event type class\n   */\n  private eventsMeta = new Map<Type<any>, EventMeta<any>>();\n\n  /**\n   * Register an event source for the given event type.\n   *\n   * CAUTION: To avoid memory leaks, the returned teardown function should be called\n   *  when the event source is no longer maintained by its creator\n   * (i.e. in `ngOnDestroy` if the event source was registered in the component).\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   *\n   * @returns a teardown function which unregisters the given event source\n   */\n  register<T>(eventType: Type<T>, source$: Observable<T>): () => void {\n    const event = this.getEventMeta(eventType);\n    const sources: Observable<T>[] = event.sources$.value;\n    if (sources.includes(source$)) {\n      if (isDevMode()) {\n        console.warn(\n          `EventService: the event source`,\n          source$,\n          `has been already registered for the type`,\n          eventType\n        );\n      }\n    } else {\n      event.sources$.next([...sources, source$]);\n    }\n\n    return () => this.unregister(eventType, source$);\n  }\n\n  /**\n   * Unregisters an event source for the given event type\n   *\n   * @param eventType the event type\n   * @param source$ an observable that represents the source\n   */\n  private unregister<T>(eventType: Type<T>, source$: Observable<T>): void {\n    const event = this.getEventMeta(eventType);\n    const newSources: Observable<T>[] = event.sources$.value.filter(\n      (s$) => s$ !== source$\n    );\n    event.sources$.next(newSources);\n  }\n\n  /**\n   * Returns a stream of events for the given event type\n   * @param eventTypes event type\n   */\n  get<T>(eventType: Type<T>): Observable<T> {\n    return this.getEventMeta(eventType).output$;\n  }\n\n  /**\n   * Dispatches a single event.\n   *\n   * However, it's recommended to use method `register` instead, whenever the event can come from some stream.\n   *  It allows for lazy computations in the event source stream -\n   *  if no one subscribes to the event, the logic of the event source stream won't be evaluated.\n   */\n  dispatch(event: Object): void {\n    const eventType = event.constructor as Type<any>;\n    const inputSubject$ = this.getInputSubject(eventType);\n    inputSubject$.next(event);\n  }\n\n  /**\n   * Returns the input subject used to dispatch a single event.\n   * The subject is created on demand, when it's needed for the first time.\n   * @param eventType type of event\n   */\n  private getInputSubject<T>(eventType: Type<T>): Subject<T> {\n    const eventMeta = this.getEventMeta(eventType);\n\n    if (!eventMeta.inputSubject$) {\n      eventMeta.inputSubject$ = new Subject<any>();\n      this.register(eventType, eventMeta.inputSubject$);\n    }\n    return eventMeta.inputSubject$;\n  }\n\n  /**\n   * Returns the event meta object for the given event type\n   */\n  private getEventMeta<T>(eventType: Type<T>): EventMeta<T> {\n    if (isDevMode()) {\n      this.validateEventType(eventType);\n    }\n\n    if (!this.eventsMeta.get(eventType)) {\n      this.createEventMeta(eventType);\n    }\n    return this.eventsMeta.get(eventType);\n  }\n\n  /**\n   * Creates the event meta object for the given event type\n   */\n  private createEventMeta<T>(eventType: Type<T>): void {\n    const sources$ = new BehaviorSubject<Observable<T>[]>([]);\n    let output$ = sources$.pipe(\n      switchMap((sources: Observable<T>[]) => merge(...sources)),\n      share() // share the result observable to avoid merging sources for each subscriber\n    );\n\n    if (isDevMode()) {\n      output$ = this.getValidatedEventStream(output$, eventType);\n    }\n\n    this.eventsMeta.set(eventType, {\n      inputSubject$: null, // will be created lazily by the `dispatch` method\n      sources$,\n      output$,\n    });\n  }\n\n  /**\n   * Checks if the event type is a valid type (is a class with constructor).\n   *\n   * Should be used only in dev mode.\n   */\n  private validateEventType<T>(eventType: Type<T>): void {\n    if (!eventType?.constructor) {\n      throw new Error(\n        `EventService:  ${eventType} is not a valid event type. Please provide a class reference.`\n      );\n    }\n  }\n\n  /**\n   * Returns the given event source with runtime validation whether the emitted values are instances of given event type.\n   *\n   * Should be used only in dev mode.\n   */\n  private getValidatedEventStream<T>(\n    source$: Observable<T>,\n    eventType: Type<T>\n  ): Observable<T> {\n    return source$.pipe(\n      tap((event) => {\n        if (!(event instanceof eventType)) {\n          console.warn(\n            `EventService: The stream`,\n            source$,\n            `emitted the event`,\n            event,\n            `that is not an instance of the declared type`,\n            eventType.name\n          );\n        }\n      })\n    );\n  }\n}\n","import { Type } from '@angular/core';\n\n/**\n * Creates an instance of the given class and fills its properties with the given data.\n *\n * @param type reference to the class\n * @param data object with properties to be copied to the class\n */\nexport function createFrom<T>(type: Type<T>, data: T): T {\n  return Object.assign(new type(), data);\n}\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { createFrom } from '../../util/create-from';\nimport { ActionToEventMapping } from './action-to-event-mapping';\n\n/**\n * Registers streams of ngrx actions as events source streams\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateEventService {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Registers an event source stream of specific events\n   * mapped from a given action type.\n   *\n   * @param mapping mapping from action to event\n   *\n   * @returns a teardown function that unregisters the event source\n   */\n  register<T>(mapping: ActionToEventMapping<T>): () => void {\n    return this.eventService.register(\n      mapping.event,\n      this.getFromAction(mapping)\n    );\n  }\n\n  /**\n   * Returns a stream of specific events mapped from a specific action.\n   * @param mapping mapping from action to event\n   */\n  protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T> {\n    return this.actionsSubject\n      .pipe(ofType(...[].concat(mapping.action)))\n      .pipe(\n        map((action: { type: string; payload: T }) =>\n          this.createEvent(action, mapping.event, mapping.factory)\n        )\n      );\n  }\n\n  /**\n   * Creates an event instance for given class out from the action object.\n   * Unless the `factory` parameter is given, the action's `payload` is used\n   * as the argument for the event's constructor.\n   *\n   * @param action instance of an Action\n   * @param mapping mapping from action to event\n   * @param factory optional function getting an action instance and returning an event instance\n   *\n   * @returns instance of an Event\n   */\n  protected createEvent<T>(\n    action: { type: string; payload?: any },\n    eventType: Type<T>,\n    factory?: (action: any) => T\n  ): T {\n    return factory\n      ? factory(action)\n      : createFrom(eventType, action.payload ?? {});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { map, tap, withLatestFrom } from 'rxjs/operators';\nimport { StorageSyncType } from '../../state/config/state-config';\nimport {\n  getStorage,\n  persistToStorage,\n  readFromStorage,\n} from '../../state/reducers/storage-sync.reducer';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatePersistenceService {\n  constructor(protected winRef: WindowRef) {}\n\n  /**\n   * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).\n   * It is context aware, so you can keep different state for te same feature based on specified context.\n   *\n   * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.\n   * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.\n   * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.\n   *\n   * On each context change onRead function will be executed with state from storage provided as a parameter.\n   *\n   * Omitting context$ will trigger onRead only once at initialization.\n   *\n   * @param key Key to use in storage for the synchronized state. Should be unique for each feature.\n   * @param state$ State to be saved and later restored.\n   * @param context$ Context for state\n   * @param storageType Storage type to be used to persist state\n   * @param onRead Function to be executed on each storage read after context change\n   *\n   * @returns Subscriptions for reading/writing in storage on context/state change\n   */\n  syncWithStorage<T>({\n    key,\n    state$,\n    context$ = of(''),\n    storageType = StorageSyncType.LOCAL_STORAGE,\n    onRead = () => {},\n  }: {\n    key: string;\n    state$: Observable<T>;\n    context$?: Observable<string | Array<string>>;\n    storageType?: StorageSyncType;\n    onRead?: (stateFromStorage: T) => void;\n  }): Subscription {\n    const storage = getStorage(storageType, this.winRef);\n\n    const subscriptions = new Subscription();\n\n    // Do not change order of subscription! Read should happen before write on context change.\n    subscriptions.add(\n      context$\n        .pipe(\n          map((context) => {\n            return readFromStorage(\n              storage,\n              this.generateKeyWithContext(context, key)\n            ) as T;\n          }),\n          tap((state) => onRead(state))\n        )\n        .subscribe()\n    );\n\n    subscriptions.add(\n      state$.pipe(withLatestFrom(context$)).subscribe(([state, context]) => {\n        persistToStorage(\n          this.generateKeyWithContext(context, key),\n          state,\n          storage\n        );\n      })\n    );\n\n    return subscriptions;\n  }\n\n  protected generateKeyWithContext(\n    context: string | Array<string>,\n    key: string\n  ): string {\n    return `spartacus⚿${[].concat(context).join('⚿')}⚿${key}`;\n  }\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderErrorSelector,\n  loaderLoadingSelector,\n  loaderSuccessSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { StateWithProcess } from '../process-state';\nimport { getProcessState } from './feature.selector';\n\nexport function getProcessStateFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, LoaderState<T>> {\n  return createSelector(getProcessState(), (entityState) =>\n    StateUtils.entityLoaderStateSelector(entityState, processId)\n  );\n}\n\nexport function getProcessLoadingFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderLoadingSelector(loaderState)\n  );\n}\n\nexport function getProcessSuccessFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderSuccessSelector(loaderState)\n  );\n}\n\nexport function getProcessErrorFactory<T>(\n  processId: string\n): MemoizedSelector<StateWithProcess<T>, boolean> {\n  return createSelector(getProcessStateFactory(processId), (loaderState) =>\n    loaderErrorSelector(loaderState)\n  );\n}\n","import { MemoizedSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { StateWithProcess, PROCESS_FEATURE } from '../process-state';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\n\nexport function getProcessState<T>(): MemoizedSelector<\n  StateWithProcess<T>,\n  EntityLoaderState<T>\n> {\n  return createFeatureSelector<EntityLoaderState<T>>(PROCESS_FEATURE);\n}\n","import { EntityLoaderState } from '../../state/utils/entity-loader/entity-loader-state';\n\nexport const PROCESS_FEATURE = 'process';\n\nexport interface StateWithProcess<T> {\n  [PROCESS_FEATURE]: EntityLoaderState<T>;\n}\n","import { Action } from '@ngrx/store';\n\nexport const LOAD_BILLING_COUNTRIES = '[User] Load Billing Countries';\nexport const LOAD_BILLING_COUNTRIES_FAIL = '[User] Load Billing Countries Fail';\nexport const LOAD_BILLING_COUNTRIES_SUCCESS =\n  '[User] Load Billing Countries Success';\n\nexport class LoadBillingCountries implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadBillingCountriesFail implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadBillingCountriesSuccess implements Action {\n  readonly type = LOAD_BILLING_COUNTRIES_SUCCESS;\n  constructor(public payload: any) {}\n}\n\nexport type BillingCountriesAction =\n  | LoadBillingCountries\n  | LoadBillingCountriesFail\n  | LoadBillingCountriesSuccess;\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[User] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[User] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import { Action } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\n\nexport const LOAD_DELIVERY_COUNTRIES = '[User] Load Delivery Countries';\nexport const LOAD_DELIVERY_COUNTRIES_FAIL =\n  '[User] Load Delivery Countries Fail';\nexport const LOAD_DELIVERY_COUNTRIES_SUCCESS =\n  '[User] Load Delivery Countries Success';\n\nexport class LoadDeliveryCountries implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES;\n  constructor() {}\n}\n\nexport class LoadDeliveryCountriesFail implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadDeliveryCountriesSuccess implements Action {\n  readonly type = LOAD_DELIVERY_COUNTRIES_SUCCESS;\n  constructor(public payload: Country[]) {}\n}\n\nexport type DeliveryCountriesAction =\n  | LoadDeliveryCountries\n  | LoadDeliveryCountriesFail\n  | LoadDeliveryCountriesSuccess;\n","import { Action } from '@ngrx/store';\n\nexport const FORGOT_PASSWORD_EMAIL_REQUEST =\n  '[User] Forgot Password Email Request';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS =\n  '[User] Forgot Password Email Request Success';\nexport const FORGOT_PASSWORD_EMAIL_REQUEST_FAIL =\n  '[User] Forgot Password Email Request Fail';\n\nexport class ForgotPasswordEmailRequest implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST;\n  constructor(public payload: string) {}\n}\n\nexport class ForgotPasswordEmailRequestFail implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ForgotPasswordEmailRequestSuccess implements Action {\n  readonly type = FORGOT_PASSWORD_EMAIL_REQUEST_SUCCESS;\n}\n\nexport type ForgotPasswordEmailRequestAction =\n  | ForgotPasswordEmailRequest\n  | ForgotPasswordEmailRequestFail\n  | ForgotPasswordEmailRequestSuccess;\n","import { Address, Country, Region } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport { Title, User } from '../../model/misc.model';\nimport {\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestList,\n} from '../../model/order.model';\nimport { StateUtils } from '../../state';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { NotificationPreference } from '../../model';\nimport { ProductInterestSearchResult } from '../../model/product-interest.model';\n\nexport const USER_FEATURE = 'user';\nexport const UPDATE_EMAIL_PROCESS_ID = 'updateEmail';\nexport const UPDATE_PASSWORD_PROCESS_ID = 'updatePassword';\nexport const UPDATE_USER_DETAILS_PROCESS_ID = 'updateUserDetails';\nexport const REGISTER_USER_PROCESS_ID = 'registerUser';\nexport const REMOVE_USER_PROCESS_ID = 'removeUser';\nexport const GIVE_CONSENT_PROCESS_ID = 'giveConsent';\nexport const WITHDRAW_CONSENT_PROCESS_ID = 'withdrawConsent';\nexport const UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID =\n  'updateNotificationPreferences';\nexport const ADD_PRODUCT_INTEREST_PROCESS_ID = 'addProductInterests';\nexport const REMOVE_PRODUCT_INTERESTS_PROCESS_ID = 'removeProductInterests';\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\n\nexport const USER_CONSENTS = '[User] User Consents';\nexport const USER_PAYMENT_METHODS = '[User] User Payment Methods';\nexport const USER_ORDERS = '[User] User Orders';\nexport const USER_ADDRESSES = '[User] User Addresses';\nexport const USER_RETURN_REQUESTS = '[User] Order Return Requests';\nexport const USER_RETURN_REQUEST_DETAILS = '[User] Return Request Details';\nexport const USER_ORDER_DETAILS = '[User] User Order Details';\nexport const REGIONS = '[User] Regions';\n\nexport const CUSTOMER_COUPONS = '[User] Customer Coupons';\nexport const SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID = 'subscribeCustomerCoupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID =\n  'unsubscribeCustomerCoupon';\nexport const CLAIM_CUSTOMER_COUPON_PROCESS_ID = 'claimCustomerCoupon';\nexport const NOTIFICATION_PREFERENCES = '[User] Notification Preferences';\nexport const PRODUCT_INTERESTS = '[User] Product Interests';\n\nexport interface StateWithUser {\n  [USER_FEATURE]: UserState;\n}\n\nexport interface UserState {\n  account: UserDetailsState;\n  addresses: StateUtils.LoaderState<Address[]>;\n  consents: StateUtils.LoaderState<ConsentTemplate[]>;\n  billingCountries: BillingCountriesState;\n  countries: DeliveryCountriesState;\n  payments: StateUtils.LoaderState<PaymentDetails[]>;\n  orders: StateUtils.LoaderState<OrderHistoryList>;\n  order: StateUtils.LoaderState<Order>;\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\n  titles: TitlesState;\n  regions: StateUtils.LoaderState<RegionsState>;\n  resetPassword: boolean;\n  consignmentTracking: ConsignmentTrackingState;\n  customerCoupons: StateUtils.LoaderState<CustomerCouponSearchResult>;\n  notificationPreferences: StateUtils.LoaderState<NotificationPreference[]>;\n  productInterests: StateUtils.LoaderState<ProductInterestSearchResult>;\n}\n\nexport interface RegionsState {\n  entities: Region[];\n  country: string;\n}\n\nexport interface BillingCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface BillingCountriesState {\n  entities: BillingCountryEntities;\n}\n\nexport interface DeliveryCountryEntities {\n  [key: string]: Country;\n}\n\nexport interface DeliveryCountriesState {\n  entities: DeliveryCountryEntities;\n}\n\nexport interface TitleEntities {\n  [key: string]: Title;\n}\n\nexport interface TitlesState {\n  entities: TitleEntities;\n}\n\nexport interface UserDetailsState {\n  details: User;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking?: ConsignmentTracking;\n}\n","import {\n  Order,\n  CancellationRequestEntryInputList,\n} from '../../../model/order.model';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDER_DETAILS, CANCEL_ORDER_PROCESS_ID } from '../user-state';\n\nexport const LOAD_ORDER_DETAILS = '[User] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';\n\nexport const CANCEL_ORDER = '[User] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(USER_ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_PAYMENT_METHODS } from '../user-state';\n\nexport const LOAD_USER_PAYMENT_METHODS = '[User] Load User Payment Methods';\nexport const LOAD_USER_PAYMENT_METHODS_FAIL =\n  '[User] Load User Payment Methods Fail';\nexport const LOAD_USER_PAYMENT_METHODS_SUCCESS =\n  '[User] Load User Payment Methods Success';\n\nexport const SET_DEFAULT_USER_PAYMENT_METHOD =\n  '[User] Set Default User Payment Method';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_FAIL =\n  '[User] Set Default User Payment Method Fail';\nexport const SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Set Default User Payment Method Success';\n\nexport const DELETE_USER_PAYMENT_METHOD = '[User] Delete User Payment Method';\nexport const DELETE_USER_PAYMENT_METHOD_FAIL =\n  '[User] Delete User Payment Method Fail';\nexport const DELETE_USER_PAYMENT_METHOD_SUCCESS =\n  '[User] Delete User  Payment Method Success';\n\nexport class LoadUserPaymentMethods extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS;\n  constructor(public payload: string) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class LoadUserPaymentMethodsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class LoadUserPaymentMethodsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_PAYMENT_METHODS_SUCCESS;\n  constructor(public payload: PaymentDetails[]) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class SetDefaultUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = SET_DEFAULT_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethod extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\nexport class DeleteUserPaymentMethodFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_FAIL;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS, payload);\n  }\n}\n\nexport class DeleteUserPaymentMethodSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_PAYMENT_METHOD_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_PAYMENT_METHODS);\n  }\n}\n\n// action types\nexport type UserPaymentMethodsAction =\n  | LoadUserPaymentMethods\n  | LoadUserPaymentMethodsFail\n  | LoadUserPaymentMethodsSuccess\n  | SetDefaultUserPaymentMethod\n  | SetDefaultUserPaymentMethodFail\n  | SetDefaultUserPaymentMethodSuccess\n  | DeleteUserPaymentMethod\n  | DeleteUserPaymentMethodFail\n  | DeleteUserPaymentMethodSuccess;\n","import { Action } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { REGIONS } from '../user-state';\n\nexport const LOAD_REGIONS = '[User] Load Regions';\nexport const LOAD_REGIONS_SUCCESS = '[User] Load Regions Success';\nexport const LOAD_REGIONS_FAIL = '[User] Load Regions Fail';\nexport const CLEAR_REGIONS = '[User] Clear Regions';\n\nexport class LoadRegions extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REGIONS;\n  constructor(public payload: string) {\n    super(REGIONS);\n  }\n}\n\nexport class LoadRegionsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REGIONS_FAIL;\n  constructor(public payload: any) {\n    super(REGIONS, payload);\n  }\n}\n\nexport class LoadRegionsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REGIONS_SUCCESS;\n  constructor(public payload: { entities: Region[]; country: string }) {\n    super(REGIONS);\n  }\n}\n\nexport class ClearRegions implements Action {\n  readonly type = CLEAR_REGIONS;\n  constructor() {}\n}\n\nexport type RegionsAction =\n  | LoadRegions\n  | LoadRegionsFail\n  | LoadRegionsSuccess\n  | ClearRegions;\n","import { Action } from '@ngrx/store';\n\nexport const RESET_PASSWORD = '[User] Reset Password';\nexport const RESET_PASSWORD_SUCCESS = '[User] Reset Password Success';\nexport const RESET_PASSWORD_FAIL = '[User] Reset Password Fail';\n\nexport class ResetPassword implements Action {\n  readonly type = RESET_PASSWORD;\n  constructor(public payload: { token: string; password: string }) {}\n}\n\nexport class ResetPasswordFail implements Action {\n  readonly type = RESET_PASSWORD_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ResetPasswordSuccess implements Action {\n  readonly type = RESET_PASSWORD_SUCCESS;\n}\n\nexport type ResetPasswordAction =\n  | ResetPassword\n  | ResetPasswordFail\n  | ResetPasswordSuccess;\n","import { Action } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\n\nexport const LOAD_TITLES = '[User] Load Tiltes';\nexport const LOAD_TITLES_FAIL = '[User] Load Titles Fail';\nexport const LOAD_TITLES_SUCCESS = '[User] Load Titles Success';\n\nexport class LoadTitles implements Action {\n  readonly type = LOAD_TITLES;\n  constructor() {}\n}\n\nexport class LoadTitlesFail implements Action {\n  readonly type = LOAD_TITLES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadTitlesSuccess implements Action {\n  readonly type = LOAD_TITLES_SUCCESS;\n  constructor(public payload: Title[]) {}\n}\n\nexport type TitlesAction = LoadTitles | LoadTitlesFail | LoadTitlesSuccess;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_EMAIL_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_EMAIL = '[User] Update Email';\nexport const UPDATE_EMAIL_ERROR = '[User] Update Email Error';\nexport const UPDATE_EMAIL_SUCCESS = '[User] Update Email Success';\nexport const RESET_EMAIL = '[User] Reset Email';\n\nexport class UpdateEmailAction extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_EMAIL;\n  constructor(\n    public payload: {\n      uid: string;\n      password: string;\n      newUid: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailSuccessAction extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_EMAIL_SUCCESS;\n  constructor(public newUid: string) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport class UpdateEmailErrorAction extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_EMAIL_ERROR;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUpdateEmailAction extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_EMAIL;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_EMAIL_PROCESS_ID);\n  }\n}\n\nexport type EmailActions =\n  | UpdateEmailAction\n  | UpdateEmailSuccessAction\n  | UpdateEmailErrorAction\n  | ResetUpdateEmailAction;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_PASSWORD_PROCESS_ID } from '../user-state';\n\nexport const UPDATE_PASSWORD = '[User] Update Password';\nexport const UPDATE_PASSWORD_FAIL = '[User] Update Password Fail';\nexport const UPDATE_PASSWORD_SUCCESS = '[User] Update Password Success';\nexport const UPDATE_PASSWORD_RESET =\n  '[User] Reset Update Password Process State';\n\nexport class UpdatePassword extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_PASSWORD;\n  constructor(\n    public payload: { userId: string; oldPassword: string; newPassword: string }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_PASSWORD_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdatePasswordSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_PASSWORD_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\nexport class UpdatePasswordReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = UPDATE_PASSWORD_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_PASSWORD_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UpdatePasswordAction =\n  | UpdatePassword\n  | UpdatePasswordFail\n  | UpdatePasswordSuccess\n  | UpdatePasswordReset;\n","import { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ADDRESSES } from '../user-state';\n\nexport const LOAD_USER_ADDRESSES = '[User] Load User Addresses';\nexport const LOAD_USER_ADDRESSES_FAIL = '[User] Load User Addresses Fail';\nexport const LOAD_USER_ADDRESSES_SUCCESS = '[User] Load User Addresses Success';\n\nexport const ADD_USER_ADDRESS = '[User] Add User Address';\nexport const ADD_USER_ADDRESS_FAIL = '[User] Add User Address Fail';\nexport const ADD_USER_ADDRESS_SUCCESS = '[User] Add User Address Success';\n\nexport const UPDATE_USER_ADDRESS = '[User] Update User Address';\nexport const UPDATE_USER_ADDRESS_FAIL = '[User] Update User Address Fail';\nexport const UPDATE_USER_ADDRESS_SUCCESS = '[User] Update User Address Success';\n\nexport const DELETE_USER_ADDRESS = '[User] Delete User Address';\nexport const DELETE_USER_ADDRESS_FAIL = '[User] Delete User Address Fail';\nexport const DELETE_USER_ADDRESS_SUCCESS = '[User] Delete User Address Success';\n\nexport class LoadUserAddresses extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ADDRESSES;\n  constructor(public payload: string) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class LoadUserAddressesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ADDRESSES_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class LoadUserAddressesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ADDRESSES_SUCCESS;\n  constructor(public payload: Address[]) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Adding address actions\nexport class AddUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = ADD_USER_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class AddUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = ADD_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class AddUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = ADD_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Updating address actions\nexport class UpdateUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = UPDATE_USER_ADDRESS;\n  constructor(\n    public payload: { userId: string; addressId: string; address: Address }\n  ) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class UpdateUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = UPDATE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class UpdateUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = UPDATE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// Deleting address actions\nexport class DeleteUserAddress extends StateUtils.LoaderLoadAction {\n  readonly type = DELETE_USER_ADDRESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\nexport class DeleteUserAddressFail extends StateUtils.LoaderFailAction {\n  readonly type = DELETE_USER_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES, payload);\n  }\n}\n\nexport class DeleteUserAddressSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = DELETE_USER_ADDRESS_SUCCESS;\n  constructor(public payload: any) {\n    super(USER_ADDRESSES);\n  }\n}\n\n// action types\nexport type UserAddressesAction =\n  | LoadUserAddresses\n  | LoadUserAddressesFail\n  | LoadUserAddressesSuccess\n  | AddUserAddress\n  | AddUserAddressFail\n  | AddUserAddressSuccess\n  | UpdateUserAddress\n  | UpdateUserAddressFail\n  | UpdateUserAddressSuccess\n  | DeleteUserAddress\n  | DeleteUserAddressFail\n  | DeleteUserAddressSuccess;\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  USER_CONSENTS,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../user-state';\n\nexport const LOAD_USER_CONSENTS = '[User] Load User Consents';\nexport const LOAD_USER_CONSENTS_SUCCESS = '[User] Load User Consents Success';\nexport const LOAD_USER_CONSENTS_FAIL = '[User] Load User Consents Fail';\nexport const RESET_LOAD_USER_CONSENTS = '[User] Reset Load User Consents';\n\nexport const GIVE_USER_CONSENT = '[User] Give User Consent';\nexport const GIVE_USER_CONSENT_FAIL = '[User] Give User Consent Fail';\nexport const GIVE_USER_CONSENT_SUCCESS = '[User] Give User Consent Success';\nexport const RESET_GIVE_USER_CONSENT_PROCESS =\n  '[User] Reset Give User Consent Process';\nexport const TRANSFER_ANONYMOUS_CONSENT = '[User] Transfer Anonymous Consent';\n\nexport const WITHDRAW_USER_CONSENT = '[User] Withdraw User Consent';\nexport const WITHDRAW_USER_CONSENT_FAIL = '[User] Withdraw User Consent Fail';\nexport const WITHDRAW_USER_CONSENT_SUCCESS =\n  '[User] Withdraw User Consent Success';\nexport const RESET_WITHDRAW_USER_CONSENT_PROCESS =\n  '[User] Reset Withdraw User Consent Process';\n\nexport class LoadUserConsents extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_CONSENTS;\n  constructor(public payload: string) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class LoadUserConsentsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_CONSENTS_FAIL;\n  constructor(public payload: any) {\n    super(USER_CONSENTS, payload);\n  }\n}\n\nexport class LoadUserConsentsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_CONSENTS_SUCCESS;\n  constructor(public payload: ConsentTemplate[]) {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class ResetLoadUserConsents extends StateUtils.LoaderResetAction {\n  readonly type = RESET_LOAD_USER_CONSENTS;\n  constructor() {\n    super(USER_CONSENTS);\n  }\n}\n\nexport class GiveUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = GIVE_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class GiveUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = GIVE_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class GiveUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = GIVE_USER_CONSENT_SUCCESS;\n  constructor(public consentTemplate: ConsentTemplate) {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetGiveUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_GIVE_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, GIVE_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class TransferAnonymousConsent {\n  readonly type = TRANSFER_ANONYMOUS_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentTemplateId: string;\n      consentTemplateVersion: number;\n    }\n  ) {}\n}\n\nexport class WithdrawUserConsent extends StateUtils.EntityLoadAction {\n  readonly type = WITHDRAW_USER_CONSENT;\n  constructor(\n    public payload: {\n      userId: string;\n      consentCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class WithdrawUserConsentFail extends StateUtils.EntityFailAction {\n  readonly type = WITHDRAW_USER_CONSENT_FAIL;\n  constructor(payload: any) {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID, payload);\n  }\n}\n\nexport class WithdrawUserConsentSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = WITHDRAW_USER_CONSENT_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport class ResetWithdrawUserConsentProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_WITHDRAW_USER_CONSENT_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, WITHDRAW_CONSENT_PROCESS_ID);\n  }\n}\n\nexport type UserConsentsAction =\n  | LoadUserConsents\n  | LoadUserConsentsFail\n  | LoadUserConsentsSuccess\n  | ResetLoadUserConsents\n  | GiveUserConsent\n  | GiveUserConsentFail\n  | GiveUserConsentSuccess\n  | ResetGiveUserConsentProcess\n  | WithdrawUserConsent\n  | WithdrawUserConsentFail\n  | WithdrawUserConsentSuccess\n  | ResetWithdrawUserConsentProcess;\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UPDATE_USER_DETAILS_PROCESS_ID } from '../user-state';\n\nexport const LOAD_USER_DETAILS = '[User] Load User Details';\nexport const LOAD_USER_DETAILS_FAIL = '[User] Load User Details Fail';\nexport const LOAD_USER_DETAILS_SUCCESS = '[User] Load User Details Success';\n\nexport const UPDATE_USER_DETAILS = '[User] Update User Details';\nexport const UPDATE_USER_DETAILS_FAIL = '[User] Update User Details Fail';\nexport const UPDATE_USER_DETAILS_SUCCESS = '[User] Update User Details Success';\nexport const RESET_USER_DETAILS = '[User] Reset User Details';\n\nexport class LoadUserDetails implements Action {\n  readonly type = LOAD_USER_DETAILS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadUserDetailsFail implements Action {\n  readonly type = LOAD_USER_DETAILS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadUserDetailsSuccess implements Action {\n  readonly type = LOAD_USER_DETAILS_SUCCESS;\n  constructor(public payload: User) {}\n}\n\nexport class UpdateUserDetails extends StateUtils.EntityLoadAction {\n  readonly type = UPDATE_USER_DETAILS;\n  constructor(public payload: { username: string; userDetails: User }) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class UpdateUserDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = UPDATE_USER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateUserDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = UPDATE_USER_DETAILS_SUCCESS;\n  constructor(public userUpdates: User) {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetUpdateUserDetails extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_USER_DETAILS;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_USER_DETAILS_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserDetailsAction =\n  | LoadUserDetails\n  | LoadUserDetailsFail\n  | LoadUserDetailsSuccess\n  | UpdateUserDetails\n  | UpdateUserDetailsFail\n  | UpdateUserDetailsSuccess\n  | ResetUpdateUserDetails;\n","import { Action } from '@ngrx/store';\nexport const CLEAR_USER_MISCS_DATA = '[User] Clear User Misc Data';\n\nexport class ClearUserMiscsData implements Action {\n  readonly type = CLEAR_USER_MISCS_DATA;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { USER_ORDERS } from '../user-state';\n\nexport const LOAD_USER_ORDERS = '[User] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[User] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[User] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[User] Clear User Orders';\n\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(USER_ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(USER_ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(USER_ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import { Action } from '@ngrx/store';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport { StateUtils } from '../../../state/utils/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n} from '../user-state';\n\nexport const REGISTER_USER = '[User] Register User';\nexport const REGISTER_USER_FAIL = '[User] Register User Fail';\nexport const REGISTER_USER_SUCCESS = '[User] Register User Success';\nexport const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';\n\nexport const REGISTER_GUEST = '[User] Register Guest';\nexport const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';\nexport const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';\n\nexport const REMOVE_USER = '[User] Remove User';\nexport const REMOVE_USER_FAIL = '[User] Remove User Fail';\nexport const REMOVE_USER_SUCCESS = '[User] Remove User Success';\nexport const REMOVE_USER_RESET = '[User] Reset Remove User Process State';\n\nexport class RegisterUser extends StateUtils.EntityLoadAction {\n  readonly type = REGISTER_USER;\n  constructor(public payload: UserSignUp) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterUserFail extends StateUtils.EntityFailAction {\n  readonly type = REGISTER_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RegisterUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REGISTER_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_REGISTER_USER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);\n  }\n}\n\nexport class RegisterGuest implements Action {\n  readonly type = REGISTER_GUEST;\n  constructor(public payload: { guid: string; password: string }) {}\n}\n\nexport class RegisterGuestFail implements Action {\n  readonly type = REGISTER_GUEST_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class RegisterGuestSuccess implements Action {\n  readonly type = REGISTER_GUEST_SUCCESS;\n}\n\nexport class RemoveUser extends StateUtils.EntityLoadAction {\n  readonly type = REMOVE_USER;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserFail extends StateUtils.EntityFailAction {\n  readonly type = REMOVE_USER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);\n  }\n}\n\nexport class RemoveUserSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = REMOVE_USER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\nexport class RemoveUserReset extends StateUtils.EntityLoaderResetAction {\n  readonly type = REMOVE_USER_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);\n  }\n}\n\n// action types\nexport type UserRegisterOrRemoveAction =\n  | RegisterUser\n  | RegisterUserFail\n  | RegisterUserSuccess\n  | ResetRegisterUserProcess\n  | RegisterGuest\n  | RegisterGuestFail\n  | RegisterGuestSuccess\n  | RemoveUser\n  | RemoveUserFail\n  | RemoveUserSuccess\n  | RemoveUserReset;\n","import {\n  CUSTOMER_COUPONS,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { PROCESS_FEATURE } from '../../../process/store';\n\nexport const LOAD_CUSTOMER_COUPONS = '[User] Load Customer Coupons';\nexport const LOAD_CUSTOMER_COUPONS_FAIL = '[User] Load Customer Coupons Fail';\nexport const LOAD_CUSTOMER_COUPONS_SUCCESS =\n  '[User] Load Customer Coupons Success';\nexport const RESET_LOAD_CUSTOMER_COUPONS = '[User] Reset Load Customer Coupons';\n\nexport const SUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Subscribe Customer Notification Coupon';\nexport const SUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Subscribe Customer Coupon Notification Fail';\nexport const SUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Subscribe Customer Coupon Notification Success';\nexport const RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Subscribe Customer Coupon Process';\n\nexport const UNSUBSCRIBE_CUSTOMER_COUPON =\n  '[User] Unsubscribe Customer Notification Coupon';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_FAIL =\n  '[User] Unsubscribe Customer Coupon Notification Fail';\nexport const UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS =\n  '[User] Unsubscribe Customer Coupon Notification Success';\nexport const RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS =\n  '[User] Reset Unsubscribe Customer Coupon Process';\n\nexport const CLAIM_CUSTOMER_COUPON = '[User] Claim Customer';\nexport const CLAIM_CUSTOMER_COUPON_FAIL = '[User] Claim Customer Fail';\nexport const CLAIM_CUSTOMER_COUPON_SUCCESS = '[User] Claim Customer Success';\n\nexport class LoadCustomerCoupons extends LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_COUPONS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class LoadCustomerCouponsFail extends LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_COUPONS, payload);\n  }\n}\n\nexport class LoadCustomerCouponsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_COUPONS_SUCCESS;\n  constructor(public payload: CustomerCouponSearchResult) {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\nexport class ResetLoadCustomerCoupons extends LoaderResetAction {\n  readonly type = RESET_LOAD_CUSTOMER_COUPONS;\n  constructor() {\n    super(CUSTOMER_COUPONS);\n  }\n}\n\n// Subscribe coupon notification actions\nexport class SubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class SubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class SubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = SUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCouponNotification) {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetSubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_SUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCoupon extends EntityLoadAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class UnsubscribeCustomerCouponFail extends EntityFailAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class UnsubscribeCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetUnsubscribeCustomerCouponProcess extends EntityLoaderResetAction {\n  readonly type = RESET_UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCoupon extends EntityLoadAction {\n  readonly type = CLAIM_CUSTOMER_COUPON;\n  constructor(\n    public payload: {\n      userId: string;\n      couponCode;\n    }\n  ) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID);\n  }\n}\n\nexport class ClaimCustomerCouponFail extends EntityFailAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\nexport class ClaimCustomerCouponSuccess extends EntitySuccessAction {\n  readonly type = CLAIM_CUSTOMER_COUPON_SUCCESS;\n  constructor(public payload: CustomerCoupon2Customer) {\n    super(PROCESS_FEATURE, CLAIM_CUSTOMER_COUPON_PROCESS_ID, payload);\n  }\n}\n\n// action types\nexport type CustomerCouponAction =\n  | LoadCustomerCoupons\n  | LoadCustomerCouponsFail\n  | LoadCustomerCouponsSuccess\n  | ResetLoadCustomerCoupons\n  | SubscribeCustomerCoupon\n  | SubscribeCustomerCouponFail\n  | SubscribeCustomerCouponSuccess\n  | ResetSubscribeCustomerCouponProcess\n  | UnsubscribeCustomerCoupon\n  | UnsubscribeCustomerCouponFail\n  | UnsubscribeCustomerCouponSuccess\n  | ResetUnsubscribeCustomerCouponProcess\n  | ClaimCustomerCoupon\n  | ClaimCustomerCouponFail\n  | ClaimCustomerCouponSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n  NOTIFICATION_PREFERENCES,\n} from '../user-state';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\n\nexport const LOAD_NOTIFICATION_PREFERENCES =\n  '[User] Load Notification Preferences';\nexport const LOAD_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Load Notification Preferences Fail';\nexport const LOAD_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Load Notification Preferences Success';\nexport const UPDATE_NOTIFICATION_PREFERENCES =\n  '[User] Update Notification Preferences';\nexport const UPDATE_NOTIFICATION_PREFERENCES_FAIL =\n  '[User] Update Notification Preferences Fail';\nexport const UPDATE_NOTIFICATION_PREFERENCES_SUCCESS =\n  '[User] Update Notification Preferences Success';\nexport const RESET_NOTIFICATION_PREFERENCES =\n  '[User] Reset Notification Preferences';\nexport const CLEAR_NOTIFICATION_PREFERENCES =\n  '[User] Clear Notification Preferences';\n\nexport class LoadNotificationPreferences extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES;\n  constructor(public payload: string) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class LoadNotificationPreferencesFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(NOTIFICATION_PREFERENCES, payload);\n  }\n}\n\nexport class LoadNotificationPreferencesSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport class UpdateNotificationPreferences extends EntityLoadAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES;\n  constructor(\n    public payload: { userId: string; preferences: NotificationPreference[] }\n  ) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class UpdateNotificationPreferencesFail extends EntityFailAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID, payload);\n  }\n}\n\nexport class UpdateNotificationPreferencesSuccess extends EntitySuccessAction {\n  readonly type = UPDATE_NOTIFICATION_PREFERENCES_SUCCESS;\n  constructor(public payload: NotificationPreference[]) {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ResetNotificationPreferences extends EntityLoaderResetAction {\n  readonly type = RESET_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(PROCESS_FEATURE, UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID);\n  }\n}\n\nexport class ClearNotificationPreferences extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_NOTIFICATION_PREFERENCES;\n  constructor() {\n    super(NOTIFICATION_PREFERENCES);\n  }\n}\n\nexport type NotificationPreferenceAction =\n  | LoadNotificationPreferences\n  | LoadNotificationPreferencesFail\n  | LoadNotificationPreferencesSuccess\n  | UpdateNotificationPreferences\n  | UpdateNotificationPreferencesFail\n  | UpdateNotificationPreferencesSuccess\n  | ResetNotificationPreferences\n  | ClearNotificationPreferences;\n","import {\n  PRODUCT_INTERESTS,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n} from '../user-state';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  LoaderLoadAction,\n  LoaderFailAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n  EntityLoaderResetAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\n\nexport const LOAD_PRODUCT_INTERESTS = 'Load Product Interests';\nexport const LOAD_PRODUCT_INTERESTS_FAIL = 'Load Product Interests Fail';\nexport const LOAD_PRODUCT_INTERESTS_SUCCESS = 'Load Product Interests Success';\n\nexport const REMOVE_PRODUCT_INTEREST = 'Remove Product Interest';\nexport const REMOVE_PRODUCT_INTEREST_SUCCESS =\n  'Remove Product Interest Success';\nexport const REMOVE_PRODUCT_INTEREST_FAIL = 'Remove Product Interest Fail';\n\nexport const ADD_PRODUCT_INTEREST = 'Add Product Interest';\nexport const ADD_PRODUCT_INTEREST_FAIL = 'Add Product Interest Fail';\nexport const ADD_PRODUCT_INTEREST_SUCCESS = 'Add Product Interest Success';\n\nexport const ADD_PRODUCT_INTEREST_RESET = 'Add Product Interest Reset';\nexport const REMOVE_PRODUCT_INTEREST_RESET = 'Remove Product Interest Reset';\n\nexport const CLEAR_PRODUCT_INTERESTS = 'Clear Product Interests';\n\nexport class LoadProductInterests extends LoaderLoadAction {\n  readonly type = LOAD_PRODUCT_INTERESTS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      productCode?: string;\n      notificationType?: NotificationType;\n    }\n  ) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class LoadProductInterestsFail extends LoaderFailAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_FAIL;\n  constructor(public payload: any) {\n    super(PRODUCT_INTERESTS, payload);\n  }\n}\n\nexport class LoadProductInterestsSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_PRODUCT_INTERESTS_SUCCESS;\n  constructor(public payload: ProductInterestSearchResult) {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport class RemoveProductInterest extends EntityLoadAction {\n  readonly type = REMOVE_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      item: ProductInterestEntryRelation;\n      singleDelete?: boolean;\n    }\n  ) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestSuccess extends EntitySuccessAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class RemoveProductInterestFail extends EntityFailAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID, payload);\n  }\n}\n\nexport class AddProductInterest extends EntityLoadAction {\n  readonly type = ADD_PRODUCT_INTEREST;\n  constructor(\n    public payload: {\n      userId: string;\n      productCode: string;\n      notificationType: NotificationType;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestSuccess extends EntitySuccessAction {\n  readonly type = ADD_PRODUCT_INTEREST_SUCCESS;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class AddProductInterestFail extends EntityFailAction {\n  readonly type = ADD_PRODUCT_INTEREST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID, payload);\n  }\n}\n\nexport class ResetAddInterestState extends EntityLoaderResetAction {\n  readonly type = ADD_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_PRODUCT_INTEREST_PROCESS_ID);\n  }\n}\n\nexport class ResetRemoveInterestState extends EntityLoaderResetAction {\n  readonly type = REMOVE_PRODUCT_INTEREST_RESET;\n  constructor() {\n    super(PROCESS_FEATURE, REMOVE_PRODUCT_INTERESTS_PROCESS_ID);\n  }\n}\n\nexport class ClearProductInterests extends LoaderResetAction {\n  readonly type = CLEAR_PRODUCT_INTERESTS;\n  constructor() {\n    super(PRODUCT_INTERESTS);\n  }\n}\n\nexport type ProductInterestsAction =\n  | LoadProductInterests\n  | LoadProductInterestsFail\n  | LoadProductInterestsSuccess\n  | RemoveProductInterest\n  | RemoveProductInterestSuccess\n  | RemoveProductInterestFail\n  | AddProductInterest\n  | AddProductInterestFail\n  | AddProductInterestSuccess\n  | ResetAddInterestState\n  | ResetRemoveInterestState\n  | ClearProductInterests;\n","import {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport {\n  USER_RETURN_REQUESTS,\n  USER_RETURN_REQUEST_DETAILS,\n  CANCEL_RETURN_PROCESS_ID,\n} from '../user-state';\nimport {\n  LoaderFailAction,\n  LoaderLoadAction,\n  LoaderSuccessAction,\n  LoaderResetAction,\n} from '../../../state/utils/loader/loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[User] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[User] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[User] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[User] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[User] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[User] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[User] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[User] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[User] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(USER_RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(USER_RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(USER_RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState, USER_FEATURE } from '../user-state';\n\nexport const getUserState: MemoizedSelector<\n  StateWithUser,\n  UserState\n> = createFeatureSelector<UserState>(USER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  BillingCountriesState,\n  BillingCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getBillingCountriesState: MemoizedSelector<\n  StateWithUser,\n  BillingCountriesState\n> = createSelector(getUserState, (state: UserState) => state.billingCountries);\n\nexport const getBillingCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  BillingCountryEntities\n> = createSelector(\n  getBillingCountriesState,\n  (state: BillingCountriesState) => state.entities\n);\n\nexport const getAllBillingCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getBillingCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '../../../model/index';\nimport {\n  ConsignmentTrackingState,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTrackingState\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithUser,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Country } from '../../../model/address.model';\nimport {\n  DeliveryCountriesState,\n  DeliveryCountryEntities,\n  StateWithUser,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDeliveryCountriesState: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountriesState\n> = createSelector(getUserState, (state: UserState) => state.countries);\n\nexport const getDeliveryCountriesEntites: MemoizedSelector<\n  StateWithUser,\n  DeliveryCountryEntities\n> = createSelector(\n  getDeliveryCountriesState,\n  (state: DeliveryCountriesState) => state.entities\n);\n\nexport const getAllDeliveryCountries: MemoizedSelector<\n  StateWithUser,\n  Country[]\n> = createSelector(getDeliveryCountriesEntites, (entites) =>\n  Object.keys(entites).map((isocode) => entites[isocode])\n);\n\nexport const countrySelectorFactory = (\n  isocode: string\n): MemoizedSelector<StateWithUser, Country> =>\n  createSelector(getDeliveryCountriesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[isocode] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Order>\n> = createSelector(getUserState, (state: UserState) => state.order);\n\nexport const getOrderDetails: MemoizedSelector<\n  StateWithUser,\n  Order\n> = createSelector(getOrderState, (state: LoaderState<Order>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateUtils } from '../../../state/utils/index';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequest>\n> = createSelector(getUserState, (state: UserState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithUser,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) => StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: LoaderState<ReturnRequest>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ReturnRequestList>\n> = createSelector(getUserState, (state: UserState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithUser,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: LoaderState<ReturnRequestList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getPaymentMethodsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<PaymentDetails[]>\n> = createSelector(getUserState, (state: UserState) => state.payments);\n\nexport const getPaymentMethods: MemoizedSelector<\n  StateWithUser,\n  PaymentDetails[]\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getPaymentMethodsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getPaymentMethodsLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPaymentMethodsState,\n  (state: LoaderState<PaymentDetails[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Region } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { RegionsState, StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getRegionsLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<RegionsState>\n> = createSelector(getUserState, (state: UserState) => state.regions);\n\nexport const getAllRegions: MemoizedSelector<\n  StateWithUser,\n  Region[]\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => {\n    return StateUtils.loaderValueSelector(state).entities;\n  }\n);\n\nexport const getRegionsDataAndLoading: MemoizedSelector<\n  StateWithUser,\n  {\n    loaded: boolean;\n    loading: boolean;\n    regions: Region[];\n    country: string;\n  }\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) => ({\n    loaded: StateUtils.loaderSuccessSelector(state),\n    loading: StateUtils.loaderLoadingSelector(state),\n    regions: StateUtils.loaderValueSelector(state).entities,\n    country: StateUtils.loaderValueSelector(state).country,\n  })\n);\n\nexport const getRegionsCountry: MemoizedSelector<\n  StateWithUser,\n  string\n> = createSelector(\n  getRegionsLoaderState,\n  (state: LoaderState<RegionsState>) =>\n    StateUtils.loaderValueSelector(state).country\n);\n\nexport const getRegionsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getRegionsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getRegionsLoaderState, (state: LoaderState<RegionsState>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getResetPassword: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getUserState, (state: UserState) => state.resetPassword);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Title } from '../../../model/misc.model';\nimport {\n  StateWithUser,\n  TitleEntities,\n  TitlesState,\n  UserState,\n} from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getTitlesState: MemoizedSelector<\n  StateWithUser,\n  TitlesState\n> = createSelector(getUserState, (state: UserState) => state.titles);\n\nexport const getTitlesEntites: MemoizedSelector<\n  StateWithUser,\n  TitleEntities\n> = createSelector(getTitlesState, (state: TitlesState) => state.entities);\n\nexport const getAllTitles: MemoizedSelector<\n  StateWithUser,\n  Title[]\n> = createSelector(getTitlesEntites, (entites) =>\n  Object.keys(entites).map((code) => entites[code])\n);\n\nexport const titleSelectorFactory = (\n  code: string\n): MemoizedSelector<StateWithUser, Title> =>\n  createSelector(getTitlesEntites, (entities) =>\n    Object.keys(entities).length !== 0 ? entities[code] : null\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getAddressesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<Address[]>\n> = createSelector(getUserState, (state: UserState) => state.addresses);\n\nexport const getAddresses: MemoizedSelector<\n  StateWithUser,\n  Address[]\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getAddressesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getAddressesLoaderState, (state: LoaderState<Address[]>) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getAddressesLoadedSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getAddressesLoaderState,\n  (state: LoaderState<Address[]>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getConsentsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ConsentTemplate[]>\n> = createSelector(getUserState, (state: UserState) => state.consents);\n\nexport const getConsentsValue: MemoizedSelector<\n  StateWithUser,\n  ConsentTemplate[]\n> = createSelector(getConsentsState, StateUtils.loaderValueSelector);\n\nexport const getConsentByTemplateId = (\n  templateId: string\n): MemoizedSelector<StateWithUser, ConsentTemplate> =>\n  createSelector(getConsentsValue, (templates) =>\n    templates.find((template) => template.id === templateId)\n  );\n\nexport const getConsentsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderLoadingSelector);\n\nexport const getConsentsSuccess: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderSuccessSelector);\n\nexport const getConsentsError: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getConsentsState, StateUtils.loaderErrorSelector);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { User } from '../../../model/misc.model';\nimport { StateWithUser, UserDetailsState, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getDetailsState: MemoizedSelector<\n  StateWithUser,\n  UserDetailsState\n> = createSelector(getUserState, (state: UserState) => state.account);\n\nexport const getDetails: MemoizedSelector<StateWithUser, User> = createSelector(\n  getDetailsState,\n  (state: UserDetailsState) => state.details\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<OrderHistoryList>\n> = createSelector(getUserState, (state: UserState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getOrders: MemoizedSelector<\n  StateWithUser,\n  OrderHistoryList\n> = createSelector(getOrdersState, (state: LoaderState<OrderHistoryList>) =>\n  StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\n\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderSuccessSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nimport { getUserState } from './feature.selector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\n\nexport const getCustomerCouponsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<CustomerCouponSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.customerCoupons);\n\nexport const getCustomerCouponsLoaded: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderSuccessSelector(state)\n);\n\nexport const getCustomerCouponsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n\nexport const getCustomerCoupons: MemoizedSelector<\n  StateWithUser,\n  CustomerCouponSearchResult\n> = createSelector(\n  getCustomerCouponsState,\n  (state: LoaderState<CustomerCouponSearchResult>) => loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { StateWithUser, UserState } from '../user-state';\nimport { getUserState } from './feature.selector';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\n\nexport const getPreferencesLoaderState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<NotificationPreference[]>\n> = createSelector(\n  getUserState,\n  (state: UserState) => state.notificationPreferences\n);\n\nexport const getPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderValueSelector(state)\n);\n\nexport const getEnabledPreferences: MemoizedSelector<\n  StateWithUser,\n  NotificationPreference[]\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) =>\n    loaderValueSelector(state).filter((p) => p.enabled)\n);\n\nexport const getPreferencesLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getPreferencesLoaderState,\n  (state: LoaderState<NotificationPreference[]>) => loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { UserState, StateWithUser } from '../user-state';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  loaderValueSelector,\n  loaderLoadingSelector,\n} from '../../../state/utils/loader/loader.selectors';\nimport { getUserState } from './feature.selector';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const getInterestsState: MemoizedSelector<\n  StateWithUser,\n  LoaderState<ProductInterestSearchResult>\n> = createSelector(getUserState, (state: UserState) => state.productInterests);\n\nexport const getInterests: MemoizedSelector<\n  StateWithUser,\n  ProductInterestSearchResult\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderValueSelector(state)\n);\n\nexport const getInterestsLoading: MemoizedSelector<\n  StateWithUser,\n  boolean\n> = createSelector(\n  getInterestsState,\n  (state: LoaderState<ProductInterestSearchResult>) =>\n    loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { iif, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Consent, ConsentTemplate } from '../../model/consent.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  GIVE_CONSENT_PROCESS_ID,\n  StateWithUser,\n  WITHDRAW_CONSENT_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves all consents.\n   */\n  loadConsents(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserConsents(userId));\n    });\n  }\n\n  /**\n   * Returns all consent templates. If `loadIfMissing` parameter is set to `true`, the method triggers the load if consent templates.\n   * @param loadIfMissing is set to `true`, the method will load templates if those are not already present. The default value is `false`.\n   */\n  getConsents(loadIfMissing = false): Observable<ConsentTemplate[]> {\n    return iif(\n      () => loadIfMissing,\n      this.store.pipe(\n        select(UsersSelectors.getConsentsValue),\n        withLatestFrom(\n          this.getConsentsResultLoading(),\n          this.getConsentsResultSuccess()\n        ),\n        filter(([_templates, loading, _success]) => !loading),\n        tap(([templates, _loading, success]) => {\n          if (!templates || templates.length === 0) {\n            // avoid infite loop - if we've already attempted to load templates and we got an empty array as the response\n            if (!success) {\n              this.loadConsents();\n            }\n          }\n        }),\n        filter(([templates, _loading]) => Boolean(templates)),\n        map(([templates, _loading]) => templates)\n      ),\n      this.store.pipe(select(UsersSelectors.getConsentsValue))\n    );\n  }\n\n  /**\n   * Returns the consents loading flag\n   */\n  getConsentsResultLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsLoading));\n  }\n\n  /**\n   * Returns the consents success flag\n   */\n  getConsentsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsSuccess));\n  }\n\n  /**\n   * Returns the consents error flag\n   */\n  getConsentsResultError(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getConsentsError));\n  }\n\n  /**\n   * Resets the processing state for consent retrieval\n   */\n  resetConsentsProcessState(): void {\n    this.store.dispatch(new UserActions.ResetLoadUserConsents());\n  }\n\n  /**\n   * Returns the registered consent for the given template ID.\n   *\n   * As a side-effect, the method will call `getConsents(true)` to load the templates if those are not present.\n   *\n   * @param templateId a template ID by which to filter the registered templates.\n   */\n  getConsent(templateId: string): Observable<Consent> {\n    return this.authService.isUserLoggedIn().pipe(\n      filter(Boolean),\n      tap(() => this.getConsents(true)),\n      switchMap(() =>\n        this.store.pipe(\n          select(UsersSelectors.getConsentByTemplateId(templateId))\n        )\n      ),\n      filter((template) => Boolean(template)),\n      map((template) => template.currentConsent)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is truthy and if `consentWithdrawnDate` doesn't exist.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentGiven(consent: Consent): boolean {\n    return (\n      Boolean(consent) &&\n      Boolean(consent.consentGivenDate) &&\n      !Boolean(consent.consentWithdrawnDate)\n    );\n  }\n\n  /**\n   * Returns `true` if the consent is either falsy or if `consentWithdrawnDate` is present.\n   * Otherwise, `false` is returned.\n   *\n   * @param consent to check\n   */\n  isConsentWithdrawn(consent: Consent): boolean {\n    if (Boolean(consent)) {\n      return Boolean(consent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  /**\n   * Give consent for specified consent template ID and version.\n   * @param consentTemplateId a template ID for which to give a consent\n   * @param consentTemplateVersion a template version for which to give a consent\n   */\n  giveConsent(consentTemplateId: string, consentTemplateVersion: number): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.GiveUserConsent({\n          userId,\n          consentTemplateId,\n          consentTemplateVersion,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the give consent process loading flag\n   */\n  getGiveConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process success flag\n   */\n  getGiveConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the give consent process error flag\n   */\n  getGiveConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(GIVE_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resents the give consent process flags\n   */\n  resetGiveConsentProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetGiveUserConsentProcess());\n  }\n\n  /**\n   * Withdraw consent for the given `consentCode`\n   * @param consentCode for which to withdraw the consent\n   */\n  withdrawConsent(consentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.WithdrawUserConsent({\n          userId,\n          consentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the withdraw consent process loading flag\n   */\n  getWithdrawConsentResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process success flag\n   */\n  getWithdrawConsentResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the withdraw consent process error flag\n   */\n  getWithdrawConsentResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(WITHDRAW_CONSENT_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the process flags for withdraw consent\n   */\n  resetWithdrawConsentProcessState(): void {\n    return this.store.dispatch(\n      new UserActions.ResetWithdrawUserConsentProcess()\n    );\n  }\n\n  /**\n   * Filters the provided `templateList`' templates by hiding the template IDs specified in `hideTemplateIds`.\n   * If the `hideTemplateIds` is empty, the provided `templateList` is returned.\n   *\n   * @param templateList a list of consent templates to filter\n   * @param hideTemplateIds template IDs to hide\n   */\n  filterConsentTemplates(\n    templateList: ConsentTemplate[],\n    hideTemplateIds: string[] = []\n  ): ConsentTemplate[] {\n    if (hideTemplateIds.length === 0) {\n      return templateList;\n    }\n\n    const updatedTemplateList: ConsentTemplate[] = [];\n    for (const template of templateList) {\n      const show = !hideTemplateIds.includes(template.id);\n      if (show) {\n        updatedTemplateList.push(template);\n      }\n    }\n\n    return updatedTemplateList;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsentTemplate } from '../../model/consent.model';\nimport { AnonymousConsentTemplatesAdapter } from './anonymous-consent-templates.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AnonymousConsentTemplatesConnector {\n  constructor(protected adapter: AnonymousConsentTemplatesAdapter) {}\n\n  loadAnonymousConsentTemplates(): Observable<ConsentTemplate[]> {\n    return this.adapter.loadAnonymousConsentTemplates();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthActions, AuthService } from '../../../auth/index';\nimport { UserConsentService } from '../../../user/facade/user-consent.service';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AnonymousConsentsConfig } from '../../config/anonymous-consents-config';\nimport { AnonymousConsentTemplatesConnector } from '../../connectors/anonymous-consent-templates.connector';\nimport { AnonymousConsentsService } from '../../facade/index';\nimport { AnonymousConsentsActions } from '../actions/index';\n\n@Injectable()\nexport class AnonymousConsentsEffects {\n  @Effect()\n  loadAnonymousConsentTemplates$: Observable<\n    AnonymousConsentsActions.AnonymousConsentsActions\n  > = this.actions$.pipe(\n    ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES),\n    concatMap(() =>\n      this.anonymousConsentTemplatesConnector\n        .loadAnonymousConsentTemplates()\n        .pipe(\n          withLatestFrom(this.anonymousConsentService.getTemplates()),\n          mergeMap(([newConsentTemplates, currentConsentTemplates]) => {\n            let updated = false;\n            if (\n              Boolean(currentConsentTemplates) &&\n              currentConsentTemplates.length !== 0\n            ) {\n              updated = this.anonymousConsentService.detectUpdatedTemplates(\n                currentConsentTemplates,\n                newConsentTemplates\n              );\n            }\n\n            return [\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(\n                newConsentTemplates\n              ),\n              new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(\n                updated\n              ),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  transferAnonymousConsentsToUser$: Observable<\n    UserActions.TransferAnonymousConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<UserActions.RegisterUserSuccess>(\n          UserActions.REGISTER_USER_SUCCESS\n        )\n      )\n    ),\n    filter(([, registerAction]) => Boolean(registerAction)),\n    switchMap(() =>\n      this.anonymousConsentService.getConsents().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.anonymousConsentService.getTemplates(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        concatMap(([consents, userId, templates, _loggedIn]) => {\n          const actions: UserActions.TransferAnonymousConsent[] = [];\n          for (const consent of consents) {\n            if (\n              this.anonymousConsentService.isConsentGiven(consent) &&\n              (!this.anonymousConsentsConfig.anonymousConsents\n                .requiredConsents ||\n                !this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                  consent.templateCode\n                ))\n            ) {\n              for (const template of templates) {\n                if (template.id === consent.templateCode) {\n                  actions.push(\n                    new UserActions.TransferAnonymousConsent({\n                      userId,\n                      consentTemplateId: template.id,\n                      consentTemplateVersion: template.version,\n                    })\n                  );\n                  break;\n                }\n              }\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  @Effect()\n  giveRequiredConsentsToUser$: Observable<\n    UserActions.GiveUserConsent | Observable<never>\n  > = this.actions$.pipe(\n    ofType<AuthActions.LoadUserTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    filter(\n      (action) =>\n        Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n        Boolean(\n          this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n        ) &&\n        Boolean(action)\n    ),\n    concatMap(() =>\n      this.userConsentService.getConsentsResultSuccess().pipe(\n        withLatestFrom(\n          this.authService.getOccUserId(),\n          this.userConsentService.getConsents(),\n          this.authService.isUserLoggedIn()\n        ),\n        filter(([, , , loggedIn]) => loggedIn),\n        tap(([loaded, _userId, _templates, _loggedIn]) => {\n          if (!loaded) {\n            this.userConsentService.loadConsents();\n          }\n        }),\n        map(([_loaded, userId, templates, _loggedIn]) => {\n          return { userId, templates };\n        }),\n        concatMap(({ userId, templates }) => {\n          const actions: UserActions.GiveUserConsent[] = [];\n          for (const template of templates) {\n            if (\n              this.userConsentService.isConsentWithdrawn(\n                template.currentConsent\n              ) &&\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n                template.id\n              )\n            ) {\n              actions.push(\n                new UserActions.GiveUserConsent({\n                  userId,\n                  consentTemplateId: template.id,\n                  consentTemplateVersion: template.version,\n                })\n              );\n            }\n          }\n          if (actions.length > 0) {\n            return actions;\n          }\n          return EMPTY;\n        })\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private anonymousConsentTemplatesConnector: AnonymousConsentTemplatesConnector,\n    private authService: AuthService,\n    private anonymousConsentsConfig: AnonymousConsentsConfig,\n    private anonymousConsentService: AnonymousConsentsService,\n    private userConsentService: UserConsentService\n  ) {}\n}\n","import { AnonymousConsentsEffects } from './anonymous-consents.effect';\n\nexport const effects: any[] = [AnonymousConsentsEffects];\n\nexport * from './anonymous-consents.effect';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Country, CountryType, Region } from '../../model/address.model';\nimport { BaseSite, Currency, Language } from '../../model/misc.model';\nimport { SiteAdapter } from './site.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteConnector {\n  constructor(protected adapter: SiteAdapter) {}\n\n  getLanguages(): Observable<Language[]> {\n    return this.adapter.loadLanguages();\n  }\n\n  getCurrencies(): Observable<Currency[]> {\n    return this.adapter.loadCurrencies();\n  }\n\n  getCountries(type?: CountryType): Observable<Country[]> {\n    return this.adapter.loadCountries(type);\n  }\n\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.adapter.loadRegions(countryIsoCode);\n  }\n\n  getBaseSite(): Observable<BaseSite> {\n    return this.adapter.loadBaseSite();\n  }\n}\n","import { Provider, Type } from '@angular/core';\nimport { LanguageService } from '../facade/language.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from './context-ids';\n\nexport abstract class ContextServiceMap {\n  [context: string]: Type<SiteContext<any>>;\n}\n\nexport function serviceMapFactory() {\n  return {\n    [LANGUAGE_CONTEXT_ID]: LanguageService,\n    [CURRENCY_CONTEXT_ID]: CurrencyService,\n    [BASE_SITE_CONTEXT_ID]: BaseSiteService,\n  };\n}\n\nexport const contextServiceMapProvider: Provider = {\n  provide: ContextServiceMap,\n  useFactory: serviceMapFactory,\n};\n","import { SiteContextConfig } from './site-context-config';\nimport { getContextParameterDefault } from './context-config-utils';\nimport { BASE_SITE_CONTEXT_ID } from '../providers/context-ids';\n\nexport function baseSiteConfigValidator(config: SiteContextConfig) {\n  if (getContextParameterDefault(config, BASE_SITE_CONTEXT_ID) === undefined) {\n    return 'Please configure context.parameters.baseSite before using storefront library!';\n  }\n}\n","import { SiteContextConfig } from './site-context-config';\nimport {\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n} from '../providers/context-ids';\n\nexport function defaultSiteContextConfigFactory(): SiteContextConfig {\n  return {\n    context: {\n      [LANGUAGE_CONTEXT_ID]: [\n        'en',\n        'de',\n        'ja',\n        'zh',\n        'ru',\n        'fr',\n        'tr',\n        'it',\n        'es',\n        'uk',\n        'pl',\n        'nl',\n        'hi',\n        'ar',\n        'pt',\n        'bn',\n        'pa',\n      ],\n      [CURRENCY_CONTEXT_ID]: [\n        'USD',\n        'EUR',\n        'JPY',\n        'GBP',\n        'AUD',\n        'CAD',\n        'CHF',\n        'CNY',\n        'SEK',\n        'NZD',\n        'MXN',\n        'SGD',\n        'HKD',\n        'NOK',\n        'KRW',\n        'TRY',\n        'RUB',\n        'INR',\n        'BRL',\n        'ZAR',\n      ],\n    },\n  };\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport {\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\nimport { Config } from '../config.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, mapTo, take } from 'rxjs/operators';\nimport { deepMerge } from '../utils/deep-merge';\n\n/**\n * Provides support for CONFIG_INITIALIZERS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigInitializerService {\n  constructor(\n    @Inject(Config) protected config: any,\n    @Optional()\n    @Inject(CONFIG_INITIALIZER_FORROOT_GUARD)\n    protected initializerGuard\n  ) {}\n\n  protected ongoingScopes$ = new BehaviorSubject<string[]>(undefined);\n\n  /**\n   * Returns true if config is stable, i.e. all CONFIG_INITIALIZERS resolved correctly\n   */\n  get isStable(): boolean {\n    return (\n      !this.initializerGuard ||\n      (this.ongoingScopes$.value && this.ongoingScopes$.value.length === 0)\n    );\n  }\n\n  /**\n   * Recommended way to get config for code that can run before app will finish\n   * initialization (APP_INITIALIZERS, selected service constructors)\n   *\n   * Used without parameters waits for the whole config to become stable\n   *\n   * Parameters allow to describe which part of the config should be stable using\n   * string describing config part, e.g.:\n   * 'siteContext', 'siteContext.language', etc.\n   *\n   * @param scopes String describing parts of the config we want to be sure are stable\n   */\n  async getStableConfig(...scopes: string[]): Promise<any> {\n    if (this.isStable) {\n      return this.config;\n    }\n    return this.ongoingScopes$\n      .pipe(\n        filter(\n          (ongoingScopes) =>\n            ongoingScopes && this.areReady(scopes, ongoingScopes)\n        ),\n        take(1),\n        mapTo(this.config)\n      )\n      .toPromise();\n  }\n\n  /**\n   * Removes provided scopes from currently ongoingScopes\n   *\n   * @param scopes\n   */\n  protected finishScopes(scopes: string[]) {\n    const newScopes = [...this.ongoingScopes$.value];\n    for (const scope of scopes) {\n      newScopes.splice(newScopes.indexOf(scope), 1);\n    }\n    this.ongoingScopes$.next(newScopes);\n  }\n\n  /**\n   * Return true if provided scopes are not part of ongoingScopes\n   *\n   * @param scopes\n   * @param ongoingScopes\n   */\n  protected areReady(scopes: string[], ongoingScopes: string[]): boolean {\n    if (!scopes.length) {\n      return !ongoingScopes.length;\n    }\n    for (const scope of scopes) {\n      for (const ongoingScope of ongoingScopes) {\n        if (this.scopesOverlap(scope, ongoingScope)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if two scopes overlap.\n   *\n   * Example of scopes that overlap:\n   * 'test' and 'test', 'test.a' and 'test', 'test' and 'test.a'\n   *\n   * Example of scopes that do not overlap:\n   * 'test' and 'testA', 'test.a' and 'test.b', 'test.nested' and 'test.nest'\n   *\n   * @param a ScopeA\n   * @param b ScopeB\n   */\n  protected scopesOverlap(a: string, b: string): boolean {\n    if (b.length > a.length) {\n      [a, b] = [b, a];\n    }\n    return a.startsWith(b) && (a[b.length] || '.') === '.';\n  }\n\n  /**\n   * @internal\n   *\n   * Not a part of a public API, used by APP_INITIALIZER to initialize all provided CONFIG_INITIALIZERS\n   *\n   */\n  async initialize(initializers?: ConfigInitializer[]) {\n    if (this.ongoingScopes$.value) {\n      // guard for double initialization\n      return;\n    }\n\n    const ongoingScopes: string[] = [];\n\n    const asyncConfigs: Promise<void>[] = [];\n\n    for (const initializer of initializers || []) {\n      if (!initializer) {\n        continue;\n      }\n      if (!initializer.scopes || !initializer.scopes.length) {\n        throw new Error('CONFIG_INITIALIZER should provide scope!');\n      }\n\n      if (isDevMode() && !this.areReady(initializer.scopes, ongoingScopes)) {\n        console.warn(\n          'More than one CONFIG_INITIALIZER is initializing the same config scope.'\n        );\n      }\n\n      ongoingScopes.push(...initializer.scopes);\n\n      asyncConfigs.push(\n        (async () => {\n          deepMerge(this.config, await initializer.configFactory());\n          this.finishScopes(initializer.scopes);\n        })()\n      );\n    }\n    this.ongoingScopes$.next(ongoingScopes);\n\n    if (asyncConfigs.length) {\n      await Promise.all(asyncConfigs);\n    }\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\nimport {\n  getContextParameterDefault,\n  getContextParameterValues,\n} from '../config/context-config-utils';\nimport { SiteContextConfig } from '../config/site-context-config';\nimport { SiteContext } from '../facade/site-context.interface';\nimport { ContextServiceMap } from '../providers/context-service-map';\n\n@Injectable()\nexport class SiteContextParamsService {\n  constructor(\n    private config: SiteContextConfig,\n    private injector: Injector,\n    private serviceMap: ContextServiceMap\n  ) {}\n\n  getContextParameters(): string[] {\n    if (this.config.context) {\n      return Object.keys(this.config.context).filter(\n        (param) => param !== 'urlParameters'\n      );\n    }\n    return [];\n  }\n\n  getUrlEncodingParameters(): string[] {\n    return (this.config.context && this.config.context.urlParameters) || [];\n  }\n\n  getParamValues(param: string): string[] {\n    return getContextParameterValues(this.config, param);\n  }\n\n  getParamDefaultValue(param: string): string {\n    return getContextParameterDefault(this.config, param);\n  }\n\n  getSiteContextService(param: string): SiteContext<any> {\n    if (this.serviceMap[param]) {\n      return this.injector.get<SiteContext<any>>(this.serviceMap[param], null);\n    }\n  }\n\n  getValue(param: string): string {\n    let value: string;\n\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service\n        .getActive()\n        .subscribe((val) => (value = val))\n        .unsubscribe();\n    }\n\n    return value !== undefined ? value : this.getParamDefaultValue(param);\n  }\n\n  setValue(param: string, value: string) {\n    const service = this.getSiteContextService(param);\n    if (service) {\n      service.setActive(value);\n    }\n  }\n\n  /**\n   * Get active values for all provided context parameters\n   *\n   * @param params Context parameters\n   *\n   * @returns Observable emitting array of all passed active context values\n   */\n  getValues(params: string[]): Observable<Array<string>> {\n    if (params.length === 0) {\n      return of([]);\n    }\n\n    return combineLatest(\n      params.map((param) =>\n        this.getSiteContextService(param)\n          .getActive()\n          .pipe(distinctUntilChanged())\n      )\n    ).pipe(filter((value) => value.every((param) => !!param)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, UrlTree } from '@angular/router';\nimport { SiteContextParamsService } from './site-context-params.service';\n\nexport interface ParamValuesMap {\n  [name: string]: string;\n}\n\nexport interface UrlTreeWithSiteContext extends UrlTree {\n  siteContext?: ParamValuesMap;\n}\n\nconst UrlSplit = /(^[^#?]*)(.*)/; // used to split url into path and query/fragment parts\n\n@Injectable()\nexport class SiteContextUrlSerializer extends DefaultUrlSerializer {\n  private get urlEncodingParameters(): string[] {\n    return this.siteContextParams.getUrlEncodingParameters();\n  }\n\n  get hasContextInRoutes() {\n    return this.urlEncodingParameters.length > 0;\n  }\n\n  constructor(private siteContextParams: SiteContextParamsService) {\n    super();\n  }\n\n  parse(url: string): UrlTreeWithSiteContext {\n    if (this.hasContextInRoutes) {\n      const urlWithParams = this.urlExtractContextParameters(url);\n      const parsed = super.parse(urlWithParams.url) as UrlTreeWithSiteContext;\n      this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);\n      return parsed;\n    } else {\n      return super.parse(url);\n    }\n  }\n\n  urlExtractContextParameters(\n    url: string\n  ): { url: string; params: ParamValuesMap } {\n    const [, urlPart, queryPart] = url.match(UrlSplit);\n\n    const segments = urlPart.split('/');\n    if (segments[0] === '') {\n      segments.shift();\n    }\n    const params = {};\n\n    let paramId = 0;\n    let segmentId = 0;\n    while (\n      paramId < this.urlEncodingParameters.length &&\n      segmentId < segments.length\n    ) {\n      const paramName = this.urlEncodingParameters[paramId];\n      const paramValues = this.siteContextParams.getParamValues(paramName);\n\n      if (paramValues.includes(segments[segmentId])) {\n        params[paramName] = segments[segmentId];\n        segmentId++;\n      }\n      paramId++;\n    }\n\n    url = segments.slice(Object.keys(params).length).join('/') + queryPart;\n    return { url, params };\n  }\n\n  private urlTreeIncludeContextParameters(\n    urlTree: UrlTreeWithSiteContext,\n    params: ParamValuesMap\n  ) {\n    urlTree.siteContext = params;\n  }\n\n  serialize(tree: UrlTreeWithSiteContext): string {\n    const params = this.urlTreeExtractContextParameters(tree);\n    const url = super.serialize(tree);\n    const serialized = this.urlIncludeContextParameters(url, params);\n    return serialized;\n  }\n\n  urlTreeExtractContextParameters(\n    urlTree: UrlTreeWithSiteContext\n  ): ParamValuesMap {\n    return urlTree.siteContext ? urlTree.siteContext : {};\n  }\n\n  private urlIncludeContextParameters(url: string, params: ParamValuesMap) {\n    const contextRoutePart = this.urlEncodingParameters\n      .map((param) => {\n        return params[param]\n          ? params[param]\n          : this.siteContextParams.getValue(param);\n      })\n      .join('/');\n\n    return contextRoutePart + url;\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationEnd,\n  NavigationError,\n  NavigationStart,\n  Router,\n  RouterEvent,\n} from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { SiteContextParamsService } from './site-context-params.service';\nimport { SiteContextUrlSerializer } from './site-context-url-serializer';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteContextRoutesHandler implements OnDestroy {\n  constructor(\n    private siteContextParams: SiteContextParamsService,\n    private serializer: SiteContextUrlSerializer,\n    private injector: Injector\n  ) {}\n\n  private subscription = new Subscription();\n\n  private contextValues: {\n    [param: string]: string;\n  } = {};\n\n  private router: Router;\n  private location: Location;\n\n  /**\n   * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:\n   * - `subscribeChanges` method triggers a navigation on update of site context state\n   * - `subscribeRouting` method updates the site context state on navigation\n   */\n  private isNavigating = false;\n\n  /**\n   * Initializes the two-way synchronization between the site context state and the URL.\n   *\n   * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.\n   */\n  init(): Promise<void> {\n    return new Promise((resolve) => {\n      this.router = this.injector.get<Router>(Router);\n\n      this.location = this.injector.get<Location>(Location);\n      const routingParams = this.siteContextParams.getUrlEncodingParameters();\n\n      if (routingParams.length) {\n        this.subscribeChanges(routingParams);\n        this.subscribeRouting(resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * After each change of the site context state, it modifies the current URL in place.\n   * But it happens only for the parameters configured to be persisted in the URL.\n   */\n  private subscribeChanges(params: string[]) {\n    params.forEach((param) => {\n      const service = this.siteContextParams.getSiteContextService(param);\n      if (service) {\n        this.subscription.add(\n          service.getActive().subscribe((value) => {\n            if (\n              !this.isNavigating &&\n              this.contextValues[param] &&\n              this.contextValues[param] !== value\n            ) {\n              const parsed = this.router.parseUrl(this.router.url);\n              const serialized = this.router.serializeUrl(parsed);\n              this.location.replaceState(serialized);\n            }\n            this.contextValues[param] = value;\n          })\n        );\n      }\n    });\n  }\n\n  /**\n   * After each Angular NavigationStart event it updates the site context state based on\n   * site context params encoded in the anticipated URL.\n   *\n   * In particular, it's responsible for initializing the state of the context params\n   * on page start, reading the values from the URL.\n   *\n   * @param onContextInitialized notify that the initialization of the context was done based on the URL\n   */\n  private subscribeRouting(onContextInitialized: Function) {\n    let contextInitialized = false;\n\n    this.subscription.add(\n      this.router.events\n        .pipe(\n          filter(\n            (event) =>\n              event instanceof NavigationStart ||\n              event instanceof NavigationEnd ||\n              event instanceof NavigationError ||\n              event instanceof NavigationCancel\n          )\n        )\n        .subscribe((event: RouterEvent) => {\n          this.isNavigating = event instanceof NavigationStart;\n          if (this.isNavigating) {\n            this.setContextParamsFromRoute(event.url);\n\n            if (!contextInitialized) {\n              contextInitialized = true;\n              onContextInitialized();\n            }\n          }\n        })\n    );\n  }\n\n  /**\n   * Updates the site context state based on the context params encoded in the given URL\n   *\n   * @param url URL with encoded context params\n   */\n  private setContextParamsFromRoute(url: string) {\n    const { params } = this.serializer.urlExtractContextParameters(url);\n    Object.keys(params).forEach((param) =>\n      this.siteContextParams.setValue(param, params[param])\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { BaseSiteService } from '../facade/base-site.service';\nimport { CurrencyService } from '../facade/currency.service';\nimport { LanguageService } from '../facade/language.service';\nimport { SiteContextRoutesHandler } from '../services/site-context-routes-handler';\n\nexport function initializeContext(\n  baseSiteService: BaseSiteService,\n  langService: LanguageService,\n  currService: CurrencyService,\n  configInit: ConfigInitializerService,\n  siteContextRoutesHandler: SiteContextRoutesHandler\n) {\n  return () => {\n    configInit.getStableConfig('context').then(() => {\n      siteContextRoutesHandler.init().then(() => {\n        baseSiteService.initialize();\n        langService.initialize();\n        currService.initialize();\n      });\n    });\n  };\n}\n\nexport const contextServiceProviders: Provider[] = [\n  BaseSiteService,\n  LanguageService,\n  CurrencyService,\n  {\n    provide: APP_INITIALIZER,\n    useFactory: initializeContext,\n    deps: [\n      BaseSiteService,\n      LanguageService,\n      CurrencyService,\n      ConfigInitializerService,\n      SiteContextRoutesHandler,\n    ],\n    multi: true,\n  },\n];\n","import { Provider } from '@angular/core';\nimport { UrlSerializer } from '@angular/router';\nimport { SiteContextParamsService } from '../services/site-context-params.service';\nimport { SiteContextUrlSerializer } from '../services/site-context-url-serializer';\n\n// functions below should not be exposed in public API:\n\nexport const siteContextParamsProviders: Provider[] = [\n  SiteContextParamsService,\n  SiteContextUrlSerializer,\n  { provide: UrlSerializer, useExisting: SiteContextUrlSerializer },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveLanguage } from '../selectors/languages.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class LanguagesEffects {\n  @Effect()\n  loadLanguages$: Observable<\n    | SiteContextActions.LoadLanguagesSuccess\n    | SiteContextActions.LoadLanguagesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_LANGUAGES),\n    exhaustMap(() => {\n      return this.siteConnector.getLanguages().pipe(\n        map(\n          (languages) => new SiteContextActions.LoadLanguagesSuccess(languages)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadLanguagesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_LANGUAGE),\n    tap((action: SiteContextActions.SetActiveLanguage) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('language', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateLanguage$: Observable<\n    SiteContextActions.LanguageChange\n  > = this.state.select(getActiveLanguage).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.LanguageChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NEVER, Observable, of } from 'rxjs';\nimport {\n  bufferCount,\n  catchError,\n  exhaustMap,\n  filter,\n  map,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { WindowRef } from '../../../window/window-ref';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\nimport { getActiveCurrency } from '../selectors/currencies.selectors';\nimport { StateWithSiteContext } from '../state';\n\n@Injectable()\nexport class CurrenciesEffects {\n  @Effect()\n  loadCurrencies$: Observable<\n    | SiteContextActions.LoadCurrenciesSuccess\n    | SiteContextActions.LoadCurrenciesFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_CURRENCIES),\n    exhaustMap(() => {\n      return this.siteConnector.getCurrencies().pipe(\n        map(\n          (currencies) =>\n            new SiteContextActions.LoadCurrenciesSuccess(currencies)\n        ),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadCurrenciesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  persist$: Observable<void> = this.actions$.pipe(\n    ofType(SiteContextActions.SET_ACTIVE_CURRENCY),\n    tap((action: SiteContextActions.SetActiveCurrency) => {\n      if (this.winRef.sessionStorage) {\n        this.winRef.sessionStorage.setItem('currency', action.payload);\n      }\n    }),\n    switchMapTo(NEVER)\n  );\n\n  @Effect()\n  activateCurrency$: Observable<\n    SiteContextActions.CurrencyChange\n  > = this.state.select(getActiveCurrency).pipe(\n    bufferCount(2, 1),\n\n    // avoid dispatching `change` action when we're just setting the initial value:\n    filter(([previous]) => !!previous),\n    map(\n      ([previous, current]) =>\n        new SiteContextActions.CurrencyChange({ previous, current })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector,\n    private winRef: WindowRef,\n    private state: Store<StateWithSiteContext>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { SiteConnector } from '../../connectors/site.connector';\nimport { SiteContextActions } from '../actions/index';\n\n@Injectable()\nexport class BaseSiteEffects {\n  @Effect()\n  loadBaseSite$: Observable<\n    SiteContextActions.LoadBaseSiteSuccess | SiteContextActions.LoadBaseSiteFail\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LOAD_BASE_SITE),\n    exhaustMap(() => {\n      return this.siteConnector.getBaseSite().pipe(\n        map((baseSite) => new SiteContextActions.LoadBaseSiteSuccess(baseSite)),\n        catchError((error) =>\n          of(\n            new SiteContextActions.LoadBaseSiteFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { LanguagesEffects } from './languages.effect';\nimport { CurrenciesEffects } from './currencies.effect';\nimport { BaseSiteEffects } from './base-site.effect';\n\nexport const effects: any[] = [\n  LanguagesEffects,\n  CurrenciesEffects,\n  BaseSiteEffects,\n];\n\nexport * from './languages.effect';\nexport * from './currencies.effect';\nexport * from './base-site.effect';\n","import { SiteContextActions } from '../actions/index';\nimport { BaseSiteState } from '../state';\n\nexport const initialState: BaseSiteState = {\n  details: {},\n  activeSite: '',\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.BaseSiteAction\n): BaseSiteState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_BASE_SITE: {\n      return {\n        ...state,\n        activeSite: action.payload,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Currency } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { CurrenciesState } from '../state';\n\nexport const initialState: CurrenciesState = {\n  entities: null,\n  activeCurrency: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.CurrenciesAction\n): CurrenciesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_CURRENCIES_SUCCESS: {\n      const currencies: Currency[] = action.payload;\n      const entities = currencies.reduce(\n        (currEntities: { [isocode: string]: Currency }, currency: Currency) => {\n          return {\n            ...currEntities,\n            [currency.isocode]: currency,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_CURRENCY: {\n      const isocode: string = action.payload;\n\n      return {\n        ...state,\n        activeCurrency: isocode,\n      };\n    }\n  }\n\n  return state;\n}\n","import { Language } from '../../../model/misc.model';\nimport { SiteContextActions } from '../actions/index';\nimport { LanguagesState } from '../state';\n\nexport const initialState: LanguagesState = {\n  entities: null,\n  activeLanguage: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: SiteContextActions.LanguagesAction\n): LanguagesState {\n  switch (action.type) {\n    case SiteContextActions.LOAD_LANGUAGES_SUCCESS: {\n      const languages: Language[] = action.payload;\n      const entities = languages.reduce(\n        (langEntities: { [isocode: string]: Language }, language: Language) => {\n          return {\n            ...langEntities,\n            [language.isocode]: language,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case SiteContextActions.SET_ACTIVE_LANGUAGE: {\n      const isocode = action.payload;\n\n      return {\n        ...state,\n        activeLanguage: isocode,\n      };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { SiteContextState } from '../state';\nimport * as fromBaseSite from './base-site.reducer';\nimport * as fromCurrencies from './currencies.reducer';\nimport * as fromLanguages from './languages.reducer';\n\nexport function getReducers(): ActionReducerMap<SiteContextState> {\n  return {\n    languages: fromLanguages.reducer,\n    currencies: fromCurrencies.reducer,\n    baseSite: fromBaseSite.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  SiteContextState\n>> = new InjectionToken<ActionReducerMap<SiteContextState>>(\n  'SiteContextReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { reducerProvider, reducerToken } from './reducers/index';\nimport { SITE_CONTEXT_FEATURE } from './state';\n\nexport function siteContextStoreConfigFactory(): StateConfig {\n  // if we want to reuse SITE_CONTEXT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [SITE_CONTEXT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(SITE_CONTEXT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(siteContextStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class SiteContextStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { provideConfigValidator } from '../config/config-validator/config-validator';\nimport { StateModule } from '../state/index';\nimport { baseSiteConfigValidator } from './config/base-site-config-validator';\nimport { defaultSiteContextConfigFactory } from './config/default-site-context-config';\nimport { contextServiceMapProvider } from './providers/context-service-map';\nimport { contextServiceProviders } from './providers/context-service-providers';\nimport { siteContextParamsProviders } from './providers/site-context-params-providers';\nimport { SiteContextStoreModule } from './store/site-context-store.module';\n\n// @dynamic\n@NgModule({\n  imports: [StateModule, SiteContextStoreModule],\n})\nexport class SiteContextModule {\n  static forRoot(): ModuleWithProviders<SiteContextModule> {\n    return {\n      ngModule: SiteContextModule,\n      providers: [\n        provideDefaultConfigFactory(defaultSiteContextConfigFactory),\n        contextServiceMapProvider,\n        ...contextServiceProviders,\n        ...siteContextParamsProviders,\n        provideConfigValidator(baseSiteConfigValidator),\n      ],\n    };\n  }\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentsBannerDissmissed\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENTS_BANNER_DISMISSED: {\n      return action.dismissed;\n    }\n  }\n\n  return state;\n}\n","import { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated\n): boolean {\n  switch (action.type) {\n    case AnonymousConsentsActions.TOGGLE_ANONYMOUS_CONSENT_TEMPLATES_UPDATED: {\n      return action.updated;\n    }\n  }\n\n  return state;\n}\n","import {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n} from '../../../model/consent.model';\nimport { AnonymousConsentsActions } from '../actions/index';\n\nexport const initialState: AnonymousConsent[] = [];\n\nexport function toggleConsentStatus(\n  consents: AnonymousConsent[],\n  templateCode: string,\n  status: ANONYMOUS_CONSENT_STATUS\n): AnonymousConsent[] {\n  if (!consents) {\n    return [];\n  }\n\n  return consents.map((consent) => {\n    if (consent.templateCode === templateCode) {\n      consent = {\n        ...consent,\n        consentState: status,\n      };\n    }\n    return consent;\n  });\n}\n\nexport function reducer(\n  state = initialState,\n  action: AnonymousConsentsActions.AnonymousConsentsActions\n): AnonymousConsent[] {\n  switch (action.type) {\n    case AnonymousConsentsActions.GIVE_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n\n    case AnonymousConsentsActions.WITHDRAW_ANONYMOUS_CONSENT: {\n      return toggleConsentStatus(\n        state,\n        action.templateCode,\n        ANONYMOUS_CONSENT_STATUS.WITHDRAWN\n      );\n    }\n\n    case AnonymousConsentsActions.SET_ANONYMOUS_CONSENTS: {\n      return action.payload;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/index';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { SiteContextActions } from '../../../site-context/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  AnonymousConsentsState,\n  ANONYMOUS_CONSENTS,\n} from '../anonymous-consents-state';\nimport * as fromAnonymousConsentsBanner from './anonymous-consents-banner.reducer';\nimport * as fromAnonymousConsentsUpdate from './anonymous-consents-update.reducer';\nimport * as fromAnonymousConsents from './anonymous-consents.reducer';\n\nexport function getReducers(): ActionReducerMap<AnonymousConsentsState> {\n  return {\n    templates: loaderReducer<ConsentTemplate[]>(ANONYMOUS_CONSENTS),\n    consents: fromAnonymousConsents.reducer,\n    ui: combineReducers({\n      bannerDismissed: fromAnonymousConsentsBanner.reducer,\n      updated: fromAnonymousConsentsUpdate.reducer,\n    }),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AnonymousConsentsState\n>> = new InjectionToken<ActionReducerMap<AnonymousConsentsState>>(\n  'AnonymousConsentsReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearAnonymousConsentTemplates(\n  reducer: ActionReducer<AnonymousConsentsState, Action>\n): ActionReducer<AnonymousConsentsState, Action> {\n  return function (state, action) {\n    if (\n      action.type === AuthActions.LOGOUT ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = {\n        ...state,\n        templates: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearAnonymousConsentTemplates,\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/index';\nimport { StateModule } from '../../state/state.module';\nimport { ANONYMOUS_CONSENTS_STORE_FEATURE } from './anonymous-consents-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function anonymousConsentsStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          [ANONYMOUS_CONSENTS_STORE_FEATURE]: StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ANONYMOUS_CONSENTS_STORE_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(anonymousConsentsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AnonymousConsentsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAnonymousConsentsConfig } from './config/default-anonymous-consents-config';\nimport { AnonymousConsentsService } from './facade/anonymous-consents.service';\nimport { interceptors } from './http-interceptors/index';\nimport { AnonymousConsentsStoreModule } from './store/anonymous-consents-store.module';\n\n@NgModule({\n  imports: [AnonymousConsentsStoreModule],\n})\nexport class AnonymousConsentsModule {\n  static forRoot(): ModuleWithProviders<AnonymousConsentsModule> {\n    return {\n      ngModule: AnonymousConsentsModule,\n      providers: [\n        ...interceptors,\n        AnonymousConsentsService,\n        provideDefaultConfig(defaultAnonymousConsentsConfig),\n      ],\n    };\n  }\n}\n","import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\nimport { UserToken } from '../../auth';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nexport const CSAGENT_TOKEN_DATA = '[Auth] Customer Support Agent Token Data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n  csagentToken: LoaderState<UserToken>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateUtils } from '../../../state/utils/index';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { CSAGENT_TOKEN_DATA } from '../asm-state';\nimport { Action } from '@ngrx/store';\nimport { LOGOUT_CUSTOMER_SUPPORT_AGENT } from '../../../auth/store/actions/login-logout.action';\n\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN =\n  '[Auth] Load Customer Service Agent Token';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL =\n  '[Auth] Load Customer Service Agent Token Fail';\nexport const LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS =\n  '[Auth] Load Customer Service Agent Token Success';\n\nexport class LoadCustomerSupportAgentToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN;\n\n  constructor(public payload: { userId: string; password: string }) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LoadCustomerSupportAgentTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN_SUCCESS;\n  constructor(public payload: UserToken) {\n    super(CSAGENT_TOKEN_DATA);\n  }\n}\n\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n\n// action types\nexport type CustomerSupportAgentTokenAction =\n  | LoadCustomerSupportAgentToken\n  | LoadCustomerSupportAgentTokenFail\n  | LoadCustomerSupportAgentTokenSuccess\n  | LogoutCustomerSupportAgent;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { UserAuthenticationTokenService } from '../../../auth/services/user-authentication/user-authentication-token.service';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerSupportAgentTokenEffects {\n  @Effect()\n  loadCustomerSupportAgentToken$: Observable<\n    AsmActions.CustomerSupportAgentTokenAction\n  > = this.actions$.pipe(\n    ofType(AsmActions.LOAD_CUSTOMER_SUPPORT_AGENT_TOKEN),\n    map((action: AsmActions.LoadCustomerSupportAgentToken) => action.payload),\n    switchMap(({ userId, password }) =>\n      this.userTokenService.loadToken(userId, password).pipe(\n        map((token: UserToken) => {\n          const date = new Date();\n          date.setSeconds(date.getSeconds() + token.expires_in);\n          token.expiration_time = date.toJSON();\n          return new AsmActions.LoadCustomerSupportAgentTokenSuccess(token);\n        }),\n        catchError((error) =>\n          of(\n            new AsmActions.LoadCustomerSupportAgentTokenFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: UserAuthenticationTokenService\n  ) {}\n}\n","import { CustomerEffects } from './customer.effect';\nimport { CustomerSupportAgentTokenEffects } from './csagent-token.effect';\n\nexport const effects: any[] = [\n  CustomerEffects,\n  CustomerSupportAgentTokenEffects,\n];\n\nexport * from './customer.effect';\n","import { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(\n  state = initialState,\n  action: AsmActions.AsmUiAction\n): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport {\n  AsmState,\n  CSAGENT_TOKEN_DATA,\n  CUSTOMER_SEARCH_DATA,\n} from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\nimport { UserToken } from '../../../auth/models/token-types.model';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult: loaderReducer<CustomerSearchPage>(\n      CUSTOMER_SEARCH_DATA\n    ),\n    asmUi: fromAsmUiReducer.reducer,\n    csagentToken: loaderReducer<UserToken>(CSAGENT_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  AsmState\n>> = new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...state,\n        customerSearchResult: undefined,\n        csagentToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function asmStoreConfigFactory(): StateConfig {\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'asm.asmUi': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.access_token': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.token_type': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expires_in': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.expiration_time':\n            StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.scope': StorageSyncType.LOCAL_STORAGE,\n          'asm.csagentToken.value.userId': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(asmStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class AsmStoreModule {}\n","import { Translatable } from '../../i18n/translatable';\n\nexport enum GlobalMessageType {\n  MSG_TYPE_CONFIRMATION = '[GlobalMessage] Confirmation',\n  MSG_TYPE_ERROR = '[GlobalMessage] Error',\n  MSG_TYPE_INFO = '[GlobalMessage] Information',\n  MSG_TYPE_WARNING = '[GlobalMessage] Warning',\n}\n\nexport interface GlobalMessage {\n  text: Translatable;\n  type: GlobalMessageType;\n  timeout?: number;\n}\n","export enum HttpResponseStatus {\n  UNKNOWN = -1,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  CONFLICT = 409,\n  BAD_GATEWAY = 502,\n  GATEWAY_TIMEOUT = 504,\n  INTERNAL_SERVER_ERROR = 500,\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\nexport type GlobalMessageTypeConfig = {\n  timeout?: number;\n};\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class GlobalMessageConfig {\n  globalMessages: {\n    [GlobalMessageType.MSG_TYPE_CONFIRMATION]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_INFO]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_ERROR]?: GlobalMessageTypeConfig;\n    [GlobalMessageType.MSG_TYPE_WARNING]?: GlobalMessageTypeConfig;\n  };\n}\n","import { Action } from '@ngrx/store';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\n\nexport const ADD_MESSAGE = '[Global-message] Add a Message';\nexport const REMOVE_MESSAGE = '[Global-message] Remove a Message';\nexport const REMOVE_MESSAGES_BY_TYPE =\n  '[Global-message] Remove messages by type';\n\nexport class AddMessage implements Action {\n  readonly type = ADD_MESSAGE;\n  constructor(public payload: GlobalMessage) {}\n}\n\nexport class RemoveMessage implements Action {\n  readonly type = REMOVE_MESSAGE;\n  constructor(public payload: { type: GlobalMessageType; index: number }) {}\n}\n\nexport class RemoveMessagesByType implements Action {\n  readonly type = REMOVE_MESSAGES_BY_TYPE;\n  constructor(public payload: GlobalMessageType) {}\n}\n\nexport type GlobalMessageAction =\n  | AddMessage\n  | RemoveMessage\n  | RemoveMessagesByType;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  GlobalMessageState,\n  GLOBAL_MESSAGE_FEATURE,\n  StateWithGlobalMessage,\n} from '../global-message-state';\n\nexport const getGlobalMessageState: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageState\n> = createFeatureSelector<GlobalMessageState>(GLOBAL_MESSAGE_FEATURE);\n","import { Translatable } from '../../i18n/translatable';\n\nexport const GLOBAL_MESSAGE_FEATURE = 'global-message';\n\nexport interface StateWithGlobalMessage {\n  [GLOBAL_MESSAGE_FEATURE]: GlobalMessageState;\n}\n\nexport interface GlobalMessageState {\n  entities: GlobalMessageEntities;\n}\n\nexport interface GlobalMessageEntities {\n  [messageType: string]: Translatable[];\n}\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Translatable } from '../../../i18n/translatable';\nimport { GlobalMessageType } from '../../models/global-message.model';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageState,\n  StateWithGlobalMessage,\n} from '../global-message-state';\nimport { getGlobalMessageState } from './feature.selector';\n\nexport const getGlobalMessageEntities: MemoizedSelector<\n  StateWithGlobalMessage,\n  GlobalMessageEntities\n> = createSelector(\n  getGlobalMessageState,\n  (state: GlobalMessageState) => state.entities\n);\n\nexport const getGlobalMessageEntitiesByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, Translatable[]> => {\n  return createSelector(\n    getGlobalMessageEntities,\n    (entities) => entities && entities[type]\n  );\n};\n\nexport const getGlobalMessageCountByType = (\n  type: GlobalMessageType\n): MemoizedSelector<StateWithGlobalMessage, number> => {\n  return createSelector(\n    getGlobalMessageEntitiesByType(type),\n    (entities) => entities && entities.length\n  );\n};\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Translatable } from '../../i18n/translatable';\nimport { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageActions } from '../store/actions/index';\nimport {\n  GlobalMessageEntities,\n  StateWithGlobalMessage,\n} from '../store/global-message-state';\nimport { GlobalMessageSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class GlobalMessageService {\n  constructor(protected store: Store<StateWithGlobalMessage>) {}\n\n  /**\n   * Get all global messages\n   */\n  get(): Observable<GlobalMessageEntities> {\n    return this.store.pipe(\n      select(GlobalMessageSelectors.getGlobalMessageEntities),\n      filter((data) => data !== undefined)\n    );\n  }\n\n  /**\n   * Add one message into store\n   * @param text: string | Translatable\n   * @param type: GlobalMessageType object\n   * @param timeout: number\n   */\n  add(\n    text: string | Translatable,\n    type: GlobalMessageType,\n    timeout?: number\n  ): void {\n    this.store.dispatch(\n      new GlobalMessageActions.AddMessage({\n        text: typeof text === 'string' ? { raw: text } : text,\n        type,\n        timeout,\n      })\n    );\n  }\n\n  /**\n   * Remove message(s) from store\n   * @param type: GlobalMessageType\n   * @param index:optional. Without it, messages will be removed by type; otherwise,\n   * message will be removed from list by index.\n   */\n  remove(type: GlobalMessageType, index?: number): void {\n    this.store.dispatch(\n      index !== undefined\n        ? new GlobalMessageActions.RemoveMessage({\n            type: type,\n            index: index,\n          })\n        : new GlobalMessageActions.RemoveMessagesByType(type)\n    );\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { GlobalMessageService } from '../../facade/global-message.service';\nimport { Injectable } from '@angular/core';\nimport { Applicable, Priority } from '../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class HttpErrorHandler implements Applicable {\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  /**\n   * The http response status number which is handled by this handler.\n   * Implementations can set the response status number, i.e. 404, so that\n   * the handler can be found by the error interceptor.\n   */\n  responseStatus?: number;\n\n  /**\n   * Handles the error response for the respose status that is register for the handler\n   * @param { HttpRequest<any> } request : http request\n   * @param { HttpErrorResponse } errorResponse : Http error response\n   */\n  abstract handleError(\n    request: HttpRequest<any>,\n    errorResponse: HttpErrorResponse\n  ): void;\n\n  /**\n   * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status\n   * a priority can be added to distinguish multiple handles for the same response status.\n   */\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return errorResponse.status === this.responseStatus;\n  }\n\n  abstract getPriority?(): Priority;\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadGatewayHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_GATEWAY;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.badGateway' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { ErrorModel } from '../../model';\nimport { Cart } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\n\n/**\n * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.\n */\nexport function getCartIdByUserId(cart: Cart, userId: string): string {\n  if (userId === OCC_USER_ID_ANONYMOUS) {\n    return cart.guid;\n  }\n  return cart.code;\n}\n\n/**\n * Check if cart is selective (save for later) based on id.\n */\nexport function isSelectiveCart(cartId = ''): boolean {\n  return cartId.startsWith('selectivecart');\n}\n\n/**\n * Check if the returned error is of type notFound.\n *\n * We additionally check if the cart is not a selective cart.\n * For selective cart this error can happen only when extension is disabled.\n * It should never happen, because in that case, selective cart should also be disabled in our configuration.\n * However if that happens we want to handle these errors silently.\n */\nexport function isCartNotFoundError(error: ErrorModel): boolean {\n  return (\n    error.reason === 'notFound' &&\n    error.subjectType === 'cart' &&\n    !isSelectiveCart(error.subject)\n  );\n}\n\n/**\n * Compute wishlist cart name for customer.\n */\nexport function getWishlistName(customerId: string): string {\n  return `wishlist${customerId}`;\n}\n\n/**\n * What is a temporary cart?\n * - frontend only cart entity!\n * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)\n *\n * Why we need temporary carts?\n * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)\n * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)\n * - cart identifiers are created in the backend, so those are only known after cart is created\n *\n * Temporary cart life cycle\n * - create cart method invoked\n * - new `temp-${uuid}` cart is created with `loading=true` state\n * - backend returns created cart\n * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)\n * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)\n * - in next tick temporary cart is removed\n */\nexport function isTempCartId(cartId: string): boolean {\n  return cartId.startsWith('temp-');\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { isCartNotFoundError } from '../../../../cart/utils/utils';\nimport { ErrorModel } from '../../../../model/misc.model';\nimport { Priority } from '../../../../util/applicable';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleBadPassword(request, response);\n    this.handleBadLoginResponse(request, response);\n    this.handleBadCartRequest(request, response);\n    this.handleValidationError(request, response);\n    this.handleVoucherOperationError(request, response);\n  }\n\n  protected handleBadPassword(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    if (\n      response.url?.includes(OAUTH_ENDPOINT) &&\n      response.error?.error === 'invalid_grant' &&\n      request.body?.get('grant_type') === 'password'\n    ) {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage:\n              response.error.error_description || response.message || '',\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n  }\n\n  protected handleBadLoginResponse(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((error) => error.type === 'PasswordMismatchError')\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.badRequestOldPasswordIncorrect' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleValidationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => e.type === 'ValidationError')\n      .forEach((error) => {\n        this.globalMessageService.add(\n          {\n            key: `httpHandlers.validationErrors.${error.reason}.${error.subject}`,\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleBadCartRequest(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter((e) => isCartNotFoundError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.cartNotFound' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handleVoucherOperationError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    this.getErrors(response)\n      .filter(\n        (e) =>\n          e.message === 'coupon.invalid.code.provided' &&\n          e.type === 'VoucherOperationError'\n      )\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'httpHandlers.invalidCodeProvided' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors || []).filter(\n      (error) => error.type !== 'JaloObjectNoLongerValidError'\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConflictHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.CONFLICT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.conflict' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ForbiddenHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.FORBIDDEN;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.forbidden' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayTimeoutHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.GATEWAY_TIMEOUT;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.gatewayTimeout' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InternalServerErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n\n  handleError() {\n    this.globalMessageService.add(\n      { key: 'httpHandlers.internalServerError' },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotFoundHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.NOT_FOUND;\n\n  // empty error handler to avoid we fallabck to the unknown error handler\n  handleError(): void {}\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { GlobalMessageService } from '../../../facade/global-message.service';\nimport { GlobalMessageType } from '../../../models/global-message.model';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from './../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Handles Oauth client errors when a 401 is returned. This is the case for failing\n * authenticaton requests to OCC.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnauthorizedErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNAUTHORIZED;\n\n  constructor(protected globalMessageService: GlobalMessageService) {\n    super(globalMessageService);\n  }\n\n  handleError(_request: HttpRequest<any>, response: HttpErrorResponse): void {\n    if (isDevMode()) {\n      console.warn(\n        `There's a problem with the \"Oauth client\" configuration. You must configure a matching Oauth client in the backend and Spartacus.`\n      );\n    }\n\n    if (response.error?.error === 'invalid_client') {\n      this.globalMessageService.add(\n        response.error?.error_description || {\n          key: 'httpHandlers.unauthorized.invalid_client',\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else {\n      this.globalMessageService.add(\n        { key: 'httpHandlers.unauthorized.common' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  getPriority() {\n    return Priority.LOW;\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { HttpResponseStatus } from '../../../models/response-status.model';\nimport { HttpErrorHandler } from '../http-error.handler';\nimport { Priority } from '../../../../util/applicable';\n\n/**\n * Unknown Error Handler works as an fallback, to handle errors that were\n * not handled by any other error handlers\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnknownErrorHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.UNKNOWN;\n\n  /**\n   * hasMatch always returns true, to mach all errors\n   */\n  hasMatch(_errorResponse): boolean {\n    return true;\n  }\n\n  handleError() {\n    if (isDevMode()) {\n      console.warn(`Unknown http response error: ${this.responseStatus}`);\n    }\n  }\n\n  /**\n   * Fallback priority assures that the handler is used as a last resort\n   */\n  getPriority() {\n    return Priority.FALLBACK;\n  }\n}\n","export const enum Priority {\n  /**\n   * Used as fallback, when there is no other matches\n   */\n  FALLBACK = -50,\n  /**\n   * Used mainly in libraries, easy overridable\n   */\n  LOW = -10,\n  /**\n   * Default priority\n   */\n  NORMAL = 0,\n  /**\n   * High priority for matches that should take precedence\n   */\n  HIGH = 10,\n}\n\n/**\n * Base interface for implementing applicables in a consistent way\n *\n * Applicables are mainly used to find best matching one from multi provided\n * classes, like handlers, resolvers, etc.\n */\nexport interface Applicable {\n  /**\n   * Returns true if applicable can be used to handle specified condition\n   */\n  hasMatch?(...params): boolean;\n\n  /**\n   * Returns priority or score for specified applicable.\n   *\n   * If multiple applicables can be applied to specified condition, the one\n   * with highest priority or score wins.\n   */\n  getPriority?(...params): Priority | number;\n}\n\n/**\n * Helper logic to resolve best matching Applicable\n *\n * Finding best match is a two step process:\n * 1. Find all matching applicables\n *    - all applicables for which hasMatch(...matchParams) will return true\n *    - all applicables without hasMatch method (implicit always match)\n * 2. Find the applicable with highest priority\n *    - applicable with highest getPriority(...priorityParams) will win\n *    - applicable without getPriority method is treated as Priotity.NORMAL or 0\n *    - applicables with the same priority are sorted by order of providers, the applicable that was provided later wins\n *\n * @param applicables - array or applicable-like instancese\n * @param matchParams - array of parameters passed for hasMatch calls\n * @param priorityParams - array of parameters passed for getPriority calls\n */\nexport function resolveApplicable<T extends Applicable>(\n  applicables: T[] = [],\n  matchParams: any[] = [],\n  priorityParams: any[] = []\n): T | undefined {\n  const matchedApplicables = applicables.filter(\n    (applicable) => !applicable.hasMatch || applicable.hasMatch(...matchParams)\n  );\n\n  if (matchedApplicables.length < 2) {\n    return matchedApplicables[0];\n  }\n\n  let lastPriority = -Infinity;\n  return matchedApplicables.reduce((acc, curr) => {\n    const currPriority = curr.getPriority\n      ? curr.getPriority(...priorityParams)\n      : Priority.NORMAL;\n    if (lastPriority > currPriority) {\n      return acc;\n    }\n    lastPriority = currPriority;\n    return curr;\n  }, undefined);\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from './handlers/http-error.handler';\nimport { resolveApplicable } from '../../util/applicable';\n\n@Injectable({ providedIn: 'root' })\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(HttpErrorHandler) protected handlers: HttpErrorHandler[]\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((response: any) => {\n        if (response instanceof HttpErrorResponse) {\n          this.handleErrorResponse(request, response);\n          return throwError(response);\n        }\n      })\n    );\n  }\n\n  protected handleErrorResponse(\n    request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ): void {\n    const handler = this.getResponseHandler(response);\n    if (handler) {\n      handler.handleError(request, response);\n    }\n  }\n\n  /**\n   * return the error handler that matches the `HttpResponseStatus` code.\n   * If no handler is available, the UNKNOWN handler is returned.\n   */\n  protected getResponseHandler(response: HttpErrorResponse): HttpErrorHandler {\n    return resolveApplicable(this.handlers, [response]);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport {\n  BadGatewayHandler,\n  BadRequestHandler,\n  ConflictHandler,\n  ForbiddenHandler,\n  GatewayTimeoutHandler,\n  HttpErrorHandler,\n  InternalServerErrorHandler,\n  NotFoundHandler,\n  UnauthorizedErrorHandler,\n  UnknownErrorHandler,\n} from './handlers/index';\nimport { HttpErrorInterceptor } from './http-error.interceptor';\n\nexport const errorHandlers: Provider[] = [\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnknownErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadGatewayHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: BadRequestHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ConflictHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: ForbiddenHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: GatewayTimeoutHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: InternalServerErrorHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: NotFoundHandler,\n    multi: true,\n  },\n  {\n    provide: HttpErrorHandler,\n    useExisting: UnauthorizedErrorHandler,\n    multi: true,\n  },\n];\n\nexport const httpErrorInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpErrorInterceptor,\n    multi: true,\n  },\n];\n","import { Translatable } from '../../../i18n/translatable';\nimport {\n  GlobalMessage,\n  GlobalMessageType,\n} from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { GlobalMessageState } from '../global-message-state';\n\nexport const initialState: GlobalMessageState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: GlobalMessageActions.GlobalMessageAction\n): GlobalMessageState {\n  switch (action.type) {\n    case GlobalMessageActions.ADD_MESSAGE: {\n      const message: GlobalMessage = action.payload;\n\n      if (state.entities[message.type] === undefined) {\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [message.text],\n          },\n        };\n      } else {\n        const currentMessages: Translatable[] = state.entities[message.type];\n        return {\n          ...state,\n          entities: {\n            ...state.entities,\n            [message.type]: [...currentMessages, message.text],\n          },\n        };\n      }\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGE: {\n      const msgType: GlobalMessageType = action.payload.type;\n      const msgIndex: number = action.payload.index;\n      if (\n        Object.keys(state.entities).length === 0 ||\n        !state.entities[msgType]\n      ) {\n        return state;\n      }\n\n      const messages = [...state.entities[msgType]];\n      messages.splice(msgIndex, 1);\n\n      return {\n        ...state,\n        entities: {\n          ...state.entities,\n          [msgType]: messages,\n        },\n      };\n    }\n\n    case GlobalMessageActions.REMOVE_MESSAGES_BY_TYPE: {\n      const entities = {\n        ...state.entities,\n        [action.payload]: [],\n      };\n      return {\n        ...state,\n        entities,\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport * as fromGlobalMessage from './global-message.reducer';\nimport { GlobalMessageState } from '../global-message-state';\nimport { ActionReducer } from '@ngrx/store';\n\nexport function getReducers(): ActionReducer<GlobalMessageState> {\n  return fromGlobalMessage.reducer;\n}\n\nexport const reducerToken: InjectionToken<ActionReducer<\n  GlobalMessageState\n>> = new InjectionToken<ActionReducer<GlobalMessageState>>(\n  'GlobalMessageReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { GLOBAL_MESSAGE_FEATURE } from './global-message-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    StoreModule.forFeature(GLOBAL_MESSAGE_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class GlobalMessageStoreModule {}\n","export function shallowEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true;\n  }\n  if (!objA || !objB) {\n    return false;\n  }\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const aKeysLen = aKeys.length;\n  const bKeysLen = bKeys.length;\n\n  if (aKeysLen !== bKeysLen) {\n    return false;\n  }\n  for (let i = 0; i < aKeysLen; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function deepEqualObjects(objA: object, objB: object): boolean {\n  if (objA === objB) {\n    return true; // if both objA and objB are null or undefined and exactly the same\n  } else if (!(objA instanceof Object) || !(objB instanceof Object)) {\n    return false; // if they are not strictly equal, they both need to be Objects\n  } else if (objA.constructor !== objB.constructor) {\n    // they must have the exact same prototype chain, the closest we can do is\n    // test their constructor.\n    return false;\n  } else {\n    for (const key in objA) {\n      if (!objA.hasOwnProperty(key)) {\n        continue; // other properties were tested using objA.constructor === y.constructor\n      }\n      if (!objB.hasOwnProperty(key)) {\n        return false; // allows to compare objA[ key ] and objB[ key ] when set to undefined\n      }\n      if (objA[key] === objB[key]) {\n        continue; // if they have the same strict value or identity then they are equal\n      }\n      if (typeof objA[key] !== 'object') {\n        return false; // Numbers, Strings, Functions, Booleans must be strictly equal\n      }\n      if (!deepEqualObjects(objA[key], objB[key])) {\n        return false;\n      }\n    }\n    for (const key in objB) {\n      if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport function countOfDeepEqualObjects(obj: any, arr: Array<any>): number {\n  return arr.reduce((acc, curr) => {\n    if (deepEqualObjects(obj, curr)) {\n      acc++;\n    }\n    return acc;\n  }, 0);\n}\n\nexport function indexOfFirstOccurrence(\n  obj: any,\n  arr: Array<any>\n): number | undefined {\n  for (let index = 0; index < arr.length; index++) {\n    if (deepEqualObjects(arr[index], obj)) {\n      return index;\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport {\n  concatMap,\n  delay,\n  filter,\n  map,\n  pluck,\n  switchMap,\n  take,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { Translatable } from '../../../i18n/translatable';\nimport {\n  countOfDeepEqualObjects,\n  indexOfFirstOccurrence,\n} from '../../../util/compare-equal-objects';\nimport { GlobalMessageConfig } from '../../config/global-message-config';\nimport { GlobalMessage } from '../../models/global-message.model';\nimport { GlobalMessageActions } from '../actions/index';\nimport { StateWithGlobalMessage } from '../global-message-state';\nimport { GlobalMessageSelectors } from '../selectors/index';\n\n@Injectable()\nexport class GlobalMessageEffect {\n  @Effect()\n  removeDuplicated$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = this.actions$.pipe(\n    ofType(GlobalMessageActions.ADD_MESSAGE),\n    pluck('payload'),\n    switchMap((message: GlobalMessage) =>\n      of(message.text).pipe(\n        withLatestFrom(\n          this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageEntitiesByType(\n                message.type\n              )\n            )\n          )\n        ),\n        filter(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            countOfDeepEqualObjects(text, messages) > 1\n        ),\n        map(\n          ([text, messages]: [Translatable, Translatable[]]) =>\n            new GlobalMessageActions.RemoveMessage({\n              type: message.type,\n              index: indexOfFirstOccurrence(text, messages),\n            })\n        )\n      )\n    )\n  );\n\n  @Effect()\n  hideAfterDelay$: Observable<\n    GlobalMessageActions.RemoveMessage\n  > = isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR\n    ? this.actions$.pipe(\n        ofType(GlobalMessageActions.ADD_MESSAGE),\n        pluck('payload'),\n        concatMap((message: GlobalMessage) => {\n          const config = this.config.globalMessages[message.type];\n          return this.store.pipe(\n            select(\n              GlobalMessageSelectors.getGlobalMessageCountByType(message.type)\n            ),\n            take(1),\n            filter(\n              (count: number) =>\n                ((config && config.timeout !== undefined) || message.timeout) &&\n                count &&\n                count > 0\n            ),\n            delay(message.timeout || config.timeout),\n            switchMap(() =>\n              of(\n                new GlobalMessageActions.RemoveMessage({\n                  type: message.type,\n                  index: 0,\n                })\n              )\n            )\n          );\n        })\n      )\n    : EMPTY;\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<StateWithGlobalMessage>,\n    private config: GlobalMessageConfig,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n}\n","import { GlobalMessageType } from '../models/global-message.model';\nimport { GlobalMessageConfig } from './global-message-config';\n\nexport function defaultGlobalMessageConfigFactory(): GlobalMessageConfig {\n  return {\n    globalMessages: {\n      [GlobalMessageType.MSG_TYPE_CONFIRMATION]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_INFO]: {\n        timeout: 3000,\n      },\n      [GlobalMessageType.MSG_TYPE_ERROR]: {\n        timeout: 7000,\n      },\n      [GlobalMessageType.MSG_TYPE_WARNING]: {\n        timeout: 7000,\n      },\n    },\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { GlobalMessageService } from './facade/global-message.service';\nimport {\n  errorHandlers,\n  httpErrorInterceptors,\n} from './http-interceptors/index';\nimport { GlobalMessageStoreModule } from './store/global-message-store.module';\nimport { GlobalMessageEffect } from './store/effects/global-message.effect';\n\nimport { provideDefaultConfigFactory } from '../config/config.module';\nimport { defaultGlobalMessageConfigFactory } from './config/default-global-message-config';\n\n@NgModule({\n  imports: [\n    GlobalMessageStoreModule,\n    EffectsModule.forFeature([GlobalMessageEffect]),\n  ],\n  providers: [\n    provideDefaultConfigFactory(defaultGlobalMessageConfigFactory),\n    GlobalMessageService,\n  ],\n})\nexport class GlobalMessageModule {\n  static forRoot(): ModuleWithProviders<GlobalMessageModule> {\n    return {\n      ngModule: GlobalMessageModule,\n      providers: [...errorHandlers, ...httpErrorInterceptors],\n    };\n  }\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<\n  StateWithAsm,\n  AsmState\n> = createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSearchResultsLoaderState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { UserToken } from '../../../auth/models/token-types.model';\nimport { getAsmState } from './feature.selector';\nimport { AsmState, StateWithAsm } from '../asm-state';\n\nexport const getCustomerSupportAgentTokenState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<UserToken>\n> = createSelector(getAsmState, (state: AsmState) => state.csagentToken);\n\nexport const getCustomerSupportAgentToken: MemoizedSelector<\n  StateWithAsm,\n  UserToken\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSupportAgentTokenLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(getCustomerSupportAgentTokenState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\nimport { AuthActions } from '../../auth/store/actions';\nimport { OCC_USER_ID_CURRENT } from '../../occ/utils/occ-constants';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService {\n  constructor(\n    protected store: Store<StateWithAsm>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads a user token for a customer support agent\n   * @param userId\n   * @param password\n   */\n  authorizeCustomerSupportAgent(userId: string, password: string): void {\n    this.store.dispatch(\n      new AsmActions.LoadCustomerSupportAgentToken({\n        userId: userId,\n        password: password,\n      })\n    );\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stoped by calling logout().\n   * @param customerSupportAgentToken\n   * @param customerId\n   */\n  public startCustomerEmulationSession(\n    customerSupportAgentToken: UserToken,\n    customerId: string\n  ): void {\n    this.authService.authorizeWithToken({\n      ...customerSupportAgentToken,\n      userId: customerId,\n    });\n  }\n\n  /**\n   * Utility function to determine if a given token is a customer emulation session token.\n   * @param userToken\n   */\n  isCustomerEmulationToken(userToken: UserToken): boolean {\n    return (\n      Boolean(userToken) &&\n      Boolean(userToken.userId) &&\n      userToken.userId !== OCC_USER_ID_CURRENT\n    );\n  }\n\n  /**\n   * Returns the customer support agent's token\n   */\n  getCustomerSupportAgentToken(): Observable<UserToken> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSupportAgentToken));\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSupportAgentTokenLoading)\n    );\n  }\n\n  /**\n   * Logout a customer support agent\n   */\n  logoutCustomerSupportAgent(): void {\n    this.getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((userToken) => {\n        this.store.dispatch(new AsmActions.LogoutCustomerSupportAgent());\n        this.store.dispatch(new AuthActions.RevokeUserToken(userToken));\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { AsmAuthService } from '../facade/asm-auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentErrorHandlingService {\n  constructor(\n    protected asmAuthService: AsmAuthService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  terminateCustomerSupportAgentExpiredSession(): void {\n    this.asmAuthService.logoutCustomerSupportAgent();\n    this.globalMessageService.add(\n      {\n        key: 'asm.csagentTokenExpired',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { CustomerSupportAgentErrorHandlingService } from '../../asm/services/csagent-error-handling.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentAuthErrorInterceptor\n  implements HttpInterceptor {\n  constructor(\n    private csagentErrorHandlingService: CustomerSupportAgentErrorHandlingService\n  ) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const isCustomerSupportAgentRequest = this.isCustomerSupportAgentRequest(\n      request\n    );\n    if (isCustomerSupportAgentRequest) {\n      request = InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request\n      );\n    }\n\n    return next.handle(request).pipe(\n      catchError((errResponse: any) => {\n        if (errResponse instanceof HttpErrorResponse) {\n          // Unauthorized\n          if (isCustomerSupportAgentRequest && errResponse.status === 401) {\n            this.csagentErrorHandlingService.terminateCustomerSupportAgentExpiredSession();\n            return of(undefined as any);\n          }\n        }\n        return throwError(errResponse);\n      })\n    );\n  }\n\n  private isCustomerSupportAgentRequest(request: HttpRequest<any>): boolean {\n    const isRequestMapping = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestMapping);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n  InterceptorUtil,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '../../occ/utils/interceptor-util';\nimport { AsmAuthService } from '../facade/asm-auth.service';\nimport { UserToken } from '../../auth/models/token-types.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerSupportAgentTokenInterceptor implements HttpInterceptor {\n  constructor(private asmAuthService: AsmAuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return this.getCustomerSupportAgentToken(request).pipe(\n      take(1),\n      switchMap((token: UserToken) => {\n        if (token) {\n          request = request.clone({\n            setHeaders: {\n              Authorization: `${token.token_type} ${token.access_token}`,\n            },\n          });\n        }\n        return next.handle(request);\n      })\n    );\n  }\n\n  private getCustomerSupportAgentToken(\n    request: HttpRequest<any>\n  ): Observable<UserToken> {\n    if (\n      InterceptorUtil.getInterceptorParam(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        request.headers\n      )\n    ) {\n      return this.asmAuthService.getCustomerSupportAgentToken();\n    }\n    return of(null);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { CustomerSupportAgentAuthErrorInterceptor } from './csagent-auth-error.interceptor';\nimport { CustomerSupportAgentTokenInterceptor } from './csagent-token.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentTokenInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CustomerSupportAgentAuthErrorInterceptor,\n    multi: true,\n  },\n];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmStoreModule } from './store/asm-store.module';\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, AsmStoreModule],\n})\nexport class AsmModule {\n  static forRoot(): ModuleWithProviders<AsmModule> {\n    return {\n      ngModule: AsmModule,\n      providers: [...interceptors, provideDefaultConfig(defaultAsmConfig)],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi) {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","import { PageType } from '../../model/cms.model';\nimport { Page } from '../model/page.model';\nimport { Applicable } from '../../util/applicable';\n\n/**\n * Abstract class that can be used to resolve meta data for specific pages.\n * The `getScore` method is used to select the right resolver for a specific\n * page, based on a score. The score is calculated by the (non)matching page\n * type and page template.\n */\nexport abstract class PageMetaResolver implements Applicable {\n  /** The `PageType` is used to score the (non)matching page */\n  pageType: PageType;\n\n  /** The page template is used to score the (non)matching page template */\n  pageTemplate: string;\n\n  /**\n   * Returns the matching score for a resolver class, based on\n   * the page type and page template.\n   */\n  getScore(page: Page): number {\n    let score = 0;\n    if (this.pageType) {\n      score += page.type === this.pageType ? 1 : -1;\n    }\n    if (this.pageTemplate) {\n      score += page.template === this.pageTemplate ? 1 : -1;\n    }\n    return score;\n  }\n\n  hasMatch(page: Page): boolean {\n    return this.getScore(page) > 0;\n  }\n\n  getPriority(page: Page): number {\n    return this.getScore(page);\n  }\n}\n","// Email Standard RFC 5322:\nexport const EMAIL_PATTERN = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // tslint:disable-line\n\nexport const PASSWORD_PATTERN = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_\\-+{};:.,]).{6,}$/;\n","import { Cart } from '../../model/cart.model';\nimport { EntityProcessesLoaderState } from '../../state/utils/entity-processes-loader/entity-processes-loader-state';\n\nexport const MULTI_CART_FEATURE = 'cart';\nexport const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';\n\n// TODO(#7241): Drop after event system implementation for cart vouchers\n/**\n * Add voucher process const\n * @deprecated since 2.0\n */\nexport const ADD_VOUCHER_PROCESS_ID = 'addVoucher';\n\nexport interface StateWithMultiCart {\n  [MULTI_CART_FEATURE]: MultiCartState;\n}\n\nexport interface MultiCartState {\n  carts: EntityProcessesLoaderState<Cart>;\n  active: string;\n  wishList: string;\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { OrderEntry } from '../../../model/order.model';\nimport { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';\nimport { EntityProcessesLoaderState } from '../../../state/utils/entity-processes-loader/entity-processes-loader-state';\nimport {\n  entityHasPendingProcessesSelector,\n  entityIsStableSelector,\n  entityProcessesLoaderStateSelector,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';\nimport { ProcessesLoaderState } from '../../../state/utils/processes-loader/processes-loader-state';\nimport {\n  MultiCartState,\n  MULTI_CART_FEATURE,\n  StateWithMultiCart,\n} from '../multi-cart-state';\n\nexport const getMultiCartState: MemoizedSelector<\n  StateWithMultiCart,\n  MultiCartState\n> = createFeatureSelector<MultiCartState>(MULTI_CART_FEATURE);\n\nexport const getMultiCartEntities: MemoizedSelector<\n  StateWithMultiCart,\n  EntityProcessesLoaderState<Cart>\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.carts);\n\nexport const getCartEntitySelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, ProcessesLoaderState<Cart>> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityProcessesLoaderStateSelector(state, cartId)\n  );\n};\n\nexport const getCartSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, Cart> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityValueSelector(state, cartId)\n  );\n};\n\nexport const getCartIsStableSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityIsStableSelector(state, cartId)\n  );\n};\n\nexport const getCartHasPendingProcessesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, boolean> => {\n  return createSelector(\n    getMultiCartEntities,\n    (state: EntityProcessesLoaderState<Cart>) =>\n      entityHasPendingProcessesSelector(state, cartId)\n  );\n};\n\nexport const getCartEntriesSelectorFactory = (\n  cartId: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry[]> => {\n  return createSelector(getCartSelectorFactory(cartId), (state: Cart) => {\n    return state && state.entries ? state.entries : [];\n  });\n};\n\nexport const getCartEntrySelectorFactory = (\n  cartId: string,\n  productCode: string\n): MemoizedSelector<StateWithMultiCart, OrderEntry> => {\n  return createSelector(\n    getCartEntriesSelectorFactory(cartId),\n    (state: OrderEntry[]) => {\n      return state\n        ? state.find((entry) => entry.product.code === productCode)\n        : undefined;\n    }\n  );\n};\n\nexport const getActiveCartId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(getMultiCartState, (state: MultiCartState) => state.active);\n\nexport const getWishListId: MemoizedSelector<\n  StateWithMultiCart,\n  string\n> = createSelector(\n  getMultiCartState,\n  (state: MultiCartState) => state.wishList\n);\n","import { OrderEntry } from '../../../model/order.model';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_ENTRY = '[Cart-entry] Add Entry';\nexport const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';\nexport const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';\nexport const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';\nexport const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';\nexport const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';\n\nexport const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';\nexport const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';\nexport const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';\n\nexport class CartAddEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_ADD_ENTRY;\n  constructor(\n    public payload: {\n      cartId: string;\n      userId: string;\n      productCode: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      deliveryModeChanged: boolean;\n      entry: OrderEntry;\n      quantityAdded: number;\n      statusCode: string;\n      statusMessage: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartAddEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_ADD_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      productCode: string;\n      quantity: number;\n      error: any;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_ENTRY;\n  constructor(\n    public payload: { cartId: string; userId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; entryNumber: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      entryNumber: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntry extends EntityProcessesIncrementAction {\n  readonly type = CART_UPDATE_ENTRY;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntrySuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartUpdateEntryFail extends EntityProcessesDecrementAction {\n  readonly type = CART_UPDATE_ENTRY_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      userId: string;\n      cartId: string;\n      entryNumber: string;\n      quantity: number;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CartEntryAction =\n  | CartAddEntry\n  | CartAddEntrySuccess\n  | CartAddEntryFail\n  | CartRemoveEntry\n  | CartRemoveEntrySuccess\n  | CartRemoveEntryFail\n  | CartUpdateEntry\n  | CartUpdateEntrySuccess\n  | CartUpdateEntryFail;\n","import { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntityLoaderResetAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { ADD_VOUCHER_PROCESS_ID, MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';\nexport const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';\nexport const CART_ADD_VOUCHER_SUCCESS =\n  '[Cart-voucher] Add Cart Voucher Success';\nexport const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';\n\nexport const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';\nexport const CART_REMOVE_VOUCHER_FAIL =\n  '[Cart-voucher] Remove Cart Voucher Fail';\nexport const CART_REMOVE_VOUCHER_SUCCESS =\n  '[Cart-voucher] Remove Cart Voucher Success';\n\n// Adding cart voucher actions\nexport class CartAddVoucher extends EntityLoadAction {\n  readonly type = CART_ADD_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\nexport class CartAddVoucherFail extends EntityFailAction {\n  readonly type = CART_ADD_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      voucherId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CartAddVoucherSuccess extends EntitySuccessAction {\n  readonly type = CART_ADD_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// TODO(#7241): Remove when switching to event system for vouchers\n/**\n * Resets add voucher process\n *\n * @deprecated since 2.0\n */\nexport class CartResetAddVoucher extends EntityLoaderResetAction {\n  readonly type = CART_RESET_ADD_VOUCHER;\n  constructor() {\n    super(PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);\n  }\n}\n\n// Deleting cart voucher\nexport class CartRemoveVoucher extends EntityProcessesIncrementAction {\n  readonly type = CART_REMOVE_VOUCHER;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherFail extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_FAIL;\n  constructor(\n    public payload: {\n      error: any;\n      cartId: string;\n      userId: string;\n      voucherId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class CartRemoveVoucherSuccess extends EntityProcessesDecrementAction {\n  readonly type = CART_REMOVE_VOUCHER_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; voucherId: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\n// action types\nexport type CartVoucherAction =\n  | CartAddVoucher\n  | CartAddVoucherFail\n  | CartAddVoucherSuccess\n  | CartResetAddVoucher\n  | CartRemoveVoucher\n  | CartRemoveVoucherFail\n  | CartRemoveVoucherSuccess;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAction } from '../../../state/utils/entity/entity.action';\nimport { ProcessesLoaderResetAction } from '../../../state/utils/processes-loader/processes-loader.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_CART = '[Cart] Create Cart';\nexport const CREATE_CART_FAIL = '[Cart] Create Cart Fail';\nexport const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';\n\nexport const LOAD_CART = '[Cart] Load Cart';\nexport const LOAD_CART_FAIL = '[Cart] Load Cart Fail';\nexport const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';\n\nexport const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';\nexport const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';\nexport const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';\n\nexport const MERGE_CART = '[Cart] Merge Cart';\nexport const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';\n\nexport const RESET_CART_DETAILS = '[Cart] Reset Cart Details';\n\nexport const REMOVE_CART = '[Cart] Remove Cart';\n\nexport const DELETE_CART = '[Cart] Delete Cart';\nexport const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';\nexport const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';\n\ninterface CreateCartPayload {\n  userId: string;\n  /** Used as a unique key in ngrx carts store (we don't know cartId at that time) */\n  tempCartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n  /** Anonymous cart which should be merged to new cart */\n  oldCartId?: string;\n  /** Cart to which should we merge (not passing this will create new cart) */\n  toMergeCartGuid?: string;\n}\n\nexport class CreateCart extends EntityLoadAction {\n  readonly type = CREATE_CART;\n  constructor(public payload: CreateCartPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartFailPayload extends CreateCartPayload {\n  error: any;\n}\n\nexport class CreateCartFail extends EntityFailAction {\n  readonly type = CREATE_CART_FAIL;\n  constructor(public payload: CreateCartFailPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface CreateCartSuccessPayload extends CreateCartPayload {\n  cart: Cart;\n  cartId: string;\n}\n\nexport class CreateCartSuccess extends EntitySuccessAction {\n  readonly type = CREATE_CART_SUCCESS;\n  constructor(public payload: CreateCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCart extends EntityProcessesIncrementAction {\n  readonly type = ADD_EMAIL_TO_CART;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartFail extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n      email: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class AddEmailToCartSuccess extends EntityProcessesDecrementAction {\n  readonly type = ADD_EMAIL_TO_CART_SUCCESS;\n  constructor(\n    public payload: { userId: string; cartId: string; email: string }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartPayload {\n  userId: string;\n  cartId: string;\n  extraData?: {\n    active?: boolean;\n  };\n}\n\nexport class LoadCart extends EntityLoadAction {\n  readonly type = LOAD_CART;\n  constructor(public payload: LoadCartPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadCartFailPayload extends LoadCartPayload {\n  error: any;\n}\n\nexport class LoadCartFail extends EntityFailAction {\n  readonly type = LOAD_CART_FAIL;\n  constructor(public payload: LoadCartFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadCartSuccessPayload extends LoadCartPayload {\n  cart: Cart;\n}\n\nexport class LoadCartSuccess extends EntitySuccessAction {\n  readonly type = LOAD_CART_SUCCESS;\n  constructor(public payload: LoadCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface MergeCartPayload {\n  cartId: string;\n  userId: string;\n  extraData?: { active?: boolean };\n  /**\n   * MergeCart actions triggers CreateCart which requires this parameter, so that's why it is required.\n   */\n  tempCartId: string;\n}\n\nexport class MergeCart implements Action {\n  readonly type = MERGE_CART;\n  constructor(public payload: MergeCartPayload) {}\n}\n\ninterface MergeCartSuccessPayload extends MergeCartPayload {\n  /**\n   * Previous cart id which was merged with new/user cart.\n   * Needed to know which obsolete entity should be removed.\n   */\n  oldCartId: string;\n}\n\nexport class MergeCartSuccess extends EntityRemoveAction {\n  readonly type = MERGE_CART_SUCCESS;\n  constructor(public payload: MergeCartSuccessPayload) {\n    super(MULTI_CART_DATA, payload.oldCartId);\n  }\n}\n\n/**\n * On site context change we want to keep current list of entities, but we want to clear the value and flags.\n * With ProcessesLoaderResetAction we run it on every entity of this type.\n */\nexport class ResetCartDetails extends ProcessesLoaderResetAction {\n  readonly type = RESET_CART_DETAILS;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\n/**\n * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.\n * For removing particular cart in both places use DeleteCart actions.\n */\nexport class RemoveCart extends EntityRemoveAction {\n  readonly type = REMOVE_CART;\n  constructor(public payload: { cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCart implements Action {\n  readonly type = DELETE_CART;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class DeleteCartSuccess extends EntityRemoveAction {\n  readonly type = DELETE_CART_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class DeleteCartFail implements Action {\n  readonly type = DELETE_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {}\n}\n\nexport type CartAction =\n  | CreateCart\n  | CreateCartFail\n  | CreateCartSuccess\n  | LoadCart\n  | LoadCartFail\n  | LoadCartSuccess\n  | MergeCart\n  | MergeCartSuccess\n  | ResetCartDetails\n  | AddEmailToCart\n  | AddEmailToCartFail\n  | AddEmailToCartSuccess\n  | DeleteCart\n  | DeleteCartSuccess\n  | DeleteCartFail\n  | RemoveCart;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport { EntitySuccessAction } from '../../../state/utils/entity-loader/entity-loader.action';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { EntityRemoveAllAction } from '../../../state/utils/entity/entity.action';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const SET_TEMP_CART = '[Cart] Set Temp Cart';\n\nexport const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';\nexport const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';\n\nexport const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';\n\nexport const CLEAR_CART_STATE = '[Cart] Clear Cart State';\n\n/**\n * To keep track of cart creation process we use cart with `temp-${uuid}` id.\n * After creating cart we switch to entity with `code` or `guid`.\n * We need `temp-${uuid}` cart entities for loading/error state.\n */\nexport class SetTempCart extends EntitySuccessAction {\n  readonly type = SET_TEMP_CART;\n  constructor(public payload: { cart: Cart; tempCartId: string }) {\n    super(MULTI_CART_DATA, payload.tempCartId, payload.cart);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Increases process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesIncrement extends EntityProcessesIncrementAction {\n  readonly type = CART_PROCESSES_INCREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n// TODO(#7241): Remove when there won't be any usage\n/**\n * Decrement process counter on cart entities\n * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.\n * @deprecated since 2.0\n */\nexport class CartProcessesDecrement extends EntityProcessesDecrementAction {\n  readonly type = CART_PROCESSES_DECREMENT;\n  constructor(public payload: string) {\n    super(MULTI_CART_DATA, payload);\n  }\n}\n\n/**\n * Only sets active cart property with id of active cart. Then services take care of loading that cart.\n */\nexport class SetActiveCartId implements Action {\n  readonly type = SET_ACTIVE_CART_ID;\n  constructor(public payload: string) {}\n}\n\n/**\n * Clear whole cart store state: all entities + reset rest of the cart state.\n */\nexport class ClearCartState extends EntityRemoveAllAction {\n  readonly type = CLEAR_CART_STATE;\n  constructor() {\n    super(MULTI_CART_DATA);\n  }\n}\n\nexport type MultiCartActions =\n  | SetTempCart\n  | CartProcessesIncrement\n  | CartProcessesDecrement\n  | SetActiveCartId\n  | ClearCartState;\n","import { Action } from '@ngrx/store';\nimport { Cart } from '../../../model/cart.model';\nimport {\n  EntityFailAction,\n  EntityLoadAction,\n  EntitySuccessAction,\n} from '../../../state/utils/entity-loader/entity-loader.action';\nimport { getCartIdByUserId } from '../../utils/utils';\nimport { MULTI_CART_DATA } from '../multi-cart-state';\n\nexport const CREATE_WISH_LIST = '[Wish List] Create Wish List';\nexport const CREATE_WISH_LIST_FAIL = '[Wish List] Create Wish List Fail';\nexport const CREATE_WISH_LIST_SUCCESS = '[Wish List] Create Wish List Success';\n\nexport const LOAD_WISH_LIST = '[Wish List] Load Wish List';\nexport const LOAD_WISH_LIST_SUCCESS = '[Wish List] Load Wish List Success';\nexport const LOAD_WISH_LIST_FAIL = '[Wish List] Load Wish List Fail';\n\nexport const RESET_WISH_LIST_DETAILS = '[Wish List] Reset Wish List';\n\nexport class CreateWishList implements Action {\n  readonly type = CREATE_WISH_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      name: string;\n      description?: string;\n    }\n  ) {}\n}\n\nexport class CreateWishListSuccess extends EntitySuccessAction {\n  readonly type = CREATE_WISH_LIST_SUCCESS;\n  constructor(public payload: { cart: Cart; userId: string }) {\n    super(MULTI_CART_DATA, getCartIdByUserId(payload.cart, payload.userId));\n  }\n}\n\nexport class CreateWishListFail extends EntityFailAction {\n  readonly type = CREATE_WISH_LIST_FAIL;\n  constructor(public payload: { cartId: string; error?: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\ninterface LoadWishListPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   */\n  customerId: string;\n  /**\n   * When we try load wishlist for the first time we don't know cart id.\n   * Instead we create temporary cart with id equal to wishlist name to keep track of loading/error state.\n   */\n  tempCartId: string;\n}\n\nexport class LoadWishList extends EntityLoadAction {\n  readonly type = LOAD_WISH_LIST;\n  constructor(public payload: LoadWishListPayload) {\n    super(MULTI_CART_DATA, payload.tempCartId);\n  }\n}\n\ninterface LoadWishListSuccessPayload {\n  cart: Cart;\n  userId: string;\n  /**\n   * When LoadWishListSuccess action was dispatched as an completion to LoadWishList action\n   * we get temporary cartId that was used to keep track of loading state.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  tempCartId?: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Wish list cart id. Extracted from cart content (code property).\n   */\n  cartId: string;\n}\n\nexport class LoadWishListSuccess extends EntitySuccessAction {\n  readonly type = LOAD_WISH_LIST_SUCCESS;\n  constructor(public payload: LoadWishListSuccessPayload) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\ninterface LoadWishListFailPayload {\n  userId: string;\n  /**\n   * Used to compute wishlist cart name and find it in list of all carts.\n   * In case of loading wish list with known cartId this property will be empty.\n   */\n  customerId?: string;\n  /**\n   * Cart id used as a store entity key. This could point either to some\n   * temporary cart used to track loading/error state or to normal wish list entity.\n   */\n  cartId: string;\n  error: any;\n}\n\nexport class LoadWishListFail extends EntityFailAction {\n  readonly type = LOAD_WISH_LIST_FAIL;\n  constructor(public payload: LoadWishListFailPayload) {\n    super(MULTI_CART_DATA, payload.cartId, payload.error);\n  }\n}\n\nexport type WishListActions =\n  | CreateWishList\n  | CreateWishListSuccess\n  | CreateWishListFail\n  | LoadWishList\n  | LoadWishListSuccess\n  | LoadWishListFail;\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport { debounce, distinctUntilChanged } from 'rxjs/operators';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class MultiCartService {\n  constructor(protected store: Store<StateWithMultiCart>) {}\n\n  /**\n   * Returns cart from store as an observable\n   *\n   * @param cartId\n   */\n  getCart(cartId: string): Observable<Cart> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns cart entity from store (cart with loading, error, success flags) as an observable\n   *\n   * @param cartId\n   */\n  getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntitySelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartIsStableSelectorFactory(cartId)),\n      // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.\n      // This flickering should only be avoided when switching from false to true\n      // Start of loading should be showed instantly (no debounce)\n      // Extra actions are only dispatched after some loading\n      debounce((isStable) => (isStable ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Simple random temp cart id generator\n   */\n  private generateTempCartId(): string {\n    const pseudoUuid = Math.random().toString(36).substr(2, 9);\n    return `temp-${pseudoUuid}`;\n  }\n\n  /**\n   * Create or merge cart\n   *\n   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData\n   */\n  createCart({\n    userId,\n    oldCartId,\n    toMergeCartGuid,\n    extraData,\n  }: {\n    userId: string;\n    oldCartId?: string;\n    toMergeCartGuid?: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }): Observable<ProcessesLoaderState<Cart>> {\n    // to support creating multiple carts at the same time we need to use different entity for every process\n    // simple random uuid generator is used here for entity names\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.CreateCart({\n        extraData,\n        userId,\n        oldCartId,\n        toMergeCartGuid,\n        tempCartId,\n      })\n    );\n    return this.getCartEntity(tempCartId);\n  }\n\n  /**\n   * Merge provided cart to current user cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  mergeToCurrentCart({\n    userId,\n    cartId,\n    extraData,\n  }: {\n    userId: string;\n    cartId: string;\n    extraData?: {\n      active?: boolean;\n    };\n  }) {\n    const tempCartId = this.generateTempCartId();\n    this.store.dispatch(\n      new CartActions.MergeCart({\n        userId,\n        cartId,\n        extraData,\n        tempCartId,\n      })\n    );\n  }\n\n  /**\n   * Load cart\n   *\n   * @param params Object with userId, cartId and extraData\n   */\n  loadCart({\n    cartId,\n    userId,\n    extraData,\n  }: {\n    cartId: string;\n    userId: string;\n    extraData?: any;\n  }): void {\n    this.store.dispatch(\n      new CartActions.LoadCart({\n        userId,\n        cartId,\n        extraData,\n      })\n    );\n  }\n\n  /**\n   * Get cart entries as an observable\n   * @param cartId\n   */\n  getEntries(cartId: string): Observable<OrderEntry[]> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getCartEntriesSelectorFactory(cartId))\n    );\n  }\n\n  /**\n   * Add entry to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity: number\n  ): void {\n    this.store.dispatch(\n      new CartActions.CartAddEntry({\n        userId,\n        cartId,\n        productCode,\n        quantity,\n      })\n    );\n  }\n\n  /**\n   * Add multiple entries to cart\n   *\n   * @param userId\n   * @param cartId\n   * @param products Array with items (productCode and quantity)\n   */\n  addEntries(\n    userId: string,\n    cartId: string,\n    products: Array<{ productCode: string; quantity: number }>\n  ): void {\n    products.forEach((product) => {\n      this.store.dispatch(\n        new CartActions.CartAddEntry({\n          userId,\n          cartId,\n          productCode: product.productCode,\n          quantity: product.quantity,\n        })\n      );\n    });\n  }\n\n  /**\n   * Remove entry from cart\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   */\n  removeEntry(userId: string, cartId: string, entryNumber: number): void {\n    this.store.dispatch(\n      new CartActions.CartRemoveEntry({\n        userId,\n        cartId,\n        entryNumber: `${entryNumber}`,\n      })\n    );\n  }\n\n  /**\n   * Update entry in cart. For quantity = 0 it removes entry\n   *\n   * @param userId\n   * @param cartId\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(\n    userId: string,\n    cartId: string,\n    entryNumber: number,\n    quantity: number\n  ): void {\n    if (quantity > 0) {\n      this.store.dispatch(\n        new CartActions.CartUpdateEntry({\n          userId,\n          cartId,\n          entryNumber: `${entryNumber}`,\n          quantity: quantity,\n        })\n      );\n    } else {\n      this.removeEntry(userId, cartId, entryNumber);\n    }\n  }\n\n  /**\n   * Get specific entry from cart\n   *\n   * @param cartId\n   * @param productCode\n   */\n  getEntry(cartId: string, productCode: string): Observable<OrderEntry | null> {\n    return this.store.pipe(\n      select(\n        MultiCartSelectors.getCartEntrySelectorFactory(cartId, productCode)\n      )\n    );\n  }\n\n  /**\n   * Assign email to the cart\n   *\n   * @param cartId\n   * @param userId\n   * @param email\n   */\n  assignEmail(cartId: string, userId: string, email: string): void {\n    this.store.dispatch(\n      new CartActions.AddEmailToCart({\n        userId,\n        cartId,\n        email,\n      })\n    );\n  }\n\n  /**\n   * Delete cart\n   *\n   * @param cartId\n   * @param userId\n   */\n  deleteCart(cartId: string, userId: string) {\n    this.store.dispatch(\n      new CartActions.DeleteCart({\n        userId,\n        cartId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, Observable, timer } from 'rxjs';\nimport {\n  debounce,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport { Cart } from '../../model/cart.model';\nimport { User } from '../../model/misc.model';\nimport { OrderEntry } from '../../model/order.model';\nimport {\n  OCC_CART_ID_CURRENT,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n} from '../../occ/utils/occ-constants';\nimport { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';\nimport { EMAIL_PATTERN } from '../../util/regex-pattern';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getCartIdByUserId, isTempCartId } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class ActiveCartService {\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n  private activeCart$: Observable<Cart>;\n\n  private userId = OCC_USER_ID_ANONYMOUS;\n  private cartId;\n  private cartUser: User;\n\n  private activeCartId$ = this.store.pipe(\n    select(MultiCartSelectors.getActiveCartId),\n    map((cartId) => {\n      if (!cartId) {\n        return OCC_CART_ID_CURRENT;\n      }\n      return cartId;\n    })\n  );\n  private cartSelector$ = this.activeCartId$.pipe(\n    switchMap((cartId) => this.multiCartService.getCartEntity(cartId))\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n      if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n        if (this.isJustLoggedIn(userId)) {\n          this.loadOrMerge(this.cartId);\n        }\n      }\n      this.previousUserId = userId;\n    });\n\n    this.activeCartId$.subscribe((cartId) => {\n      this.cartId = cartId;\n    });\n\n    this.initActiveCart();\n  }\n\n  private initActiveCart() {\n    this.activeCart$ = this.cartSelector$.pipe(\n      withLatestFrom(this.activeCartId$),\n      map(([cartEntity, activeCartId]: [ProcessesLoaderState<Cart>, string]): {\n        cart: Cart;\n        cartId: string;\n        isStable: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          cartId: activeCartId,\n          isStable: !cartEntity.loading && cartEntity.processesCount === 0,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      // we want to emit empty carts even if those are not stable\n      // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete\n      // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart\n      filter(({ isStable, cart }) => isStable || this.isEmpty(cart)),\n      tap(({ cart, cartId, loaded, isStable }) => {\n        if (\n          isStable &&\n          this.isEmpty(cart) &&\n          !loaded &&\n          !isTempCartId(cartId)\n        ) {\n          this.load(cartId);\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      tap((cart) => {\n        if (cart) {\n          this.cartUser = cart.user;\n        }\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Returns active cart\n   */\n  getActive(): Observable<Cart> {\n    return this.activeCart$;\n  }\n\n  /**\n   * Returns active cart id\n   */\n  getActiveCartId(): Observable<string> {\n    return this.activeCart$.pipe(\n      map((cart) => getCartIdByUserId(cart, this.userId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart entries\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.getEntries(cartId)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns cart loading state\n   */\n  getLoading(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cartEntity) => cartEntity.loading),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns true when cart is stable (not loading and not pending processes on cart)\n   */\n  isStable(): Observable<boolean> {\n    // Debounce is used here, to avoid flickering when we switch between different cart entities.\n    // For example during `addEntry` method. We might try to load current cart, so `current cart will be then active id.\n    // After load fails we might create new cart so we switch to `temp-${uuid}` cart entity used when creating cart.\n    // At the end we finally switch to cart `code` for cart id. Between those switches cart `isStable` function should not flicker.\n    return this.activeCartId$.pipe(\n      switchMap((cartId) => this.multiCartService.isStable(cartId)),\n      debounce((state) => (state ? timer(0) : EMPTY)),\n      distinctUntilChanged()\n    );\n  }\n\n  private loadOrMerge(cartId: string): void {\n    // for login user, whenever there's an existing cart, we will load the user\n    // current cart and merge it into the existing cart\n    if (!cartId || cartId === OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (this.isGuestCart()) {\n      this.guestCartMerge(cartId);\n    } else {\n      this.multiCartService.mergeToCurrentCart({\n        userId: this.userId,\n        cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private load(cartId: string): void {\n    if (this.userId !== OCC_USER_ID_ANONYMOUS) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId ? cartId : OCC_CART_ID_CURRENT,\n        extraData: {\n          active: true,\n        },\n      });\n    } else if (cartId && cartId !== OCC_CART_ID_CURRENT) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: cartId,\n        extraData: {\n          active: true,\n        },\n      });\n    }\n  }\n\n  private addEntriesGuestMerge(cartEntries: OrderEntry[]) {\n    const entriesToAdd = cartEntries.map((entry) => ({\n      productCode: entry.product.code,\n      quantity: entry.quantity,\n    }));\n    this.requireLoadedCartForGuestMerge().subscribe((cartState) => {\n      this.multiCartService.addEntries(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        entriesToAdd\n      );\n    });\n  }\n\n  private requireLoadedCartForGuestMerge() {\n    return this.requireLoadedCart(\n      this.cartSelector$.pipe(filter(() => !this.isGuestCart()))\n    );\n  }\n\n  private isCartCreating(cartState) {\n    // cart creating is always represented with loading flags\n    // when all loading flags are false it means that we restored wrong cart id\n    // could happen on context change or reload right in the middle on cart create call\n    return (\n      isTempCartId(this.cartId) &&\n      (cartState.loading || cartState.success || cartState.error)\n    );\n  }\n\n  private requireLoadedCart(\n    customCartSelector$?: Observable<ProcessesLoaderState<Cart>>\n  ): Observable<ProcessesLoaderState<Cart>> {\n    // For guest cart merge we want to filter guest cart in the whole stream\n    // We have to wait with load/create/addEntry after guest cart will be deleted.\n    // That's why you can provide custom selector with this filter applied.\n    const cartSelector$ = customCartSelector$\n      ? customCartSelector$\n      : this.cartSelector$;\n\n    return cartSelector$.pipe(\n      filter((cartState) => !cartState.loading),\n      // Avoid load/create call when there are new cart creating at the moment\n      filter((cartState) => !this.isCartCreating(cartState)),\n      take(1),\n      switchMap((cartState) => {\n        // Try to load the cart, because it might have been created on another device between our login and add entry call\n        if (\n          this.isEmpty(cartState.value) &&\n          this.userId !== OCC_USER_ID_ANONYMOUS\n        ) {\n          this.load(undefined);\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      // create cart can happen to anonymous user if it is not empty or to any other user if it is loaded and empty\n      filter(\n        (cartState) =>\n          this.userId === OCC_USER_ID_ANONYMOUS ||\n          cartState.success ||\n          cartState.error\n      ),\n      take(1),\n      switchMap((cartState) => {\n        if (this.isEmpty(cartState.value)) {\n          this.multiCartService.createCart({\n            userId: this.userId,\n            extraData: {\n              active: true,\n            },\n          });\n        }\n        return cartSelector$;\n      }),\n      filter((cartState) => !cartState.loading),\n      filter((cartState) => cartState.success || cartState.error),\n      // wait for active cart id to point to code/guid to avoid some work on temp cart entity\n      filter((cartState) => !this.isCartCreating(cartState)),\n      filter((cartState) => !this.isEmpty(cartState.value)),\n      take(1)\n    );\n  }\n\n  /**\n   * Add entry to active cart\n   *\n   * @param productCode\n   * @param quantity\n   */\n  addEntry(productCode: string, quantity: number): void {\n    this.requireLoadedCart().subscribe((cartState) => {\n      this.multiCartService.addEntry(\n        this.userId,\n        getCartIdByUserId(cartState.value, this.userId),\n        productCode,\n        quantity\n      );\n    });\n  }\n\n  /**\n   * Remove entry\n   *\n   * @param entry\n   */\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  /**\n   * Update entry\n   *\n   * @param entryNumber\n   * @param quantity\n   */\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  /**\n   * Returns cart entry\n   *\n   * @param productCode\n   */\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.activeCartId$.pipe(\n      switchMap((cartId) =>\n        this.multiCartService.getEntry(cartId, productCode)\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Assign email to cart\n   *\n   * @param email\n   */\n  addEmail(email: string): void {\n    this.multiCartService.assignEmail(this.cartId, this.userId, email);\n  }\n\n  /**\n   * Get assigned user to cart\n   */\n  getAssignedUser(): Observable<User> {\n    return this.getActive().pipe(map((cart) => cart.user));\n  }\n\n  /**\n   * Returns true for guest cart\n   */\n  isGuestCart(): boolean {\n    return (\n      this.cartUser &&\n      (this.cartUser.name === OCC_USER_ID_GUEST ||\n        this.isEmail(this.cartUser.uid.split('|').slice(1).join('|')))\n    );\n  }\n\n  /**\n   * Add multiple entries to a cart\n   *\n   * @param cartEntries : list of entries to add (OrderEntry[])\n   */\n  addEntries(cartEntries: OrderEntry[]): void {\n    cartEntries.forEach((entry) => {\n      this.addEntry(entry.product.code, entry.quantity);\n    });\n  }\n\n  private isEmail(str: string): boolean {\n    if (str) {\n      return str.match(EMAIL_PATTERN) ? true : false;\n    }\n    return false;\n  }\n\n  // TODO: Remove once backend is updated\n  /**\n   * Temporary method to merge guest cart with user cart because of backend limitation\n   * This is for an edge case\n   */\n  private guestCartMerge(cartId: string): void {\n    let cartEntries: OrderEntry[];\n    this.getEntries()\n      .pipe(take(1))\n      .subscribe((entries) => {\n        cartEntries = entries;\n      });\n\n    this.multiCartService.deleteCart(cartId, OCC_USER_ID_ANONYMOUS);\n\n    this.addEntriesGuestMerge(cartEntries);\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n}\n","import { Observable, OperatorFunction } from 'rxjs';\nimport { startWith, switchMapTo } from 'rxjs/operators';\n\n/**\n *\n * Withdraw from the source observable when notifier emits a value\n *\n * Withdraw will result in resubscribing to the source observable\n * Operator is useful to kill ongoing emission transformation on notifier emission\n *\n * @param notifier\n */\nexport function withdrawOn<T>(\n  notifier: Observable<any>\n): OperatorFunction<T, T> {\n  return (source: Observable<T>) =>\n    notifier.pipe(startWith(undefined), switchMapTo(source));\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CartEntryAdapter } from './cart-entry.adapter';\nimport { CartModification } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartEntryConnector {\n  constructor(protected adapter: CartEntryAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    productCode: string,\n    quantity?: number\n  ): Observable<CartModification> {\n    return this.adapter.add(userId, cartId, productCode, quantity);\n  }\n\n  public update(\n    userId: string,\n    cartId: string,\n    entryNumber: string,\n    qty: number,\n    pickupStore?: string\n  ): Observable<CartModification> {\n    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    entryNumber: string\n  ): Observable<any> {\n    return this.adapter.remove(userId, cartId, entryNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { CartModification } from '../../../model/cart.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartEntryConnector } from '../../connectors/entry/cart-entry.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartEntryEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addEntry$: Observable<\n    | CartActions.CartAddEntrySuccess\n    | CartActions.CartAddEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_ENTRY),\n    map((action: CartActions.CartAddEntry) => action.payload),\n    concatMap((payload) => {\n      return this.cartEntryConnector\n        .add(\n          payload.userId,\n          payload.cartId,\n          payload.productCode,\n          payload.quantity\n        )\n        .pipe(\n          map(\n            (cartModification: CartModification) =>\n              new CartActions.CartAddEntrySuccess({\n                ...payload,\n                ...(cartModification as Required<CartModification>),\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  removeEntry$: Observable<\n    | CartActions.CartRemoveEntrySuccess\n    | CartActions.CartRemoveEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_ENTRY),\n    map((action: CartActions.CartRemoveEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .remove(payload.userId, payload.cartId, payload.entryNumber)\n        .pipe(\n          map(() => {\n            return new CartActions.CartRemoveEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  updateEntry$: Observable<\n    | CartActions.CartUpdateEntrySuccess\n    | CartActions.CartUpdateEntryFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_UPDATE_ENTRY),\n    map((action: CartActions.CartUpdateEntry) => action.payload),\n    concatMap((payload) =>\n      this.cartEntryConnector\n        .update(\n          payload.userId,\n          payload.cartId,\n          payload.entryNumber,\n          payload.quantity\n        )\n        .pipe(\n          map(() => {\n            return new CartActions.CartUpdateEntrySuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartUpdateEntryFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartEntryConnector: CartEntryConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartVoucherAdapter } from './cart-voucher.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartVoucherConnector {\n  constructor(protected adapter: CartVoucherAdapter) {}\n\n  public add(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.add(userId, cartId, voucherId);\n  }\n\n  public remove(\n    userId: string,\n    cartId: string,\n    voucherId: string\n  ): Observable<{}> {\n    return this.adapter.remove(userId, cartId, voucherId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { GlobalMessageService } from '../../../global-message/facade/global-message.service';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartVoucherConnector } from '../../connectors/voucher/cart-voucher.connector';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class CartVoucherEffects {\n  constructor(\n    private actions$: Actions,\n    private cartVoucherConnector: CartVoucherConnector,\n    private messageService: GlobalMessageService\n  ) {}\n\n  @Effect()\n  addCartVoucher$: Observable<\n    | CartActions.CartVoucherAction\n    | CartActions.LoadCart\n    | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .add(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.applyVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_CONFIRMATION\n            );\n            return new CartActions.CartAddVoucherSuccess({\n              ...payload,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartAddVoucherFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.CartProcessesDecrement(payload.cartId),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeCartVoucher$: Observable<\n    CartActions.CartVoucherAction | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_REMOVE_VOUCHER),\n    map((action: CartActions.CartRemoveVoucher) => action.payload),\n    mergeMap((payload) => {\n      return this.cartVoucherConnector\n        .remove(payload.userId, payload.cartId, payload.voucherId)\n        .pipe(\n          map(() => {\n            this.showGlobalMessage(\n              'voucher.removeVoucherSuccess',\n              payload.voucherId,\n              GlobalMessageType.MSG_TYPE_INFO\n            );\n            return new CartActions.CartRemoveVoucherSuccess({\n              userId: payload.userId,\n              cartId: payload.cartId,\n              voucherId: payload.voucherId,\n            });\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.CartRemoveVoucherFail({\n                error: makeErrorSerializable(error),\n                cartId: payload.cartId,\n                userId: payload.userId,\n                voucherId: payload.voucherId,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        );\n    })\n  );\n\n  private showGlobalMessage(\n    text: string,\n    param: string,\n    messageType: GlobalMessageType\n  ) {\n    this.messageService.add(\n      { key: text, params: { voucherCode: param } },\n      messageType\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\nexport const VERIFY_ADDRESS = '[Checkout] Verify Address';\nexport const VERIFY_ADDRESS_FAIL = '[Checkout] Verify Address Fail';\nexport const VERIFY_ADDRESS_SUCCESS = '[Checkout] Verify Address Success';\n\nexport const CLEAR_ADDRESS_VERIFICATION_RESULTS =\n  '[Checkout] Clear Address Verification Results';\n\nexport class VerifyAddress implements Action {\n  readonly type = VERIFY_ADDRESS;\n  constructor(public payload: { userId: string; address: Address }) {}\n}\n\nexport class VerifyAddressFail implements Action {\n  readonly type = VERIFY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class VerifyAddressSuccess implements Action {\n  readonly type = VERIFY_ADDRESS_SUCCESS;\n  constructor(public payload: AddressValidation) {}\n}\n\nexport class ClearAddressVerificationResults implements Action {\n  readonly type = CLEAR_ADDRESS_VERIFICATION_RESULTS;\n  constructor() {}\n}\n\nexport type AddressVerificationActions =\n  | VerifyAddress\n  | VerifyAddressFail\n  | VerifyAddressSuccess\n  | ClearAddressVerificationResults;\n","import { Action } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\n\nexport const LOAD_CARD_TYPES = '[Checkout] Load Card Types';\nexport const LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';\nexport const LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';\n\nexport class LoadCardTypes implements Action {\n  readonly type = LOAD_CARD_TYPES;\n  constructor() {}\n}\n\nexport class LoadCardTypesFail implements Action {\n  readonly type = LOAD_CARD_TYPES_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadCardTypesSuccess implements Action {\n  readonly type = LOAD_CARD_TYPES_SUCCESS;\n  constructor(public payload: CardType[]) {}\n}\n\nexport type CardTypesAction =\n  | LoadCardTypes\n  | LoadCardTypesFail\n  | LoadCardTypesSuccess;\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode, Order } from '../../model/order.model';\n\nexport const CHECKOUT_FEATURE = 'checkout';\nexport const CHECKOUT_DETAILS = '[Checkout] Checkout Details';\n\nexport const SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';\nexport const SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';\nexport const SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID =\n  'setSupportedDeliveryMode';\nexport const SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';\n\nexport interface StateWithCheckout {\n  [CHECKOUT_FEATURE]: CheckoutState;\n}\n\nexport interface AddressVerificationState {\n  results: AddressValidation | string;\n}\n\nexport interface CardTypesState {\n  entities: { [code: string]: CardType };\n}\n\nexport interface CheckoutStepsState {\n  address: Address;\n  deliveryMode: {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  };\n  paymentDetails: PaymentDetails;\n  orderDetails: Order;\n}\n\nexport interface CheckoutState {\n  steps: LoaderState<CheckoutStepsState>;\n  cardTypes: CardTypesState;\n  addressVerification: AddressVerificationState;\n}\n","import { Action } from '@ngrx/store';\nimport { MULTI_CART_DATA } from '../../../cart/store/multi-cart-state';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { PROCESS_FEATURE } from '../../../process/store/process-state';\nimport {\n  EntityProcessesDecrementAction,\n  EntityProcessesIncrementAction,\n} from '../../../state/utils/entity-processes-loader/entity-processes-loader.action';\nimport { StateUtils } from '../../../state/utils/index';\nimport { CheckoutDetails } from '../../models/checkout.model';\nimport {\n  CHECKOUT_DETAILS,\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n} from '../checkout-state';\n\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS =\n  '[Checkout] Clear Checkout Delivery Address';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Address Success';\nexport const CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL =\n  '[Checkout] Clear Checkout Delivery Address Fail';\n\nexport const CLEAR_CHECKOUT_DELIVERY_MODE =\n  '[Checkout] Clear Checkout Delivery Mode';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS =\n  '[Checkout] Clear Checkout Delivery Mode Success';\nexport const CLEAR_CHECKOUT_DELIVERY_MODE_FAIL =\n  '[Checkout] Clear Checkout Delivery Mode Fail';\n\nexport const ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';\nexport const ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';\nexport const ADD_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Add Delivery Address Success';\n\nexport const SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';\nexport const SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';\nexport const SET_DELIVERY_ADDRESS_SUCCESS =\n  '[Checkout] Set Delivery Address Success';\nexport const RESET_SET_DELIVERY_ADDRESS_PROCESS =\n  '[Checkout] Reset Set Delivery Address Process';\n\nexport const LOAD_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Load Supported Delivery Modes';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Load Supported Delivery Modes Fail';\nexport const LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Load Supported Delivery Modes Success';\nexport const CLEAR_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Clear Supported Delivery Modes';\n\nexport const SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';\nexport const SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';\nexport const SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';\nexport const RESET_SET_DELIVERY_MODE_PROCESS =\n  '[Checkout] Reset Set Delivery Mode Process';\n\nexport const SET_SUPPORTED_DELIVERY_MODES =\n  '[Checkout] Set Supported Delivery Modes';\nexport const SET_SUPPORTED_DELIVERY_MODES_FAIL =\n  '[Checkout] Set Supported Delivery Modes Fail';\nexport const SET_SUPPORTED_DELIVERY_MODES_SUCCESS =\n  '[Checkout] Set Supported Delivery Modes Success';\nexport const RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS =\n  '[Checkout] Reset Set Supported Delivery Modes Process';\n\nexport const CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';\nexport const CREATE_PAYMENT_DETAILS_FAIL =\n  '[Checkout] Create Payment Details Fail';\nexport const CREATE_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Create Payment Details Success';\n\nexport const SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';\nexport const SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';\nexport const SET_PAYMENT_DETAILS_SUCCESS =\n  '[Checkout] Set Payment Details Success';\nexport const RESET_SET_PAYMENT_DETAILS_PROCESS =\n  '[Checkout] Reset Set Payment Details Process';\n\nexport const PLACE_ORDER = '[Checkout] Place Order';\nexport const PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';\nexport const PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';\n\nexport const CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';\nexport const CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';\n\nexport const LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';\nexport const LOAD_CHECKOUT_DETAILS_FAIL =\n  '[Checkout] Load Checkout Details Fail';\nexport const LOAD_CHECKOUT_DETAILS_SUCCESS =\n  '[Checkout] Load Checkout Details Success';\n\nexport const CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';\nexport const PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';\n\nexport class AddDeliveryAddress implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {}\n}\n\nexport class AddDeliveryAddressFail implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class AddDeliveryAddressSuccess implements Action {\n  readonly type = ADD_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {}\n}\n\nexport class SetDeliveryAddress extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_ADDRESS;\n  constructor(\n    public payload: { userId: string; cartId: string; address: Address }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryAddressFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryAddressSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_ADDRESS_SUCCESS;\n  constructor(public payload: Address) {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryAddressProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_ADDRESS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModes extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class LoadSupportedDeliveryModesSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;\n  constructor(public payload: DeliveryMode[]) {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetLoadSupportedDeliveryModesProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryMode extends StateUtils.EntityLoadAction {\n  readonly type = SET_DELIVERY_MODE;\n  constructor(\n    public payload: { userId: string; cartId: string; selectedModeId: string }\n  ) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class SetDeliveryModeFail extends StateUtils.EntityFailAction {\n  readonly type = SET_DELIVERY_MODE_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload);\n  }\n}\n\nexport class SetDeliveryModeSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: string) {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class ResetSetDeliveryModeProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_DELIVERY_MODE_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = CREATE_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = CREATE_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class CreatePaymentDetailsSuccess implements Action {\n  readonly type = CREATE_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {}\n}\n\nexport class PaymentProcessSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = PAYMENT_PROCESS_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetails extends StateUtils.EntityLoadAction {\n  readonly type = SET_PAYMENT_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      paymentDetails: PaymentDetails;\n    }\n  ) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class SetPaymentDetailsFail extends StateUtils.EntityFailAction {\n  readonly type = SET_PAYMENT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload);\n  }\n}\n\nexport class SetPaymentDetailsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SET_PAYMENT_DETAILS_SUCCESS;\n  constructor(public payload: PaymentDetails) {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class ResetSetPaymentDetailsProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_SET_PAYMENT_DETAILS_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID);\n  }\n}\n\nexport class PlaceOrder implements Action {\n  readonly type = PLACE_ORDER;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class PlaceOrderFail implements Action {\n  readonly type = PLACE_ORDER_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class PlaceOrderSuccess implements Action {\n  readonly type = PLACE_ORDER_SUCCESS;\n  constructor(public payload: Order) {}\n}\n\nexport class ClearSupportedDeliveryModes implements Action {\n  readonly type = CLEAR_SUPPORTED_DELIVERY_MODES;\n}\n\nexport class ClearCheckoutStep implements Action {\n  readonly type = CLEAR_CHECKOUT_STEP;\n  constructor(public payload: number) {}\n}\n\nexport class ClearCheckoutData implements Action {\n  readonly type = CLEAR_CHECKOUT_DATA;\n}\n\nexport class LoadCheckoutDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_CHECKOUT_DETAILS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class LoadCheckoutDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(CHECKOUT_DETAILS, payload);\n  }\n}\n\nexport class LoadCheckoutDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_CHECKOUT_DETAILS_SUCCESS;\n  constructor(public payload: CheckoutDetails) {\n    super(CHECKOUT_DETAILS);\n  }\n}\n\nexport class CheckoutClearMiscsData implements Action {\n  readonly type = CHECKOUT_CLEAR_MISCS_DATA;\n}\n\nexport class ClearCheckoutDeliveryAddress implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;\n  constructor(public payload: { userId: string; cartId: string }) {}\n}\n\nexport class ClearCheckoutDeliveryAddressSuccess implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;\n  constructor() {}\n}\n\nexport class ClearCheckoutDeliveryAddressFail implements Action {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class ClearCheckoutDeliveryMode extends EntityProcessesIncrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeSuccess extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;\n  constructor(public payload: { userId: string; cartId: string }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class ClearCheckoutDeliveryModeFail extends EntityProcessesDecrementAction {\n  readonly type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport type CheckoutAction =\n  | AddDeliveryAddress\n  | AddDeliveryAddressFail\n  | AddDeliveryAddressSuccess\n  | SetDeliveryAddress\n  | SetDeliveryAddressFail\n  | SetDeliveryAddressSuccess\n  | ResetSetDeliveryAddressProcess\n  | LoadSupportedDeliveryModes\n  | LoadSupportedDeliveryModesFail\n  | LoadSupportedDeliveryModesSuccess\n  | SetDeliveryMode\n  | SetDeliveryModeFail\n  | SetDeliveryModeSuccess\n  | ResetSetDeliveryModeProcess\n  | ClearSupportedDeliveryModes\n  | CreatePaymentDetails\n  | CreatePaymentDetailsFail\n  | CreatePaymentDetailsSuccess\n  | SetPaymentDetails\n  | SetPaymentDetailsFail\n  | SetPaymentDetailsSuccess\n  | ResetSetPaymentDetailsProcess\n  | PlaceOrder\n  | PlaceOrderFail\n  | PlaceOrderSuccess\n  | ClearCheckoutStep\n  | ClearCheckoutData\n  | ClearCheckoutDeliveryAddress\n  | ClearCheckoutDeliveryAddressFail\n  | ClearCheckoutDeliveryAddressSuccess\n  | ClearCheckoutDeliveryMode\n  | ClearCheckoutDeliveryModeFail\n  | ClearCheckoutDeliveryModeSuccess\n  | LoadCheckoutDetails\n  | LoadCheckoutDetailsFail\n  | LoadCheckoutDetailsSuccess\n  | CheckoutClearMiscsData;\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart } from '../../../model/cart.model';\nimport { CartAdapter } from './cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConnector {\n  constructor(protected adapter: CartAdapter) {}\n\n  public loadAll(userId: string): Observable<Cart[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  public load(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  public create(\n    userId: string,\n    oldCartId?: string,\n    toMergeCartGuid?: string\n  ): Observable<Cart> {\n    return this.adapter.create(userId, oldCartId, toMergeCartGuid);\n  }\n\n  public delete(userId: string, cartId: string): Observable<{}> {\n    return this.adapter.delete(userId, cartId);\n  }\n\n  public addEmail(\n    userId: string,\n    cartId: string,\n    email: string\n  ): Observable<{}> {\n    return this.adapter.addEmail(userId, cartId, email);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutActions } from '../../../checkout/store/actions';\nimport { Cart } from '../../../model/cart.model';\nimport { OCC_CART_ID_CURRENT } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';\nimport { CartActions } from '../actions/index';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';\n\n@Injectable()\nexport class CartEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  loadCart$: Observable<\n    | CartActions.LoadCartFail\n    | CartActions.LoadCartSuccess\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_CART),\n    map((action: CartActions.LoadCart) => action.payload),\n    groupBy((payload) => payload.cartId),\n    mergeMap((group$) =>\n      group$.pipe(\n        switchMap((payload) => {\n          return of(payload).pipe(\n            withLatestFrom(\n              this.store.pipe(\n                select(\n                  getCartHasPendingProcessesSelectorFactory(payload.cartId)\n                )\n              )\n            )\n          );\n        }),\n        filter(([_, hasPendingProcesses]) => !hasPendingProcesses),\n        map(([payload]) => payload),\n        switchMap((payload) => {\n          return this.cartConnector.load(payload.userId, payload.cartId).pipe(\n            mergeMap((cart: Cart) => {\n              let actions = [];\n              if (cart) {\n                actions.push(\n                  new CartActions.LoadCartSuccess({\n                    ...payload,\n                    cart,\n                    cartId: getCartIdByUserId(cart, payload.userId),\n                  })\n                );\n\n                if (payload.cartId === OCC_CART_ID_CURRENT) {\n                  // Removing cart from entity object under `current` key as it is no longer needed.\n                  // Current cart is loaded under it's code entity.\n                  actions.push(\n                    new CartActions.RemoveCart({ cartId: OCC_CART_ID_CURRENT })\n                  );\n                }\n              } else {\n                actions = [\n                  new CartActions.LoadCartFail({\n                    ...payload,\n                    error: {},\n                  }),\n                ];\n              }\n              return actions;\n            }),\n            catchError((error) => {\n              if (error?.error?.errors) {\n                const couponExpiredErrors = error.error.errors.filter(\n                  (err) => err.reason === 'invalid'\n                );\n                if (couponExpiredErrors.length > 0) {\n                  // Reload in case of expired coupon.\n                  return of(new CartActions.LoadCart({ ...payload }));\n                }\n\n                const cartNotFoundErrors = error.error.errors.filter(\n                  (err) =>\n                    isCartNotFoundError(err) ||\n                    err.reason === 'UnknownResourceError'\n                );\n                if (cartNotFoundErrors.length > 0) {\n                  // Remove cart as it doesn't exist on backend (selective cart always exists).\n                  return of(\n                    new CartActions.RemoveCart({ cartId: payload.cartId })\n                  );\n                }\n              }\n              return of(\n                new CartActions.LoadCartFail({\n                  ...payload,\n                  error: makeErrorSerializable(error),\n                })\n              );\n            })\n          );\n        })\n      )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createCart$: Observable<\n    | CartActions.MergeCartSuccess\n    | CartActions.CreateCartSuccess\n    | CartActions.CreateCartFail\n    | CartActions.SetTempCart\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_CART),\n    map((action: CartActions.CreateCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector\n        .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)\n        .pipe(\n          switchMap((cart: Cart) => {\n            const conditionalActions = [];\n            if (payload.oldCartId) {\n              conditionalActions.push(\n                new CartActions.MergeCartSuccess({\n                  extraData: payload.extraData,\n                  userId: payload.userId,\n                  tempCartId: payload.tempCartId,\n                  cartId: getCartIdByUserId(cart, payload.userId),\n                  oldCartId: payload.oldCartId,\n                })\n              );\n            }\n            return [\n              new CartActions.CreateCartSuccess({\n                ...payload,\n                cart,\n                cartId: getCartIdByUserId(cart, payload.userId),\n              }),\n              new CartActions.SetTempCart({\n                cart,\n                tempCartId: payload.tempCartId,\n              }),\n              ...conditionalActions,\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CartActions.CreateCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              })\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  mergeCart$: Observable<CartActions.CreateCart> = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART),\n    map((action: CartActions.MergeCart) => action.payload),\n    mergeMap((payload) => {\n      return this.cartConnector.load(payload.userId, OCC_CART_ID_CURRENT).pipe(\n        mergeMap((currentCart) => {\n          return [\n            new CartActions.CreateCart({\n              userId: payload.userId,\n              oldCartId: payload.cartId,\n              toMergeCartGuid: currentCart ? currentCart.guid : undefined,\n              extraData: payload.extraData,\n              tempCartId: payload.tempCartId,\n            }),\n          ];\n        })\n      );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions\n  @Effect()\n  refresh$: Observable<\n    CartActions.LoadCart | CartActions.CartProcessesDecrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER_SUCCESS),\n    map((action: CartActions.CartAddVoucherSuccess) => action.payload),\n    concatMap((payload) =>\n      from([\n        new CartActions.CartProcessesDecrement(payload.cartId),\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        }),\n      ])\n    )\n  );\n\n  // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity\n  @Effect()\n  refreshWithoutProcesses$: Observable<\n    CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(\n      CartActions.CART_ADD_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_ENTRY_SUCCESS,\n      CartActions.CART_UPDATE_ENTRY_SUCCESS,\n      CartActions.CART_REMOVE_VOUCHER_SUCCESS,\n      CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS\n    ),\n    map(\n      (\n        action:\n          | CartActions.CartAddEntrySuccess\n          | CartActions.CartUpdateEntrySuccess\n          | CartActions.CartRemoveEntrySuccess\n          | CartActions.CartRemoveVoucherSuccess\n          | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n      ) => action.payload\n    ),\n    map(\n      (payload) =>\n        new CartActions.LoadCart({\n          userId: payload.userId,\n          cartId: payload.cartId,\n        })\n    )\n  );\n\n  @Effect()\n  resetCartDetailsOnSiteContextChange$: Observable<\n    CartActions.ResetCartDetails\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    mergeMap(() => {\n      return [new CartActions.ResetCartDetails()];\n    })\n  );\n\n  @Effect()\n  addEmail$: Observable<\n    | CartActions.AddEmailToCartSuccess\n    | CartActions.AddEmailToCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.ADD_EMAIL_TO_CART),\n    map((action: CartActions.AddEmailToCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector\n        .addEmail(payload.userId, payload.cartId, payload.email)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CartActions.AddEmailToCartSuccess({\n                ...payload,\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            from([\n              new CartActions.AddEmailToCartFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ])\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  deleteCart$: Observable<\n    | CartActions.DeleteCartSuccess\n    | CartActions.DeleteCartFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CartActions.DELETE_CART),\n    map((action: CartActions.DeleteCart) => action.payload),\n    mergeMap((payload) =>\n      this.cartConnector.delete(payload.userId, payload.cartId).pipe(\n        map(() => {\n          return new CartActions.DeleteCartSuccess({ ...payload });\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.DeleteCartFail({\n              ...payload,\n              error: makeErrorSerializable(error),\n            }),\n            // Error might happen in higher backend layer and cart could still be removed.\n            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.\n            new CartActions.LoadCart({\n              ...payload,\n            }),\n          ])\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SaveCartResult } from '../../../model/cart.model';\nimport { SaveCartAdapter } from './save-cart.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SaveCartConnector {\n  constructor(protected adapter: SaveCartAdapter) {}\n\n  public saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<SaveCartResult> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY, from, Observable } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../../auth/facade/auth.service';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CartConnector } from '../../connectors/cart/cart.connector';\nimport { SaveCartConnector } from '../../connectors/save-cart/save-cart.connecter';\nimport { getCartIdByUserId, getWishlistName } from '../../utils/utils';\nimport { CartActions } from '../actions';\nimport { StateWithMultiCart } from '../multi-cart-state';\nimport { MultiCartSelectors } from '../selectors';\n\n@Injectable()\nexport class WishListEffects {\n  @Effect()\n  createWishList$: Observable<\n    CartActions.CreateWishListSuccess | CartActions.CreateWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.CREATE_WISH_LIST),\n    map((action: CartActions.CreateWishList) => action.payload),\n    switchMap((payload) => {\n      return this.cartConnector.create(payload.userId).pipe(\n        switchMap((cart) => {\n          return this.saveCartConnector\n            .saveCart(\n              payload.userId,\n              cart.code,\n              payload.name,\n              payload.description\n            )\n            .pipe(\n              switchMap((saveCartResult) => [\n                new CartActions.CreateWishListSuccess({\n                  cart: saveCartResult.savedCartData,\n                  userId: payload.userId,\n                }),\n              ]),\n              catchError((error) =>\n                from([\n                  new CartActions.CreateWishListFail({\n                    cartId: cart.code,\n                    error: makeErrorSerializable(error),\n                  }),\n                ])\n              )\n            );\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadWishList$: Observable<\n    | CartActions.LoadWishListSuccess\n    | CartActions.RemoveCart\n    | CartActions.CreateWishList\n    | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(CartActions.LOAD_WISH_LIST),\n    map((action: CartActions.LoadWishList) => action.payload),\n    concatMap((payload) => {\n      const { userId, customerId, tempCartId } = payload;\n      return this.cartConnector.loadAll(userId).pipe(\n        switchMap((carts) => {\n          if (carts) {\n            const wishList = carts.find(\n              (cart) => cart.name === getWishlistName(customerId)\n            );\n            if (Boolean(wishList)) {\n              return [\n                new CartActions.LoadWishListSuccess({\n                  cart: wishList,\n                  userId,\n                  tempCartId,\n                  customerId,\n                  cartId: getCartIdByUserId(wishList, userId),\n                }),\n                new CartActions.RemoveCart({ cartId: tempCartId }),\n              ];\n            } else {\n              return [\n                new CartActions.CreateWishList({\n                  userId,\n                  name: getWishlistName(customerId),\n                }),\n              ];\n            }\n          }\n        }),\n        catchError((error) =>\n          from([\n            new CartActions.LoadWishListFail({\n              userId,\n              cartId: tempCartId,\n              customerId,\n              error: makeErrorSerializable(error),\n            }),\n          ])\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetWishList$: Observable<\n    CartActions.LoadWishListSuccess | CartActions.LoadWishListFail\n  > = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    withLatestFrom(\n      this.authService.getOccUserId(),\n      this.store.pipe(select(MultiCartSelectors.getWishListId))\n    ),\n    switchMap(([, userId, wishListId]) => {\n      if (Boolean(wishListId)) {\n        return this.cartConnector.load(userId, wishListId).pipe(\n          switchMap((wishList) => [\n            new CartActions.LoadWishListSuccess({\n              cart: wishList,\n              userId,\n              cartId: getCartIdByUserId(wishList, userId),\n            }),\n          ]),\n          catchError((error) =>\n            from([\n              new CartActions.LoadWishListFail({\n                userId,\n                cartId: wishListId,\n                error: makeErrorSerializable(error),\n              }),\n            ])\n          )\n        );\n      }\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartConnector: CartConnector,\n    private saveCartConnector: SaveCartConnector,\n    private authService: AuthService,\n    private store: Store<StateWithMultiCart>\n  ) {}\n}\n","import { Cart } from '../../../model/cart.model';\nimport { LoaderAction } from '../../../state/utils/loader/loader.action';\nimport { CartActions } from '../actions/index';\n\nexport const activeCartInitialState = '';\nexport const wishListInitialState = '';\n\nexport function activeCartReducer(\n  state = activeCartInitialState,\n  action: CartActions.CartAction | CartActions.MultiCartActions\n): string {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    // point to `temp-${uuid}` cart when we are creating/merging cart\n    case CartActions.CREATE_CART:\n      if (action?.payload?.extraData?.active) {\n        return action.meta.entityId as string;\n      } else {\n        return state;\n      }\n    case CartActions.SET_ACTIVE_CART_ID:\n      return action.payload;\n    case CartActions.REMOVE_CART:\n    case CartActions.DELETE_CART_SUCCESS:\n      if (action.payload?.cartId === state) {\n        return activeCartInitialState;\n      }\n      return state;\n    case CartActions.CLEAR_CART_STATE:\n      return activeCartInitialState;\n  }\n  return state;\n}\n\nexport const cartEntitiesInitialState = undefined;\n\nexport function cartEntitiesReducer(\n  state = cartEntitiesInitialState,\n  action: LoaderAction\n): Cart {\n  switch (action.type) {\n    case CartActions.LOAD_CART_SUCCESS:\n    case CartActions.CREATE_CART_SUCCESS:\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n    case CartActions.SET_TEMP_CART:\n      return action.payload.cart;\n  }\n  return state;\n}\n\nexport function wishListReducer(\n  state = wishListInitialState,\n  action: CartActions.WishListActions | CartActions.ClearCartState\n): string {\n  switch (action.type) {\n    case CartActions.CREATE_WISH_LIST_SUCCESS:\n    case CartActions.LOAD_WISH_LIST_SUCCESS:\n      return action.meta.entityId as string;\n    case CartActions.CLEAR_CART_STATE:\n      return wishListInitialState;\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Cart } from '../../../model/cart.model';\nimport { entityProcessesLoaderReducer } from '../../../state/utils/entity-processes-loader/entity-processes-loader.reducer';\nimport { MultiCartState, MULTI_CART_DATA } from '../multi-cart-state';\nimport {\n  activeCartReducer,\n  cartEntitiesReducer,\n  wishListReducer,\n} from './multi-cart.reducer';\n\nexport function clearMultiCartState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const multiCartMetaReducers: MetaReducer<any>[] = [clearMultiCartState];\n\nexport const multiCartReducerToken: InjectionToken<ActionReducerMap<\n  MultiCartState\n>> = new InjectionToken<ActionReducerMap<MultiCartState>>('MultiCartReducers');\n\nexport function getMultiCartReducers(): ActionReducerMap<MultiCartState> {\n  return {\n    carts: entityProcessesLoaderReducer<Cart>(\n      MULTI_CART_DATA,\n      cartEntitiesReducer\n    ),\n    active: activeCartReducer,\n    wishList: wishListReducer,\n  };\n}\n\nexport const multiCartReducerProvider: Provider = {\n  provide: multiCartReducerToken,\n  useFactory: getMultiCartReducers,\n};\n","import { OrderEntry } from '../../model/order.model';\n\n/**\n * Base cart event. Most cart events should have `cartId` and `userId`.\n */\nexport interface CartEvent {\n  cartId: string;\n  userId: string;\n}\n\n// =====================================================================\n\nexport class CartAddEntryEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n\nexport class CartAddEntrySuccessEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n  entry: OrderEntry;\n  quantityAdded: number;\n  deliveryModeChanged: boolean;\n}\n\nexport class CartAddEntryFailEvent implements CartEvent {\n  cartId: string;\n  userId: string;\n  productCode: string;\n  quantity: number;\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { EventService } from '../../event/event.service';\nimport { ActionToEventMapping } from '../../state/event/action-to-event-mapping';\nimport { createFrom } from '../../util/create-from';\nimport { ActiveCartService } from '../facade/active-cart.service';\nimport { CartActions } from '../store';\nimport {\n  CartAddEntryEvent,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n} from './cart.events';\n\n/**\n * Registers events for the active cart\n */\n@Injectable({ providedIn: 'root' })\nexport class CartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected event: EventService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the active cart\n   */\n  protected register() {\n    this.registerAddEntry();\n  }\n\n  /**\n   * Register events for adding entry to the active cart\n   */\n  protected registerAddEntry() {\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY,\n      event: CartAddEntryEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_SUCCESS,\n      event: CartAddEntrySuccessEvent,\n    });\n    this.registerMapped({\n      action: CartActions.CART_ADD_ENTRY_FAIL,\n      event: CartAddEntryFailEvent,\n    });\n  }\n\n  /**\n   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.\n   *\n   * @param mapping mapping declaration - from `action` string type to `event` class type\n   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).\n   */\n  protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      withLatestFrom(this.activeCartService.getActiveCartId()),\n      filter(\n        ([action, activeCartId]) => action.payload['cartId'] === activeCartId // assuming that action's payload contains the cart id\n      ),\n      map(([action]) => createFrom(mapping.event, action.payload))\n    );\n\n    return this.event.register(mapping.event, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartEventBuilder } from './cart-event.builder';\n\n@NgModule({})\nexport class CartEventModule {\n  constructor(_CartEventBuilder: CartEventBuilder) {}\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../../auth/index';\nimport * as fromProcessStore from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { CartActions } from '../store/actions/index';\nimport { ADD_VOUCHER_PROCESS_ID } from '../store/multi-cart-state';\nimport { ActiveCartService } from './active-cart.service';\n\n@Injectable()\nexport class CartVoucherService {\n  constructor(\n    protected store: Store<fromProcessStore.StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  addVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartAddVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  removeVoucher(voucherId: string, cartId?: string): void {\n    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) =>\n      this.store.dispatch(\n        new CartActions.CartRemoveVoucher({\n          userId: occUserId,\n          cartId: cartIdentifier,\n          voucherId: voucherId,\n        })\n      )\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process error flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process success flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Get add voucher process loading flag\n   * @deprecated since 2.0\n   */\n  getAddVoucherResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID))\n    );\n  }\n\n  // TODO(#7241): Remove when switching to event system for add voucher\n  /**\n   * Reset add voucher process\n   * @deprecated since 2.0\n   */\n  resetAddVoucherProcessingState(): void {\n    this.store.dispatch(new CartActions.CartResetAddVoucher());\n  }\n\n  private combineUserAndCartId(cartId: string): Observable<[string, string]> {\n    if (cartId) {\n      return this.authService.getOccUserId().pipe(\n        take(1),\n        map((userId) => [userId, cartId])\n      );\n    } else {\n      return combineLatest([\n        this.authService.getOccUserId(),\n        this.activeCartService.getActiveCartId(),\n      ]).pipe(take(1));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Title, User, UserSignUp } from '../../model/misc.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/index';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  REGISTER_USER_PROCESS_ID,\n  REMOVE_USER_PROCESS_ID,\n  StateWithUser,\n  UPDATE_EMAIL_PROCESS_ID,\n  UPDATE_PASSWORD_PROCESS_ID,\n  UPDATE_USER_DETAILS_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns a user\n   */\n  get(): Observable<User> {\n    return this.store.pipe(\n      select(UsersSelectors.getDetails),\n      tap((details) => {\n        if (Object.keys(details).length === 0) {\n          this.load();\n        }\n      })\n    );\n  }\n\n  /**\n   * Loads the user's details\n   */\n  load(): void {\n    this.authService.invokeWithUserId((userId) => {\n      if (userId !== OCC_USER_ID_ANONYMOUS) {\n        this.store.dispatch(new UserActions.LoadUserDetails(userId));\n      }\n    });\n  }\n\n  /**\n   * Register a new user\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n  register(userRegisterFormData: UserSignUp): void {\n    this.store.dispatch(new UserActions.RegisterUser(userRegisterFormData));\n  }\n\n  /**\n   * Register a new user from guest\n   *\n   * @param guid\n   * @param password\n   */\n  registerGuest(guid: string, password: string): void {\n    this.store.dispatch(new UserActions.RegisterGuest({ guid, password }));\n  }\n\n  /**\n   * Returns the register user process loading flag\n   */\n  getRegisterUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process success flag\n   */\n  getRegisterUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the register user process error flag\n   */\n  getRegisterUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REGISTER_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the register user process flags\n   */\n  resetRegisterUserProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetRegisterUserProcess());\n  }\n\n  /**\n   * Remove user account, that's also called close user's account\n   */\n  remove(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.RemoveUser(userId));\n    });\n  }\n\n  /**\n   * Returns the remove user loading flag\n   */\n  getRemoveUserResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user failure outcome.\n   */\n  getRemoveUserResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the remove user process success outcome.\n   */\n  getRemoveUserResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_USER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the remove user process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetRemoveUserProcessState(): void {\n    this.store.dispatch(new UserActions.RemoveUserReset());\n  }\n\n  /**\n   * Returns titles\n   */\n  getTitles(): Observable<Title[]> {\n    return this.store.pipe(select(UsersSelectors.getAllTitles));\n  }\n\n  /**\n   * Retrieves titles\n   */\n  loadTitles(): void {\n    this.store.dispatch(new UserActions.LoadTitles());\n  }\n\n  /**\n   * Return whether user's password is successfully reset\n   */\n  isPasswordReset(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getResetPassword));\n  }\n\n  /**\n   * Updates the user's details\n   * @param userDetails to be updated\n   */\n  updatePersonalDetails(userDetails: User): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserDetails({\n          username: userId,\n          userDetails,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's personal details loading flag\n   */\n  getUpdatePersonalDetailsResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details error flag\n   */\n  getUpdatePersonalDetailsResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's personal details success flag\n   */\n  getUpdatePersonalDetailsResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_USER_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user details processing state\n   */\n  resetUpdatePersonalDetailsProcessingState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateUserDetails());\n  }\n\n  /**\n   * Reset new password.  Part of the forgot password flow.\n   * @param token\n   * @param password\n   */\n  resetPassword(token: string, password: string): void {\n    this.store.dispatch(new UserActions.ResetPassword({ token, password }));\n  }\n\n  /*\n   * Request an email to reset a forgotten password.\n   */\n  requestForgotPasswordEmail(userEmailAddress: string): void {\n    this.store.dispatch(\n      new UserActions.ForgotPasswordEmailRequest(userEmailAddress)\n    );\n  }\n\n  /**\n   * Updates the user's email\n   */\n  updateEmail(password: string, newUid: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateEmailAction({\n          uid: userId,\n          password,\n          newUid,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update user's email success flag\n   */\n  getUpdateEmailResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email error flag\n   */\n  getUpdateEmailResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update user's email loading flag\n   */\n  getUpdateEmailResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_EMAIL_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update user's email processing state\n   */\n  resetUpdateEmailResultState(): void {\n    this.store.dispatch(new UserActions.ResetUpdateEmailAction());\n  }\n\n  /**\n   * Updates the password for the user\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n  updatePassword(oldPassword: string, newPassword: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdatePassword({\n          userId,\n          oldPassword,\n          newPassword,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the update password loading flag\n   */\n  getUpdatePasswordResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password failure outcome.\n   */\n  getUpdatePasswordResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the update password process success outcome.\n   */\n  getUpdatePasswordResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UPDATE_PASSWORD_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the update password process state. The state needs to be reset after the process\n   * concludes, regardless if it's a success or an error\n   */\n  resetUpdatePasswordProcessState(): void {\n    this.store.dispatch(new UserActions.UpdatePasswordReset());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CartConfig {\n  cart?: {\n    selectiveCart?: {\n      enabled?: boolean;\n    };\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { CartConfig } from '../config/cart-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartConfigService {\n  constructor(protected config: CartConfig) {}\n\n  isSelectiveCartEnabled(): boolean {\n    return Boolean(this.config?.cart?.selectiveCart?.enabled);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart } from '../../model/cart.model';\nimport { OrderEntry } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartConfigService } from '../services/cart-config.service';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class SelectiveCartService {\n  private customerId: string;\n  private userId: string;\n  private cartId: string;\n  private selectiveCart$: Observable<Cart>;\n  private cartId$: BehaviorSubject<string> = new BehaviorSubject<string>(\n    undefined\n  );\n\n  private readonly PREVIOUS_USER_ID_INITIAL_VALUE =\n    'PREVIOUS_USER_ID_INITIAL_VALUE';\n  private previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;\n\n  private cartSelector$ = this.cartId$.pipe(\n    switchMap((cartId) => {\n      this.cartId = cartId;\n      return this.multiCartService.getCartEntity(cartId);\n    })\n  );\n\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected userService: UserService,\n    protected authService: AuthService,\n    protected multiCartService: MultiCartService,\n    protected baseSiteService: BaseSiteService,\n    protected cartConfigService: CartConfigService\n  ) {\n    combineLatest([\n      this.userService.get(),\n      this.baseSiteService.getActive(),\n    ]).subscribe(([user, activeBaseSite]) => {\n      if (user && user.customerId && activeBaseSite) {\n        this.customerId = user.customerId;\n        this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);\n      } else if (user && !user.customerId) {\n        this.cartId$.next(undefined);\n      }\n    });\n\n    this.authService.getOccUserId().subscribe((userId) => {\n      this.userId = userId;\n\n      if (this.isJustLoggedIn(userId)) {\n        this.load();\n      }\n\n      this.previousUserId = userId;\n    });\n\n    this.selectiveCart$ = this.cartSelector$.pipe(\n      map((cartEntity: LoaderState<Cart>): {\n        cart: Cart;\n        loading: boolean;\n        loaded: boolean;\n      } => {\n        return {\n          cart: cartEntity.value,\n          loading: cartEntity.loading,\n          loaded:\n            (cartEntity.error || cartEntity.success) && !cartEntity.loading,\n        };\n      }),\n      filter(({ loading }) => !loading),\n      tap(({ cart, loaded }) => {\n        if (this.cartId && this.isEmpty(cart) && !loaded) {\n          this.load();\n        }\n      }),\n      map(({ cart }) => (cart ? cart : {})),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getCart(): Observable<Cart> {\n    return this.selectiveCart$;\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.multiCartService.getEntries(this.cartId);\n  }\n\n  getLoaded(): Observable<boolean> {\n    return this.cartSelector$.pipe(\n      map((cart) => (cart.success || cart.error) && !cart.loading)\n    );\n  }\n\n  private load() {\n    if (this.isLoggedIn(this.userId) && this.cartId) {\n      this.multiCartService.loadCart({\n        userId: this.userId,\n        cartId: this.cartId,\n      });\n    }\n  }\n\n  addEntry(productCode: string, quantity: number): void {\n    let loadAttempted = false;\n    this.cartSelector$\n      .pipe(\n        filter(() => !loadAttempted),\n        switchMap((cartState) => {\n          if (this.isEmpty(cartState.value) && !cartState.loading) {\n            loadAttempted = true;\n            this.load();\n          }\n          return of(cartState);\n        }),\n        filter((cartState) => !this.isEmpty(cartState.value)),\n        take(1)\n      )\n      .subscribe(() => {\n        this.multiCartService.addEntry(\n          this.userId,\n          this.cartId,\n          productCode,\n          quantity\n        );\n      });\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.multiCartService.removeEntry(\n      this.userId,\n      this.cartId,\n      entry.entryNumber\n    );\n  }\n\n  updateEntry(entryNumber: number, quantity: number): void {\n    this.multiCartService.updateEntry(\n      this.userId,\n      this.cartId,\n      entryNumber,\n      quantity\n    );\n  }\n\n  getEntry(productCode: string): Observable<OrderEntry> {\n    return this.multiCartService.getEntry(this.cartId, productCode);\n  }\n\n  /**\n   * Indicates if selectiveCart feature is enabled based on cart configuration.\n   */\n  isEnabled(): boolean {\n    return this.cartConfigService.isSelectiveCartEnabled();\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return (\n      !cart || (typeof cart === 'object' && Object.keys(cart).length === 0)\n    );\n  }\n\n  private isJustLoggedIn(userId: string): boolean {\n    return (\n      this.isLoggedIn(userId) &&\n      this.previousUserId !== userId && // *just* logged in\n      this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization\n    );\n  }\n\n  private isLoggedIn(userId: string): boolean {\n    return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Cart, OrderEntry } from '../../model/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { UserService } from '../../user/facade/user.service';\nimport { CartActions } from '../store/actions/index';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\nimport { MultiCartSelectors } from '../store/selectors/index';\nimport { getWishlistName } from '../utils/utils';\nimport { MultiCartService } from './multi-cart.service';\n\n@Injectable()\nexport class WishListService {\n  constructor(\n    protected store: Store<StateWithMultiCart>,\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService\n  ) {}\n\n  createWishList(userId: string, name?: string, description?: string): void {\n    this.store.dispatch(\n      new CartActions.CreateWishList({ userId, name, description })\n    );\n  }\n\n  getWishList(): Observable<Cart> {\n    return combineLatest([\n      this.getWishListId(),\n      this.userService.get(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      distinctUntilChanged(),\n      tap(([wishListId, user, userId]) => {\n        if (\n          !Boolean(wishListId) &&\n          userId !== OCC_USER_ID_ANONYMOUS &&\n          Boolean(user) &&\n          Boolean(user.customerId)\n        ) {\n          this.loadWishList(userId, user.customerId);\n        }\n      }),\n      filter(([wishListId]) => Boolean(wishListId)),\n      switchMap(([wishListId]) => this.multiCartService.getCart(wishListId))\n    );\n  }\n\n  loadWishList(userId: string, customerId: string): void {\n    this.store.dispatch(\n      new CartActions.LoadWishList({\n        userId,\n        customerId,\n        tempCartId: getWishlistName(customerId),\n      })\n    );\n  }\n\n  addEntry(productCode: string): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.addEntry(userId, wishListId, productCode, 1)\n      );\n  }\n\n  removeEntry(entry: OrderEntry): void {\n    this.getWishListId()\n      .pipe(\n        distinctUntilChanged(),\n        withLatestFrom(this.authService.getOccUserId(), this.userService.get()),\n        tap(([wishListId, userId, user]) => {\n          if (\n            !Boolean(wishListId) &&\n            Boolean(user) &&\n            Boolean(user.customerId)\n          ) {\n            this.loadWishList(userId, user.customerId);\n          }\n        }),\n        filter(([wishListId]) => Boolean(wishListId)),\n        take(1)\n      )\n      .subscribe(([wishListId, userId]) =>\n        this.multiCartService.removeEntry(userId, wishListId, entry.entryNumber)\n      );\n  }\n\n  getWishListLoading(): Observable<boolean> {\n    return this.getWishListId().pipe(\n      switchMap((wishListId) =>\n        this.multiCartService\n          .isStable(wishListId)\n          .pipe(map((stable) => !stable))\n      )\n    );\n  }\n\n  protected getWishListId(): Observable<string> {\n    return this.store.pipe(select(MultiCartSelectors.getWishListId));\n  }\n}\n","import { CmsComponent } from '../../model';\nimport { StateUtils } from '../../state/index';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\n\nexport const CMS_FEATURE = 'cms';\nexport const NAVIGATION_DETAIL_ENTITY = '[Cms] Navigation Entity';\nexport const COMPONENT_ENTITY = '[Cms] Component Entity';\n\nexport interface StateWithCms {\n  [CMS_FEATURE]: CmsState;\n}\n\nexport type ComponentsState = StateUtils.EntityState<ComponentsContext>;\n\nexport interface ComponentsContext {\n  component: CmsComponent;\n  /**\n   * Page context stores an information for which context does the component exist.\n   * For example, if `SiteLogoComponent` was successfully loaded for a product page with an ID of 1776948, then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * }\n   * ```\n   *\n   * If the same `SiteLogoComponent` component was tried to be loaded on homepage (page context id is `homepage`),\n   * and it doesn't exist for some reason (maybe it has a restriction), then this object will contain:\n   *\n   * ```ts\n   * ProductPage-1776948: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` property indicates that the component exists for the given page context.\n   *  value: true\n   * },\n   * ContentPage-homepage: {\n   *  success: true,\n   *  loading: false,\n   *  error: false,\n   *  // The `value` in this case is `false` indicating that the component was tried to be loaded, but it doesn't exist or has a restriction.\n   *  value: false\n   * }\n   * ```\n   *\n   */\n  pageContext: {\n    [context: string]: StateUtils.LoaderState<boolean>;\n  };\n}\n\nexport type IndexType = {\n  content: StateUtils.EntityLoaderState<string>;\n  product: StateUtils.EntityLoaderState<string>;\n  category: StateUtils.EntityLoaderState<string>;\n  catalog: StateUtils.EntityLoaderState<string>;\n};\n\nexport interface NavigationNodes {\n  [nodeId: string]: NodeItem;\n}\n\nexport interface PageState {\n  pageData: StateUtils.EntityState<Page>;\n  index: IndexType;\n}\n\nexport interface CmsState {\n  page: PageState;\n  components: ComponentsState;\n  navigation: StateUtils.EntityLoaderState<NodeItem>;\n}\n","import { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { COMPONENT_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_COMPONENT = '[Cms] Load Component';\nexport const LOAD_CMS_COMPONENT_FAIL = '[Cms] Load Component Fail';\nexport const LOAD_CMS_COMPONENT_SUCCESS = '[Cms] Load Component Success';\nexport const CMS_GET_COMPONENT_FROM_PAGE = '[Cms] Get Component from Page';\n\nexport class LoadCmsComponent extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_COMPONENT;\n  constructor(\n    public payload: {\n      uid: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid);\n  }\n}\n\nexport class LoadCmsComponentFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_COMPONENT_FAIL;\n  constructor(\n    public payload: { uid: string; error?: any; pageContext: PageContext }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid, payload.error);\n  }\n}\n\nexport class LoadCmsComponentSuccess<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_COMPONENT_SUCCESS;\n  constructor(\n    public payload: {\n      component: T;\n      uid?: string;\n      pageContext: PageContext;\n    }\n  ) {\n    super(COMPONENT_ENTITY, payload.uid || payload.component.uid || '');\n  }\n}\n\nexport class CmsGetComponentFromPage<\n  T extends CmsComponent\n> extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_GET_COMPONENT_FROM_PAGE;\n  constructor(\n    public payload:\n      | { component: T; pageContext: PageContext }\n      | { component: T; pageContext: PageContext }[]\n  ) {\n    super(\n      COMPONENT_ENTITY,\n      [].concat(payload).map((cmp) => cmp.component.uid)\n    );\n  }\n}\n\n// action types\nexport type CmsComponentAction<T extends CmsComponent> =\n  | LoadCmsComponent\n  | LoadCmsComponentFail\n  | LoadCmsComponentSuccess<T>\n  | CmsGetComponentFromPage<T>;\n","import { StateUtils } from '../../../state/utils/index';\nimport { NAVIGATION_DETAIL_ENTITY } from '../cms-state';\n\nexport const LOAD_CMS_NAVIGATION_ITEMS = '[Cms] Load NavigationEntry items';\nexport const LOAD_CMS_NAVIGATION_ITEMS_FAIL =\n  '[Cms] Load NavigationEntry items Fail';\nexport const LOAD_CMS_NAVIGATION_ITEMS_SUCCESS =\n  '[Cms] Load NavigationEntry items Success';\n\nexport class LoadCmsNavigationItems extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS;\n  constructor(public payload: { nodeId: string; items: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\nexport class LoadCmsNavigationItemsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_FAIL;\n  constructor(nodeId: string, public payload: any) {\n    super(NAVIGATION_DETAIL_ENTITY, nodeId, payload);\n  }\n}\n\nexport class LoadCmsNavigationItemsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_NAVIGATION_ITEMS_SUCCESS;\n  constructor(public payload: { nodeId: string; components: any[] }) {\n    super(NAVIGATION_DETAIL_ENTITY, payload.nodeId);\n  }\n}\n\n// action types\nexport type CmsNavigationEntryItemAction =\n  | LoadCmsNavigationItems\n  | LoadCmsNavigationItemsFail\n  | LoadCmsNavigationItemsSuccess;\n","import { PageContext } from '../../../routing/index';\nimport { StateUtils } from '../../../state/utils/index';\nimport { Page } from '../../model/page.model';\n\nexport const LOAD_CMS_PAGE_DATA = '[Cms] Load Page Data';\nexport const LOAD_CMS_PAGE_DATA_FAIL = '[Cms] Load Page Data Fail';\nexport const LOAD_CMS_PAGE_DATA_SUCCESS = '[Cms] Load Page Data Success';\nexport const CMS_SET_PAGE_SUCCESS_INDEX = '[Cms] Set Page Success Index';\nexport const CMS_SET_PAGE_FAIL_INDEX = '[Cms] Set Page Fail Index';\n\nexport class LoadCmsPageData extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_CMS_PAGE_DATA;\n  constructor(public payload: PageContext) {\n    super(payload.type, payload.id);\n  }\n}\n\nexport class LoadCmsPageDataFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_CMS_PAGE_DATA_FAIL;\n  constructor(pageContext: PageContext, error: any) {\n    super(pageContext.type, pageContext.id, error);\n  }\n}\n\nexport class LoadCmsPageDataSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_CMS_PAGE_DATA_SUCCESS;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageSuccessIndex extends StateUtils.EntitySuccessAction {\n  readonly type = CMS_SET_PAGE_SUCCESS_INDEX;\n  constructor(pageContext: PageContext, payload: Page) {\n    super(pageContext.type, pageContext.id, payload);\n  }\n}\n\nexport class CmsSetPageFailIndex extends StateUtils.EntityFailAction {\n  readonly type = CMS_SET_PAGE_FAIL_INDEX;\n  constructor(pageContext: PageContext, public payload: string) {\n    super(pageContext.type, pageContext.id);\n  }\n}\n\n// action types\nexport type CmsPageAction =\n  | LoadCmsPageData\n  | LoadCmsPageDataFail\n  | LoadCmsPageDataSuccess\n  | CmsSetPageFailIndex;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsState, CMS_FEATURE, StateWithCms } from '../cms-state';\n\nexport const getCmsState: MemoizedSelector<\n  StateWithCms,\n  CmsState\n> = createFeatureSelector<CmsState>(CMS_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ComponentsContext, ComponentsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getComponentsState: MemoizedSelector<\n  StateWithCms,\n  ComponentsState\n> = createSelector(getCmsState, (state) => state.components);\n\nexport const componentsContextSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, ComponentsContext> => {\n  return createSelector(getComponentsState, (componentsState) =>\n    StateUtils.entitySelector(componentsState, uid)\n  );\n};\n\nexport const componentsLoaderStateSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<boolean>> => {\n  return createSelector(\n    componentsContextSelectorFactory(uid),\n    (componentsContext) =>\n      (componentsContext &&\n        componentsContext.pageContext &&\n        componentsContext.pageContext[context]) ||\n      StateUtils.initialLoaderState\n  );\n};\n\n/**\n * This selector will return:\n *   - true: component for this context exists\n *   - false: component for this context doesn't exist\n *   - undefined: if the exists status for component is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsContextExistsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, boolean | undefined> => {\n  return createSelector(\n    componentsLoaderStateSelectorFactory(uid, context),\n    (loaderState) => StateUtils.loaderValueSelector(loaderState)\n  );\n};\n\nexport const componentsDataSelectorFactory = (\n  uid: string\n): MemoizedSelector<StateWithCms, CmsComponent | undefined> => {\n  return createSelector(componentsContextSelectorFactory(uid), (state) =>\n    state ? state.component : undefined\n  );\n};\n\n/**\n * This selector will return:\n *   - CmsComponent instance: if we have component data for specified context\n *   - null: if there is no component data for specified context\n *   - undefined: if status of component data for specified context is unknown\n *\n * @param uid\n * @param context\n */\nexport const componentsSelectorFactory = (\n  uid: string,\n  context: string\n): MemoizedSelector<StateWithCms, CmsComponent | null | undefined> => {\n  return createSelector(\n    componentsDataSelectorFactory(uid),\n    componentsContextExistsSelectorFactory(uid, context),\n    (componentState, exists) => {\n      switch (exists) {\n        case true:\n          return componentState;\n        case false:\n          return null;\n        case undefined:\n          return undefined;\n      }\n    }\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { NodeItem } from '../../model/node-item.model';\nimport { CmsState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nexport const getNavigationEntryItemState: MemoizedSelector<\n  StateWithCms,\n  StateUtils.EntityLoaderState<NodeItem>\n> = createSelector(getCmsState, (state: CmsState) => state.navigation);\n\nexport const getSelectedNavigationEntryItemState = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<NodeItem>> => {\n  return createSelector(getNavigationEntryItemState, (nodes) =>\n    StateUtils.entityLoaderStateSelector(nodes, nodeId)\n  );\n};\n\nexport const getNavigationEntryItems = (\n  nodeId: string\n): MemoizedSelector<StateWithCms, NodeItem> => {\n  return createSelector(\n    getSelectedNavigationEntryItemState(nodeId),\n    (itemState) => StateUtils.loaderValueSelector(itemState)\n  );\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ContentSlotData } from '../../model/content-slot-data.model';\nimport { Page } from '../../model/page.model';\nimport { CmsState, IndexType, PageState, StateWithCms } from '../cms-state';\nimport { getCmsState } from './feature.selectors';\n\nconst getPageEntitiesSelector = (state: PageState) => state.pageData.entities;\nconst getIndexByType = (\n  index: IndexType,\n  type: PageType\n): StateUtils.EntityLoaderState<string> => {\n  switch (type) {\n    case PageType.CONTENT_PAGE: {\n      return index.content;\n    }\n    case PageType.PRODUCT_PAGE: {\n      return index.product;\n    }\n    case PageType.CATEGORY_PAGE: {\n      return index.category;\n    }\n    case PageType.CATALOG_PAGE: {\n      return index.catalog;\n    }\n  }\n  return { entities: {} };\n};\n\nconst getPageComponentTypesSelector: (page: Page) => string[] = (\n  page: Page\n) => {\n  const componentTypes = new Set<string>();\n  if (page && page.slots) {\n    for (const slot of Object.keys(page.slots)) {\n      for (const component of page.slots[slot].components || []) {\n        componentTypes.add(component.flexType);\n      }\n    }\n  }\n  return Array.from(componentTypes);\n};\n\nexport const getPageState: MemoizedSelector<\n  StateWithCms,\n  PageState\n> = createSelector(getCmsState, (state: CmsState) => state.page);\n\nexport const getPageStateIndex: MemoizedSelector<\n  StateWithCms,\n  IndexType\n> = createSelector(getPageState, (page: PageState) => page.index);\n\nexport const getPageStateIndexEntityLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.EntityLoaderState<string>> =>\n  createSelector(getPageStateIndex, (index: IndexType) =>\n    getIndexByType(index, pageContext.type)\n  );\n\nexport const getPageStateIndexLoaderState = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, StateUtils.LoaderState<string>> =>\n  createSelector(\n    getPageStateIndexEntityLoaderState(pageContext),\n    (indexState) =>\n      StateUtils.entityLoaderStateSelector(indexState, pageContext.id)\n  );\n\nexport const getPageStateIndexValue = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string> =>\n  createSelector(getPageStateIndexLoaderState(pageContext), (entity) =>\n    StateUtils.loaderValueSelector<string>(entity)\n  );\n\nexport const getPageEntities: MemoizedSelector<\n  StateWithCms,\n  { [id: string]: Page }\n> = createSelector(getPageState, getPageEntitiesSelector);\n\nexport const getPageData = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, Page> =>\n  createSelector(\n    getPageEntities,\n    getPageStateIndexValue(pageContext),\n    (entities: { [id: string]: Page }, indexValue: string) =>\n      entities[indexValue]\n  );\n\nexport const getPageComponentTypes = (\n  pageContext: PageContext\n): MemoizedSelector<StateWithCms, string[]> =>\n  createSelector(getPageData(pageContext), (pageData) =>\n    getPageComponentTypesSelector(pageData)\n  );\n\nexport const getCurrentSlotSelectorFactory = (\n  pageContext: PageContext,\n  position: string\n): MemoizedSelector<StateWithCms, ContentSlotData> => {\n  return createSelector(getPageData(pageContext), (entity) => {\n    if (entity) {\n      return entity.slots[position] || { components: [] };\n    }\n  });\n};\n","import { PageType } from '../../model/cms.model';\nimport { PageContext } from '../../routing/models/page-context.model';\n\nexport const CURRENT_CONTEXT_KEY = 'current';\n\n/**\n *\n * Serializes the provided page context.\n * The pattern used for serialization is: `pageContext.type-pageContext.id`.\n *\n * @param pageContext to serialize\n * @param ignoreContentPageId if set to true, and the PageType is of type ContentPage, then the serialized page context will not contain the ID.\n * Otherwise, the page context if fully serialized.\n */\nexport function serializePageContext(\n  pageContext: PageContext,\n  ignoreContentPageId?: boolean\n): string {\n  if (!pageContext) {\n    return CURRENT_CONTEXT_KEY;\n  }\n\n  if (ignoreContentPageId && pageContext.type === PageType.CONTENT_PAGE) {\n    return `${pageContext.type}`;\n  }\n\n  return `${pageContext.type}-${pageContext.id}`;\n}\n","import { CmsComponent } from '../../model/cms.model';\nimport { ContentSlotData } from './content-slot-data.model';\n\nexport interface Page {\n  pageId?: string;\n  name?: string;\n  type?: string;\n  title?: string;\n  template?: string;\n  loadTime?: number;\n  slots?: { [key: string]: ContentSlotData };\n  properties?: any;\n  label?: string;\n}\n\n/**\n * Represents the cms structure for pages, slots and components.\n */\nexport interface CmsStructureModel {\n  page?: Page;\n  components?: CmsComponent[];\n}\n\n/**\n * Represents the page meta data that can be used\n * to resolve page data and seo related data.\n */\nexport interface PageMeta {\n  /**\n   * the page title is used for the page title tag which\n   * is visible in the browser navigation as well as in the\n   * Search Engine Result Page\n   */\n  title?: string;\n\n  /**\n   * the page heading is typically used in the UI\n   */\n  heading?: string;\n\n  /**\n   * the page description is used in the Search Engine Result Page\n   */\n  description?: string;\n\n  /**\n   * the robots information drives search engines to index the page and\n   * follow links in the page\n   */\n  robots?: PageRobotsMeta[];\n\n  /**\n   * image that can be added to the og:image metatag\n   */\n  image?: string;\n\n  /**\n   * the list of breadcrumbs that can be rendered in the page UI.\n   */\n  breadcrumbs?: BreadcrumbMeta[];\n}\n\nexport interface BreadcrumbMeta {\n  label: string;\n  link: string;\n}\n\nexport enum PageRobotsMeta {\n  INDEX = 'INDEX',\n  NOINDEX = 'NOINDEX',\n  FOLLOW = 'FOLLOW',\n  NOFOLLOW = 'NOFOLLOW',\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable, of, queueScheduler, using } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs/operators';\nimport { CmsComponent } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { PageContext } from '../../routing/models/page-context.model';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { ContentSlotData } from '../model/content-slot-data.model';\nimport { NodeItem } from '../model/node-item.model';\nimport { Page } from '../model/page.model';\nimport { CmsActions } from '../store/actions/index';\nimport { StateWithCms } from '../store/cms-state';\nimport { CmsSelectors } from '../store/selectors/index';\nimport { serializePageContext } from '../utils/cms-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsService {\n  private components: {\n    [uid: string]: {\n      [pageContext: string]: Observable<CmsComponent>;\n    };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithCms>,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Get current CMS page data\n   */\n  getCurrentPage(): Observable<Page> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.select(CmsSelectors.getPageData(pageContext))\n        )\n      );\n  }\n\n  /**\n   * Get CMS component data by uid\n   *\n   * This method can be safely and optimally used to load multiple components data at the same time.\n   * Calling getComponentData multiple times for different components will always result in optimized\n   * back-end request: all components requested at the same time (in one event loop) will be loaded in one network call.\n   *\n   * In case the component data is not present, the method will load it.\n   * Otherwise, if the page context is not provided, the current page context from the router state will be used instead.\n   *\n   * @param uid CMS component uid\n   * @param pageContext if provided, it will be used to lookup the component data.\n   */\n  getComponentData<T extends CmsComponent | null>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    const context = serializePageContext(pageContext, true);\n    if (!this.components[uid]) {\n      // create the component data structure, if it doesn't already exist\n      this.components[uid] = {};\n    }\n\n    const component = this.components[uid];\n    if (!component[context]) {\n      // create the component data and assign it to the component's context\n      component[context] = this.createComponentData(uid, pageContext);\n    }\n\n    return component[context] as Observable<T>;\n  }\n\n  private createComponentData<T extends CmsComponent>(\n    uid: string,\n    pageContext?: PageContext\n  ): Observable<T> {\n    if (!pageContext) {\n      return this.routingService.getPageContext().pipe(\n        filter((currentContext) => !!currentContext),\n        switchMap((currentContext) =>\n          this.getComponentData<T>(uid, currentContext)\n        )\n      );\n    }\n\n    const context = serializePageContext(pageContext, true);\n\n    const loading$ = combineLatest([\n      this.routingService.getNextPageContext(),\n      this.store.pipe(\n        select(CmsSelectors.componentsLoaderStateSelectorFactory(uid, context))\n      ),\n    ]).pipe(\n      observeOn(queueScheduler),\n      tap(([nextContext, loadingState]) => {\n        const attemptedLoad =\n          loadingState.loading || loadingState.success || loadingState.error;\n        // if the requested context is the same as the one that's currently being navigated to\n        // (as it might already been triggered and might be available shortly from page data)\n        // TODO(issue:3649), TODO(issue:3668) - this optimization could be removed\n        const couldBeLoadedWithPageData = nextContext\n          ? serializePageContext(nextContext, true) === context\n          : false;\n\n        if (!attemptedLoad && !couldBeLoadedWithPageData) {\n          this.store.dispatch(\n            new CmsActions.LoadCmsComponent({ uid, pageContext })\n          );\n        }\n      })\n    );\n\n    const component$ = this.store.pipe(\n      select(CmsSelectors.componentsSelectorFactory(uid, context)),\n      filter((component) => component !== undefined)\n    ) as Observable<T | null>;\n\n    return using(\n      () => loading$.subscribe(),\n      () => component$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Given the position, get the content slot data\n   * @param position : content slot position\n   */\n  getContentSlot(position: string): Observable<ContentSlotData> {\n    return this.routingService\n      .getPageContext()\n      .pipe(\n        switchMap((pageContext) =>\n          this.store.pipe(\n            select(\n              CmsSelectors.getCurrentSlotSelectorFactory(pageContext, position)\n            ),\n            filter(Boolean)\n          )\n        )\n      );\n  }\n\n  /**\n   * Given navigation node uid, get items (with id and type) inside the navigation entries\n   * @param navigationNodeUid : uid of the navigation node\n   */\n  getNavigationEntryItems(navigationNodeUid: string): Observable<NodeItem> {\n    return this.store.pipe(\n      select(CmsSelectors.getNavigationEntryItems(navigationNodeUid))\n    );\n  }\n\n  /**\n   * Load navigation items data\n   * @param rootUid : the uid of the root navigation node\n   * @param itemList : list of items (with id and type)\n   */\n  loadNavigationItems(\n    rootUid: string,\n    itemList: { id: string; superType: string }[]\n  ): void {\n    this.store.dispatch(\n      new CmsActions.LoadCmsNavigationItems({\n        nodeId: rootUid,\n        items: itemList,\n      })\n    );\n  }\n\n  /**\n   * Refresh the content of the latest cms page\n   */\n  refreshLatestPage(): void {\n    this.routingService\n      .getPageContext()\n      .pipe(take(1))\n      .subscribe((pageContext) =>\n        this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext))\n      );\n  }\n\n  /**\n   * Refresh the cms page content by page Id\n   * @param pageId\n   */\n  refreshPageById(pageId: string): void {\n    const pageContext: PageContext = { id: pageId };\n    this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n  }\n\n  /**\n   * Refresh cms component's content\n   * @param uid component uid\n   * @param pageContext an optional parameter that enables the caller to specify for which context the component should be refreshed.\n   * If not specified, 'current' page context is used.\n   */\n  refreshComponent(uid: string, pageContext?: PageContext): void {\n    this.store.dispatch(new CmsActions.LoadCmsComponent({ uid, pageContext }));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageState(pageContext: PageContext): Observable<Page> {\n    return this.store.pipe(select(CmsSelectors.getPageData(pageContext)));\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   * @param pageContext\n   */\n  getPageComponentTypes(pageContext: PageContext): Observable<string[]> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageComponentTypes(pageContext))\n    );\n  }\n\n  /**\n   * Given pageContext, return whether the CMS page data exists or not\n   * @param pageContext\n   */\n  hasPage(pageContext: PageContext, forceReload = false): Observable<boolean> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexLoaderState(pageContext)),\n      tap((entity: LoaderState<string>) => {\n        const attemptedLoad = entity.loading || entity.success || entity.error;\n        const shouldReload = forceReload && !entity.loading;\n        if (!attemptedLoad || shouldReload) {\n          this.store.dispatch(new CmsActions.LoadCmsPageData(pageContext));\n          forceReload = false;\n        }\n      }),\n      filter((entity) => {\n        if (!entity.hasOwnProperty('value')) {\n          // if we have incomplete state from SSR failed load transfer state,\n          // we should wait for reload and actual value\n          return false;\n        }\n        return entity.success || (entity.error && !entity.loading);\n      }),\n      pluck('success'),\n      catchError(() => of(false))\n    );\n  }\n\n  /**\n   * Given pageContext, return the CMS page data\n   **/\n  getPage(pageContext: PageContext, forceReload = false): Observable<Page> {\n    return this.hasPage(pageContext, forceReload).pipe(\n      switchMap((hasPage) =>\n        hasPage ? this.getPageState(pageContext) : of(null)\n      )\n    );\n  }\n\n  getPageIndex(pageContext: PageContext): Observable<string> {\n    return this.store.pipe(\n      select(CmsSelectors.getPageStateIndexValue(pageContext))\n    );\n  }\n\n  setPageFailIndex(pageContext: PageContext, value: string): void {\n    this.store.dispatch(new CmsActions.CmsSetPageFailIndex(pageContext, value));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`\n * and the `CartPageTemplate`). If the cart page matches this template, the more\n * generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((page) => !!page));\n\n  constructor(protected cms: CmsService) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'CartPageTemplate';\n  }\n\n  /**\n   * Resolves the page title, which is driven by the backend.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Returns robots for the cart pages, which default to NOINDEX and NOFOLLOW.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { distinctUntilKeyChanged, filter, map } from 'rxjs/operators';\nimport { BASE_SITE_CONTEXT_ID } from '../../site-context';\nimport { SiteContextParamsService } from '../../site-context/services/site-context-params.service';\nimport { StatePersistenceService } from '../../state/services/state-persistence.service';\nimport { CartActions, MultiCartSelectors } from '../store';\nimport { StateWithMultiCart } from '../store/multi-cart-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiCartStatePersistenceService {\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithMultiCart>,\n    protected siteContextParamsService: SiteContextParamsService\n  ) {}\n\n  public sync() {\n    this.statePersistenceService.syncWithStorage({\n      key: 'cart',\n      state$: this.getCartState(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      onRead: (state) => this.onRead(state),\n    });\n  }\n\n  protected getCartState(): Observable<{ active: string }> {\n    return this.store.pipe(\n      select(MultiCartSelectors.getMultiCartState),\n      filter((state) => !!state),\n      distinctUntilKeyChanged('active'),\n      map((state) => {\n        return {\n          active: state.active,\n        };\n      })\n    );\n  }\n\n  protected onRead(state: { active: string }) {\n    this.store.dispatch(new CartActions.ClearCartState());\n    if (state) {\n      this.store.dispatch(new CartActions.SetActiveCartId(state.active));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CartActions } from '../actions/index';\n\n@Injectable()\nexport class MultiCartEffects {\n  @Effect()\n  setTempCart$ = this.actions$.pipe(\n    ofType(CartActions.SET_TEMP_CART),\n    map((action: CartActions.SetTempCart) => {\n      return new CartActions.RemoveCart({ cartId: action.payload.tempCartId });\n    })\n  );\n\n  // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies\n  @Effect()\n  processesIncrement$: Observable<\n    CartActions.CartProcessesIncrement\n  > = this.actions$.pipe(\n    ofType(CartActions.CART_ADD_VOUCHER),\n    map((action: CartActions.CartAddVoucher) => action.payload),\n    map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { CartEntryEffects } from './effects/cart-entry.effect';\nimport { CartVoucherEffects } from './effects/cart-voucher.effect';\nimport { CartEffects } from './effects/cart.effect';\nimport { MultiCartEffects } from './effects/multi-cart.effect';\nimport { WishListEffects } from './effects/wish-list.effect';\nimport { MULTI_CART_FEATURE } from './multi-cart-state';\nimport {\n  multiCartMetaReducers,\n  multiCartReducerProvider,\n  multiCartReducerToken,\n} from './reducers/index';\n\nconst effects: any[] = [\n  CartEffects,\n  CartEntryEffects,\n  CartVoucherEffects,\n  WishListEffects,\n  MultiCartEffects,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {\n      metaReducers: multiCartMetaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [multiCartReducerProvider],\n})\nexport class MultiCartStoreModule {}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';\nimport { CartEventModule } from './event/cart-event.module';\nimport { ActiveCartService } from './facade/active-cart.service';\nimport {\n  CartVoucherService,\n  SelectiveCartService,\n  WishListService,\n} from './facade/index';\nimport { MultiCartService } from './facade/multi-cart.service';\nimport { CartPageMetaResolver } from './services/cart-page-meta.resolver';\nimport { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';\nimport { MultiCartStoreModule } from './store/multi-cart-store.module';\n\nexport function cartStatePersistenceFactory(\n  cartStatePersistenceService: MultiCartStatePersistenceService,\n  configInit: ConfigInitializerService\n) {\n  const result = () =>\n    configInit.getStableConfig('context').then(() => {\n      cartStatePersistenceService.sync();\n    });\n  return result;\n}\n\n@NgModule({\n  imports: [MultiCartStoreModule, CartEventModule],\n})\nexport class CartModule {\n  static forRoot(): ModuleWithProviders<CartModule> {\n    return {\n      ngModule: CartModule,\n      providers: [\n        CartVoucherService,\n        MultiCartService,\n        WishListService,\n        ActiveCartService,\n        SelectiveCartService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CartPageMetaResolver,\n          multi: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: cartStatePersistenceFactory,\n          deps: [MultiCartStatePersistenceService, ConfigInitializerService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { CheckoutActions } from '../actions/index';\nimport { AddressVerificationState } from '../checkout-state';\n\nexport const initialState: AddressVerificationState = {\n  results: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: CheckoutActions.AddressVerificationActions\n): AddressVerificationState {\n  switch (action.type) {\n    case CheckoutActions.VERIFY_ADDRESS_SUCCESS: {\n      const results = action.payload;\n\n      return {\n        ...state,\n        results,\n      };\n    }\n\n    case CheckoutActions.VERIFY_ADDRESS_FAIL: {\n      return {\n        ...state,\n        results: 'FAIL',\n      };\n    }\n\n    case CheckoutActions.CLEAR_ADDRESS_VERIFICATION_RESULTS: {\n      return {\n        ...state,\n        results: {},\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getAddressVerificationResults = (\n  state: AddressVerificationState\n) => state.results;\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  CheckoutState,\n  CheckoutStepsState,\n  CHECKOUT_FEATURE,\n  StateWithCheckout,\n} from '../checkout-state';\n\nconst getDeliveryAddressSelector = (state: CheckoutStepsState) => state.address;\nconst getDeliveryModeSelector = (state: CheckoutStepsState) =>\n  state.deliveryMode;\nconst getPaymentDetailsSelector = (state: CheckoutStepsState) =>\n  state.paymentDetails;\nconst getOrderDetailsSelector = (state: CheckoutStepsState) =>\n  state.orderDetails;\n\nexport const getCheckoutState: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutState\n> = createFeatureSelector<CheckoutState>(CHECKOUT_FEATURE);\n\nexport const getCheckoutStepsState: MemoizedSelector<\n  StateWithCheckout,\n  LoaderState<CheckoutStepsState>\n> = createSelector(\n  getCheckoutState,\n  (checkoutState: CheckoutState) => checkoutState.steps\n);\n\nexport const getCheckoutSteps: MemoizedSelector<\n  StateWithCheckout,\n  CheckoutStepsState\n> = createSelector(getCheckoutStepsState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getDeliveryAddress: MemoizedSelector<\n  StateWithCheckout,\n  Address\n> = createSelector(getCheckoutSteps, getDeliveryAddressSelector);\n\nexport const getDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  {\n    supported: { [code: string]: DeliveryMode };\n    selected: string;\n  }\n> = createSelector(getCheckoutSteps, getDeliveryModeSelector);\n\nexport const getSupportedDeliveryModes: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode[]\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return (\n    deliveryMode &&\n    Object.keys(deliveryMode.supported).map(\n      (code) => deliveryMode.supported[code]\n    )\n  );\n});\n\nexport const getSelectedDeliveryModeCode: MemoizedSelector<\n  StateWithCheckout,\n  string\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  return deliveryMode && deliveryMode.selected;\n});\n\nexport const getSelectedDeliveryMode: MemoizedSelector<\n  StateWithCheckout,\n  DeliveryMode\n> = createSelector(getDeliveryMode, (deliveryMode) => {\n  if (deliveryMode.selected !== '') {\n    if (Object.keys(deliveryMode.supported).length === 0) {\n      return null;\n    }\n    return deliveryMode.supported[deliveryMode.selected];\n  }\n});\n\nexport const getPaymentDetails: MemoizedSelector<\n  StateWithCheckout,\n  PaymentDetails\n> = createSelector(getCheckoutSteps, getPaymentDetailsSelector);\n\nexport const getCheckoutOrderDetails: MemoizedSelector<\n  StateWithCheckout,\n  Order\n> = createSelector(getCheckoutSteps, getOrderDetailsSelector);\n\nexport const getCheckoutDetailsLoaded: MemoizedSelector<\n  StateWithCheckout,\n  boolean\n> = createSelector(\n  getCheckoutStepsState,\n  (state) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AddressValidation } from '../../../model/address.model';\nimport {\n  AddressVerificationState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/address-verification.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getAddressVerificationResultsState: MemoizedSelector<\n  StateWithCheckout,\n  AddressVerificationState\n> = createSelector(\n  getCheckoutState,\n  (state: CheckoutState) => state.addressVerification\n);\n\nexport const getAddressVerificationResults: MemoizedSelector<\n  StateWithCheckout,\n  string | AddressValidation\n> = createSelector(\n  getAddressVerificationResultsState,\n  fromReducer.getAddressVerificationResults\n);\n","import { CardType } from '../../../model/cart.model';\nimport { CheckoutActions } from '../actions/index';\nimport { CardTypesState } from '../checkout-state';\n\nexport const initialState: CardTypesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CardTypesAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CardTypesState {\n  switch (action.type) {\n    case CheckoutActions.LOAD_CARD_TYPES_SUCCESS: {\n      const cardTypes: CardType[] = action.payload;\n      const entities = cardTypes.reduce(\n        (cardTypesEntities: { [code: string]: CardType }, name: CardType) => {\n          return {\n            ...cardTypesEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getCardTypesEntites = (state: CardTypesState) => state.entities;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { CardType } from '../../../model/cart.model';\nimport {\n  CardTypesState,\n  CheckoutState,\n  StateWithCheckout,\n} from '../checkout-state';\nimport * as fromReducer from './../reducers/card-types.reducer';\nimport { getCheckoutState } from './checkout.selectors';\n\nexport const getCardTypesState: MemoizedSelector<\n  StateWithCheckout,\n  CardTypesState\n> = createSelector(getCheckoutState, (state: CheckoutState) => state.cardTypes);\n\nexport const getCardTypesEntites: MemoizedSelector<\n  StateWithCheckout,\n  { [code: string]: CardType }\n> = createSelector(getCardTypesState, fromReducer.getCardTypesEntites);\n\nexport const getAllCardTypes: MemoizedSelector<\n  StateWithCheckout,\n  CardType[]\n> = createSelector(getCardTypesEntites, (entites) => {\n  return Object.keys(entites).map((code) => entites[code]);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Order } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { CheckoutActions } from '../store/actions/index';\nimport { StateWithCheckout } from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class CheckoutService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Places an order\n   */\n  placeOrder(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.PlaceOrder({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear checkout data\n   */\n  clearCheckoutData(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());\n  }\n\n  /**\n   * Clear checkout step\n   * @param stepNumber : the step number to be cleared\n   */\n  clearCheckoutStep(stepNumber: number): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearCheckoutStep(stepNumber)\n    );\n  }\n\n  /**\n   * Load checkout details data\n   * @param cartId : string Cart ID of loaded cart\n   */\n  loadCheckoutDetails(cartId: string) {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    if (userId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.LoadCheckoutDetails({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Get status of checkout details loaded\n   */\n  getCheckoutDetailsLoaded(): Observable<boolean> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutDetailsLoaded)\n    );\n  }\n\n  /**\n   * Get order details\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getCheckoutOrderDetails)\n    );\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Observable } from 'rxjs';\n\nexport abstract class TranslationService {\n  /**\n   * Translates given key with options.\n   * If key is missing, it tries to load the chunk and emits a value when chunk is loaded.\n   * If key is missing after loaded chunk, a fallback value is emitted\n   *\n   * @param key translation key\n   * @param options values for interpolation in translation\n   * @param whitespaceUntilLoaded if true, immediately emits a non-breaking space\n   */\n  translate: (\n    key: string,\n    options?: any,\n    whitespaceUntilLoaded?: boolean\n  ) => Observable<string>;\n\n  /**\n   * Loads chunks with translations\n   *\n   * @param chunkNames array of chunk names to be loaded\n   */\n  loadChunks: (chunkNames: string | string[]) => Promise<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`\n * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,\n * the more generic `ContentPageMetaResolver` is overriden by this resolver.\n *\n * The page title and robots are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageRobotsResolver {\n  protected cart$ = this.activeCartService.getActive();\n\n  constructor(\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.cart$.pipe(\n      switchMap((c) =>\n        this.translation.translate('pageMetaResolver.checkout.title', {\n          count: c.totalItems,\n        })\n      )\n    );\n  }\n\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);\n  }\n}\n","import { Address } from '../../../model/address.model';\nimport { DeliveryMode, Order } from '../../../model/order.model';\nimport { CheckoutStepsState } from '../checkout-state';\nimport { CheckoutActions } from './../actions/index';\n\nexport const initialState: CheckoutStepsState = {\n  address: {},\n  deliveryMode: {\n    supported: {},\n    selected: '',\n  },\n  paymentDetails: {},\n  orderDetails: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | CheckoutActions.CheckoutAction\n    | CheckoutActions.CheckoutClearMiscsData\n): CheckoutStepsState {\n  switch (action.type) {\n    case CheckoutActions.ADD_DELIVERY_ADDRESS_SUCCESS:\n    case CheckoutActions.SET_DELIVERY_ADDRESS_SUCCESS: {\n      const address: Address = action.payload;\n\n      return {\n        ...state,\n        address,\n      };\n    }\n\n    case CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {\n      const supportedModes = action.payload;\n      if (!supportedModes) {\n        return state;\n      }\n\n      const supported = supportedModes.reduce(\n        (modes: { [code: string]: DeliveryMode }, mode: DeliveryMode) => {\n          return {\n            ...modes,\n            [mode.code]: mode,\n          };\n        },\n        {\n          ...state.deliveryMode.supported,\n        }\n      );\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported,\n        },\n      };\n    }\n\n    case CheckoutActions.SET_DELIVERY_MODE_SUCCESS: {\n      const selected = action.payload;\n\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected,\n        },\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_SUCCESS:\n    case CheckoutActions.SET_PAYMENT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        paymentDetails: action.payload,\n      };\n    }\n\n    case CheckoutActions.CREATE_PAYMENT_DETAILS_FAIL: {\n      const paymentDetails = action.payload;\n      if (paymentDetails['hasError']) {\n        return {\n          ...state,\n          paymentDetails,\n        };\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.PLACE_ORDER_SUCCESS: {\n      const orderDetails: Order = action.payload;\n\n      return {\n        ...state,\n        orderDetails,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DATA: {\n      return initialState;\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_STEP: {\n      const stepNumber = action.payload;\n      switch (stepNumber) {\n        case 1: {\n          return {\n            ...state,\n            address: {},\n          };\n        }\n\n        case 2: {\n          return {\n            ...state,\n            deliveryMode: {\n              ...state.deliveryMode,\n              supported: {},\n              selected: '',\n            },\n          };\n        }\n\n        case 3: {\n          return {\n            ...state,\n            paymentDetails: {},\n          };\n        }\n      }\n\n      return state;\n    }\n\n    case CheckoutActions.CLEAR_SUPPORTED_DELIVERY_MODES:\n    case CheckoutActions.CHECKOUT_CLEAR_MISCS_DATA: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          supported: {},\n        },\n      };\n    }\n    case CheckoutActions.LOAD_CHECKOUT_DETAILS_SUCCESS: {\n      return {\n        ...state,\n        address: action.payload.deliveryAddress,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected:\n            action.payload.deliveryMode && action.payload.deliveryMode.code,\n        },\n        paymentDetails: action.payload.paymentInfo,\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS: {\n      return {\n        ...state,\n        address: {},\n      };\n    }\n\n    case CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE: {\n      return {\n        ...state,\n        deliveryMode: {\n          ...state.deliveryMode,\n          selected: '',\n        },\n      };\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\n\nimport { ActionReducerMap } from '@ngrx/store';\n\nimport {\n  CheckoutState,\n  CHECKOUT_DETAILS,\n  CheckoutStepsState,\n} from '../checkout-state';\n\nimport * as fromAddressVerification from './address-verification.reducer';\nimport * as fromCardTypes from './card-types.reducer';\nimport * as fromCheckout from './checkout.reducer';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<CheckoutState> {\n  return {\n    steps: loaderReducer<CheckoutStepsState>(\n      CHECKOUT_DETAILS,\n      fromCheckout.reducer\n    ),\n    cardTypes: fromCardTypes.reducer,\n    addressVerification: fromAddressVerification.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CheckoutState\n>> = new InjectionToken<ActionReducerMap<CheckoutState>>('CheckoutReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { Injectable } from '@angular/core';\nimport { UserAddressAdapter } from './user-address.adapter';\nimport { Observable } from 'rxjs';\nimport { Address, AddressValidation } from '../../../model/address.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressConnector {\n  constructor(protected adapter: UserAddressAdapter) {}\n\n  getAll(userId: string): Observable<Address[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  add(userId: string, address: Address): Observable<{}> {\n    return this.adapter.add(userId, address);\n  }\n\n  update(userId: string, addressId: string, address: Address): Observable<{}> {\n    return this.adapter.update(userId, addressId, address);\n  }\n\n  verify(userId: string, address: Address): Observable<AddressValidation> {\n    return this.adapter.verify(userId, address);\n  }\n\n  delete(userId: string, addressId: string): Observable<{}> {\n    return this.adapter.delete(userId, addressId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserAddressConnector } from '../../../user/connectors/address/user-address.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class AddressVerificationEffect {\n  @Effect()\n  verifyAddress$: Observable<\n    CheckoutActions.VerifyAddressSuccess | CheckoutActions.VerifyAddressFail\n  > = this.actions$.pipe(\n    ofType<CheckoutActions.VerifyAddress>(CheckoutActions.VERIFY_ADDRESS),\n    map((action) => action.payload),\n    mergeMap((payload) =>\n      this.userAddressConnector.verify(payload.userId, payload.address).pipe(\n        map((data) => new CheckoutActions.VerifyAddressSuccess(data)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.VerifyAddressFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector\n  ) {}\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutPaymentAdapter } from './checkout-payment.adapter';\nimport { CardType, PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentConnector {\n  constructor(protected adapter: CheckoutPaymentAdapter) {}\n\n  public create(\n    userId: string,\n    cartId: string,\n    paymentDetails: PaymentDetails\n  ): Observable<PaymentDetails> {\n    return this.adapter.create(userId, cartId, paymentDetails);\n  }\n\n  public set(\n    userId: string,\n    cartId: string,\n    paymentDetailsId: string\n  ): Observable<any> {\n    return this.adapter.set(userId, cartId, paymentDetailsId);\n  }\n\n  getCardTypes(): Observable<CardType[]> {\n    return this.adapter.loadCardTypes();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CardTypesEffects {\n  @Effect()\n  loadCardTypes$: Observable<\n    CheckoutActions.LoadCardTypesSuccess | CheckoutActions.LoadCardTypesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CARD_TYPES),\n    switchMap(() => {\n      return this.checkoutPaymentConnector.getCardTypes().pipe(\n        map((cardTypes) => new CheckoutActions.LoadCardTypesSuccess(cardTypes)),\n        catchError((error) =>\n          of(\n            new CheckoutActions.LoadCardTypesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutPaymentConnector: CheckoutPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CheckoutAdapter } from './checkout.adapter';\nimport { Order } from '../../../model/order.model';\nimport { CheckoutDetails } from '../../models/checkout.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConnector {\n  constructor(protected adapter: CheckoutAdapter) {}\n\n  public placeOrder(userId: string, cartId: string): Observable<Order> {\n    return this.adapter.placeOrder(userId, cartId);\n  }\n\n  public loadCheckoutDetails(\n    userId: string,\n    cartId: string\n  ): Observable<CheckoutDetails> {\n    return this.adapter.loadCheckoutDetails(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryAddress(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);\n  }\n\n  public clearCheckoutDeliveryMode(\n    userId: string,\n    cartId: string\n  ): Observable<any> {\n    return this.adapter.clearCheckoutDeliveryMode(userId, cartId);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { CheckoutDeliveryAdapter } from './checkout-delivery.adapter';\nimport { Address } from '../../../model/address.model';\nimport { DeliveryMode } from '../../../model/order.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryConnector {\n  constructor(protected adapter: CheckoutDeliveryAdapter) {}\n\n  public createAddress(\n    userId: string,\n    cartId: string,\n    address: Address\n  ): Observable<Address> {\n    return this.adapter.createAddress(userId, cartId, address);\n  }\n\n  public setAddress(\n    userId: string,\n    cartId: string,\n    addressId: string\n  ): Observable<any> {\n    return this.adapter.setAddress(userId, cartId, addressId);\n  }\n\n  public setMode(\n    userId: string,\n    cartId: string,\n    deliveryModeId: string\n  ): Observable<any> {\n    return this.adapter.setMode(userId, cartId, deliveryModeId);\n  }\n\n  public getMode(userId: string, cartId: string): Observable<DeliveryMode> {\n    return this.adapter.getMode(userId, cartId);\n  }\n\n  public getSupportedModes(\n    userId: string,\n    cartId: string\n  ): Observable<DeliveryMode[]> {\n    return this.adapter.getSupportedModes(userId, cartId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CartActions } from '../../../cart/store/actions/index';\nimport { CheckoutDetails } from '../../../checkout/models/checkout.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { OCC_USER_ID_ANONYMOUS } from '../../../occ/utils/occ-constants';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../../../user/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CheckoutConnector } from '../../connectors/checkout/checkout.connector';\nimport { CheckoutDeliveryConnector } from '../../connectors/delivery/checkout-delivery.connector';\nimport { CheckoutPaymentConnector } from '../../connectors/payment/checkout-payment.connector';\nimport { CheckoutActions } from '../actions/index';\n\n@Injectable()\nexport class CheckoutEffects {\n  private contextChange$ = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  @Effect()\n  addDeliveryAddress$: Observable<\n    | UserActions.LoadUserAddresses\n    | CheckoutActions.SetDeliveryAddress\n    | CheckoutActions.AddDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.ADD_DELIVERY_ADDRESS),\n    map((action: CheckoutActions.AddDeliveryAddress) => action.payload),\n    mergeMap((payload) =>\n      this.checkoutDeliveryConnector\n        .createAddress(payload.userId, payload.cartId, payload.address)\n        .pipe(\n          mergeMap((address) => {\n            address['titleCode'] = payload.address.titleCode;\n            if (payload.address.region && payload.address.region.isocodeShort) {\n              Object.assign(address.region, {\n                isocodeShort: payload.address.region.isocodeShort,\n              });\n            }\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            } else {\n              return [\n                new UserActions.LoadUserAddresses(payload.userId),\n                new CheckoutActions.SetDeliveryAddress({\n                  userId: payload.userId,\n                  cartId: payload.cartId,\n                  address: address,\n                }),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.AddDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    ),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setDeliveryAddress$: Observable<\n    | CheckoutActions.SetDeliveryAddressSuccess\n    | CheckoutActions.ClearSupportedDeliveryModes\n    | CheckoutActions.ClearCheckoutDeliveryMode\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n    | CheckoutActions.LoadSupportedDeliveryModes\n    | CheckoutActions.SetDeliveryAddressFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_ADDRESS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setAddress(payload.userId, payload.cartId, payload.address.id)\n        .pipe(\n          mergeMap(() => [\n            new CheckoutActions.SetDeliveryAddressSuccess(payload.address),\n            new CheckoutActions.ClearCheckoutDeliveryMode({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n            new CheckoutActions.ClearSupportedDeliveryModes(),\n            new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n            new CheckoutActions.LoadSupportedDeliveryModes({\n              userId: payload.userId,\n              cartId: payload.cartId,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadSupportedDeliveryModes$: Observable<\n    | CheckoutActions.LoadSupportedDeliveryModesSuccess\n    | CheckoutActions.LoadSupportedDeliveryModesFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_SUPPORTED_DELIVERY_MODES),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .getSupportedModes(payload.userId, payload.cartId)\n        .pipe(\n          map((data) => {\n            return new CheckoutActions.LoadSupportedDeliveryModesSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadSupportedDeliveryModesFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutMiscsDataOnLanguageChange$: Observable<\n    | CheckoutActions.CheckoutClearMiscsData\n    | CheckoutActions.ResetLoadSupportedDeliveryModesProcess\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    mergeMap(() => [\n      new CheckoutActions.CheckoutClearMiscsData(),\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess(),\n    ])\n  );\n\n  @Effect()\n  clearDeliveryModesOnCurrencyChange$: Observable<\n    CheckoutActions.ClearSupportedDeliveryModes\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.CURRENCY_CHANGE),\n    map(() => new CheckoutActions.ClearSupportedDeliveryModes())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogout$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGOUT),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  clearCheckoutDataOnLogin$: Observable<\n    CheckoutActions.ClearCheckoutData\n  > = this.actions$.pipe(\n    ofType(AuthActions.LOGIN),\n    map(() => new CheckoutActions.ClearCheckoutData())\n  );\n\n  @Effect()\n  setDeliveryMode$: Observable<\n    | CheckoutActions.SetDeliveryModeSuccess\n    | CheckoutActions.SetDeliveryModeFail\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_DELIVERY_MODE),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutDeliveryConnector\n        .setMode(payload.userId, payload.cartId, payload.selectedModeId)\n        .pipe(\n          mergeMap(() => {\n            return [\n              new CheckoutActions.SetDeliveryModeSuccess(\n                payload.selectedModeId\n              ),\n              new CartActions.LoadCart({\n                userId: payload.userId,\n                cartId: payload.cartId,\n              }),\n            ];\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetDeliveryModeFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  createPaymentDetails$: Observable<\n    | UserActions.LoadUserPaymentMethods\n    | CheckoutActions.CreatePaymentDetailsSuccess\n    | CheckoutActions.CreatePaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CREATE_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      // get information for creating a subscription directly with payment provider\n      return this.checkoutPaymentConnector\n        .create(payload.userId, payload.cartId, payload.paymentDetails)\n        .pipe(\n          mergeMap((details) => {\n            if (payload.userId === OCC_USER_ID_ANONYMOUS) {\n              return [new CheckoutActions.CreatePaymentDetailsSuccess(details)];\n            } else {\n              return [\n                new UserActions.LoadUserPaymentMethods(payload.userId),\n                new CheckoutActions.CreatePaymentDetailsSuccess(details),\n              ];\n            }\n          }),\n          catchError((error) =>\n            of(\n              new CheckoutActions.CreatePaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  setPaymentDetails$: Observable<\n    | CheckoutActions.SetPaymentDetailsSuccess\n    | CheckoutActions.SetPaymentDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.SET_PAYMENT_DETAILS),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutPaymentConnector\n        .set(payload.userId, payload.cartId, payload.paymentDetails.id)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.SetPaymentDetailsSuccess(\n                payload.paymentDetails\n              )\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.SetPaymentDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  placeOrder$: Observable<\n    | CheckoutActions.PlaceOrderSuccess\n    | GlobalMessageActions.AddMessage\n    | CheckoutActions.PlaceOrderFail\n    | CartActions.RemoveCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.PLACE_ORDER),\n    map((action: any) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .placeOrder(payload.userId, payload.cartId)\n        .pipe(\n          switchMap((data) => [\n            new CartActions.RemoveCart({ cartId: payload.cartId }),\n            new CheckoutActions.PlaceOrderSuccess(data),\n          ]),\n          catchError((error) =>\n            of(new CheckoutActions.PlaceOrderFail(makeErrorSerializable(error)))\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  loadCheckoutDetails$: Observable<\n    | CheckoutActions.LoadCheckoutDetailsSuccess\n    | CheckoutActions.LoadCheckoutDetailsFail\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.LOAD_CHECKOUT_DETAILS),\n    map((action: CheckoutActions.LoadCheckoutDetails) => action.payload),\n    mergeMap((payload) => {\n      return this.checkoutConnector\n        .loadCheckoutDetails(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            (data: CheckoutDetails) =>\n              new CheckoutActions.LoadCheckoutDetailsSuccess(data)\n          ),\n          catchError((error) =>\n            of(\n              new CheckoutActions.LoadCheckoutDetailsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  reloadDetailsOnMergeCart$: Observable<\n    CheckoutActions.LoadCheckoutDetails\n  > = this.actions$.pipe(\n    ofType(CartActions.MERGE_CART_SUCCESS),\n    map((action: CartActions.MergeCartSuccess) => action.payload),\n    map((payload) => {\n      return new CheckoutActions.LoadCheckoutDetails({\n        userId: payload.userId,\n        cartId: payload.cartId,\n      });\n    })\n  );\n\n  @Effect()\n  clearCheckoutDeliveryAddress$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryAddressFail\n    | CheckoutActions.ClearCheckoutDeliveryAddressSuccess\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_ADDRESS),\n    map(\n      (action: CheckoutActions.ClearCheckoutDeliveryAddress) => action.payload\n    ),\n    filter((payload) => Boolean(payload.cartId)),\n    switchMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)\n        .pipe(\n          map(() => new CheckoutActions.ClearCheckoutDeliveryAddressSuccess()),\n          catchError((error) =>\n            of(\n              new CheckoutActions.ClearCheckoutDeliveryAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  @Effect()\n  clearCheckoutDeliveryMode$: Observable<\n    | CheckoutActions.ClearCheckoutDeliveryModeFail\n    | CheckoutActions.ClearCheckoutDeliveryModeSuccess\n    | CartActions.LoadCart\n  > = this.actions$.pipe(\n    ofType(CheckoutActions.CLEAR_CHECKOUT_DELIVERY_MODE),\n    map((action: CheckoutActions.ClearCheckoutDeliveryMode) => action.payload),\n    filter((payload) => Boolean(payload.cartId)),\n    concatMap((payload) => {\n      return this.checkoutConnector\n        .clearCheckoutDeliveryMode(payload.userId, payload.cartId)\n        .pipe(\n          map(\n            () =>\n              new CheckoutActions.ClearCheckoutDeliveryModeSuccess({\n                ...payload,\n              })\n          ),\n          catchError((error) =>\n            from([\n              new CheckoutActions.ClearCheckoutDeliveryModeFail({\n                ...payload,\n                error: makeErrorSerializable(error),\n              }),\n              new CartActions.LoadCart({\n                cartId: payload.cartId,\n                userId: payload.userId,\n              }),\n            ])\n          )\n        );\n    }),\n    withdrawOn(this.contextChange$)\n  );\n\n  constructor(\n    private actions$: Actions,\n    private checkoutDeliveryConnector: CheckoutDeliveryConnector,\n    private checkoutPaymentConnector: CheckoutPaymentConnector,\n    private checkoutConnector: CheckoutConnector\n  ) {}\n}\n","import { AddressVerificationEffect } from './address-verification.effect';\nimport { CardTypesEffects } from './card-types.effect';\nimport { CheckoutEffects } from './checkout.effect';\n\nexport const effects: any[] = [\n  CheckoutEffects,\n  AddressVerificationEffect,\n  CardTypesEffects,\n];\n\nexport * from './address-verification.effect';\nexport * from './card-types.effect';\nexport * from './checkout.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { CHECKOUT_FEATURE } from './checkout-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class CheckoutStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { CheckoutService } from './facade/checkout.service';\nimport { CheckoutPageMetaResolver } from './services/checkout-page-meta.resolver';\nimport { CheckoutStoreModule } from './store/checkout-store.module';\n\n@NgModule({\n  imports: [CheckoutStoreModule],\n})\nexport class CheckoutModule {\n  static forRoot(): ModuleWithProviders<CheckoutModule> {\n    return {\n      ngModule: CheckoutModule,\n      providers: [\n        CheckoutService,\n        {\n          provide: PageMetaResolver,\n          useExisting: CheckoutPageMetaResolver,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { Address, AddressValidation } from '../../model/address.model';\nimport { DeliveryMode } from '../../model/order.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_DELIVERY_ADDRESS_PROCESS_ID,\n  SET_DELIVERY_MODE_PROCESS_ID,\n  SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDeliveryService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get supported delivery modes\n   */\n  getSupportedDeliveryModes(): Observable<DeliveryMode[]> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSupportedDeliveryModes),\n      withLatestFrom(\n        this.checkoutStore.pipe(\n          select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n        )\n      ),\n      tap(([, loadingState]) => {\n        if (\n          !(loadingState.loading || loadingState.success || loadingState.error)\n        ) {\n          this.loadSupportedDeliveryModes();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Get selected delivery mode\n   */\n  getSelectedDeliveryMode(): Observable<DeliveryMode> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryMode)\n    );\n  }\n\n  /**\n   * Get selected delivery mode code\n   */\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getSelectedDeliveryModeCode)\n    );\n  }\n\n  /**\n   * Get delivery address\n   */\n  getDeliveryAddress(): Observable<Address> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getDeliveryAddress)\n    );\n  }\n\n  /**\n   * Get status about successfully set Delivery Address\n   */\n  getSetDeliveryAddressProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Address\n   */\n  resetSetDeliveryAddressProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryAddressProcess()\n    );\n  }\n\n  /**\n   * Get status about of set Delivery Mode process\n   */\n  getSetDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Delivery Mode\n   */\n  resetSetDeliveryModeProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetDeliveryModeProcess()\n    );\n  }\n\n  /**\n   * Clear info about process of setting Supported Delivery Modes\n   */\n  resetLoadSupportedDeliveryModesProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetLoadSupportedDeliveryModesProcess()\n    );\n  }\n\n  /**\n   * Get status about of set supported Delivery Modes process\n   */\n  getLoadSupportedDeliveryModeProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear supported delivery modes loaded in last checkout process\n   */\n  clearCheckoutDeliveryModes(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearSupportedDeliveryModes()\n    );\n  }\n\n  /**\n   * Get address verification results\n   */\n  getAddressVerificationResults(): Observable<AddressValidation | string> {\n    return this.checkoutStore.pipe(\n      select(CheckoutSelectors.getAddressVerificationResults),\n      filter((results) => Object.keys(results).length !== 0)\n    );\n  }\n\n  /**\n   * Create and set a delivery address using the address param\n   * @param address : the Address to be created and set\n   */\n  createAndSetAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.AddDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Load supported delivery modes\n   */\n  loadSupportedDeliveryModes(): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.LoadSupportedDeliveryModes({\n            userId,\n            cartId,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery mode\n   * @param mode : The delivery mode to be set\n   */\n  setDeliveryMode(mode: string): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryMode({\n            userId,\n            cartId,\n            selectedModeId: mode,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Verifies the address\n   * @param address : the address to be verified\n   */\n  verifyAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n      if (userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.VerifyAddress({\n            userId,\n            address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set delivery address\n   * @param address : The address to be set\n   */\n  setDeliveryAddress(address: Address): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n      if (cartId && userId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetDeliveryAddress({\n            userId,\n            cartId,\n            address: address,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear address verification results\n   */\n  clearAddressVerificationResults(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ClearAddressVerificationResults()\n    );\n  }\n\n  /**\n   * Clear address already setup in last checkout process\n   */\n  clearCheckoutDeliveryAddress(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryAddress({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear selected delivery mode setup in last checkout process\n   */\n  clearCheckoutDeliveryMode(): void {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n\n    let cartId;\n    this.activeCartService\n      .getActiveCartId()\n      .subscribe((activeCartId) => (cartId = activeCartId))\n      .unsubscribe();\n    if (userId && cartId) {\n      this.checkoutStore.dispatch(\n        new CheckoutActions.ClearCheckoutDeliveryMode({\n          userId,\n          cartId,\n        })\n      );\n    }\n  }\n\n  /**\n   * Clear address and delivery mode already setup in last checkout process\n   */\n  clearCheckoutDeliveryDetails(): void {\n    this.clearCheckoutDeliveryAddress();\n    this.clearCheckoutDeliveryMode();\n    this.clearCheckoutDeliveryModes();\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ActiveCartService } from '../../cart/facade/active-cart.service';\nimport { CardType, PaymentDetails } from '../../model/cart.model';\nimport { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessStateFactory } from '../../process/store/selectors/process-group.selectors';\nimport { LoaderState } from '../../state/utils/loader/loader-state';\nimport { CheckoutActions } from '../store/actions/index';\nimport {\n  SET_PAYMENT_DETAILS_PROCESS_ID,\n  StateWithCheckout,\n} from '../store/checkout-state';\nimport { CheckoutSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutPaymentService {\n  constructor(\n    protected checkoutStore: Store<StateWithCheckout | StateWithProcess<void>>,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  /**\n   * Get card types\n   */\n  getCardTypes(): Observable<CardType[]> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getAllCardTypes));\n  }\n\n  /**\n   * Get payment details\n   */\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.checkoutStore.pipe(select(CheckoutSelectors.getPaymentDetails));\n  }\n\n  /**\n   * Get status about set Payment Details process\n   */\n  getSetPaymentDetailsResultProcess(): Observable<LoaderState<void>> {\n    return this.checkoutStore.pipe(\n      select(getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Clear info about process of setting Payment Details\n   */\n  resetSetPaymentDetailsProcess(): void {\n    this.checkoutStore.dispatch(\n      new CheckoutActions.ResetSetPaymentDetailsProcess()\n    );\n  }\n\n  /**\n   * Load the supported card types\n   */\n  loadSupportedCardTypes(): void {\n    this.checkoutStore.dispatch(new CheckoutActions.LoadCardTypes());\n  }\n\n  /**\n   * Create payment details using the given paymentDetails param\n   * @param paymentDetails: the PaymentDetails to be created\n   */\n  createPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cartId;\n      this.activeCartService\n        .getActiveCartId()\n        .subscribe((activeCartId) => (cartId = activeCartId))\n        .unsubscribe();\n\n      if (userId && cartId) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.CreatePaymentDetails({\n            userId,\n            cartId,\n            paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Set payment details\n   * @param paymentDetails : the PaymentDetails to be set\n   */\n  setPaymentDetails(paymentDetails: PaymentDetails): void {\n    if (this.actionAllowed()) {\n      let userId;\n      this.authService\n        .getOccUserId()\n        .subscribe((occUserId) => (userId = occUserId))\n        .unsubscribe();\n\n      let cart;\n      this.activeCartService\n        .getActive()\n        .subscribe((activeCart) => (cart = activeCart))\n        .unsubscribe();\n      if (userId && cart) {\n        this.checkoutStore.dispatch(\n          new CheckoutActions.SetPaymentDetails({\n            userId,\n            cartId: cart.code,\n            paymentDetails: paymentDetails,\n          })\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets payment loading to true without having the flicker issue (GH-3102)\n   */\n  paymentProcessSuccess() {\n    this.checkoutStore.dispatch(new CheckoutActions.PaymentProcessSuccess());\n  }\n\n  protected actionAllowed(): boolean {\n    let userId;\n    this.authService\n      .getOccUserId()\n      .subscribe((occUserId) => (userId = occUserId))\n      .unsubscribe();\n    return (\n      (userId && userId !== OCC_USER_ID_ANONYMOUS) ||\n      this.activeCartService.isGuestCart()\n    );\n  }\n}\n","import { CmsConfig } from './cms-config';\n\nexport const defaultCmsModuleConfig: CmsConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        component: 'cms/components/${id}',\n        components: 'cms/components',\n        pages: 'cms/pages',\n        page: 'cms/pages/${id}',\n      },\n      legacy: false,\n    },\n  },\n  cmsComponents: {},\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { CmsService } from '../facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../model/page.model';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { PageBreadcrumbResolver, PageTitleResolver } from './page.resolvers';\n\n/**\n * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.\n * More specific resolvers for content pages can be implemented by making them more\n * specific, for example by using the page template (see `CartPageMetaResolver`).\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContentPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  /** helper to provie access to the current CMS page */\n  protected cms$: Observable<Page> = this.cms\n    .getCurrentPage()\n    .pipe(filter((p) => Boolean(p)));\n\n  constructor(\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n  }\n\n  /**\n   * Resolves the page title for the ContentPage by taking the title\n   * from the backend data.\n   */\n  resolveTitle(): Observable<string> {\n    return this.cms$.pipe(map((p) => p.title));\n  }\n\n  /**\n   * Resolves a single breacrumb item to the home page for each `ContentPage`.\n   * The home page label is resolved from the translation service.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return this.translation\n      .translate('common.home')\n      .pipe(map((label) => [{ label: label, link: '/' }] as BreadcrumbMeta[]));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageMetaResolver } from './page-meta.resolver';\nimport { ContentPageMetaResolver } from './content-page-meta.resolver';\n\n@NgModule({\n  providers: [\n    {\n      provide: PageMetaResolver,\n      useExisting: ContentPageMetaResolver,\n      multi: true,\n    },\n  ],\n})\nexport class CmsPageTitleModule {}\n","import { Observable, OperatorFunction, SchedulerLike } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\nexport function bufferDebounceTime<T>(\n  time: number = 0,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) => {\n    let bufferedValues: T[] = [];\n\n    return source.pipe(\n      tap((value) => bufferedValues.push(value)),\n      debounceTime(time, scheduler),\n      map(() => bufferedValues),\n      tap(() => (bufferedValues = []))\n    );\n  };\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  InjectionToken,\n  ModuleWithProviders,\n  NgModule,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { provideConfigFactory } from './config.module';\nimport { getCookie } from './utils/get-cookie';\n\nexport const TEST_CONFIG_COOKIE_NAME = new InjectionToken<string>(\n  'TEST_CONFIG_COOKIE_NAME'\n);\n\nexport function parseConfigJSON(config: string) {\n  try {\n    return JSON.parse(decodeURIComponent(config));\n  } catch (_) {\n    return {};\n  }\n}\n\nexport function configFromCookieFactory(\n  cookieName: string,\n  platform: any,\n  document: Document\n) {\n  if (isPlatformBrowser(platform) && cookieName) {\n    const config = getCookie(document.cookie, cookieName);\n    return parseConfigJSON(config);\n  }\n  return {};\n}\n\nexport interface TestConfigModuleOptions {\n  cookie: string;\n}\n\n/**\n * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).\n *\n * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n */\n@NgModule({})\nexport class TestConfigModule {\n  /**\n   * Injects JSON config from the cookie of the given name.\n   *\n   * Be aware of the cookie limitations (4096 bytes).\n   *\n   * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.\n   */\n  static forRoot(\n    options: TestConfigModuleOptions\n  ): ModuleWithProviders<TestConfigModule> {\n    return {\n      ngModule: TestConfigModule,\n      providers: [\n        {\n          provide: TEST_CONFIG_COOKIE_NAME,\n          useValue: options && options.cookie,\n        },\n        provideConfigFactory(configFromCookieFactory, [\n          TEST_CONFIG_COOKIE_NAME,\n          PLATFORM_ID,\n          DOCUMENT,\n        ]),\n      ],\n    };\n  }\n}\n","export function getCookie(cookie: string, name: string) {\n  const regExp = new RegExp('(?:^|;\\\\s*)' + name + '=([^;]*)', 'g');\n  const result: RegExpExecArray = regExp.exec(cookie);\n\n  return (result && decodeURIComponent(result[1])) || '';\n}\n","import {\n  APP_INITIALIZER,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from '../config-initializer/config-initializer.service';\nimport {\n  ConfigValidator,\n  ConfigValidatorToken,\n  validateConfig,\n} from './config-validator';\n\nexport function configValidatorFactory(\n  configInitializer: ConfigInitializerService,\n  validators: ConfigValidator[]\n) {\n  const validate = () => {\n    if (isDevMode()) {\n      configInitializer\n        .getStableConfig()\n        .then((config) => validateConfig(config, validators || []));\n    }\n  };\n  return validate;\n}\n\n/**\n * Should stay private in 1.x\n * as forRoot() is used internally by ConfigInitializerModule\n *\n * issue: #5279\n */\n@NgModule()\nexport class ConfigValidatorModule {\n  static forRoot(): ModuleWithProviders<ConfigValidatorModule> {\n    return {\n      ngModule: ConfigValidatorModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configValidatorFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), ConfigValidatorToken],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import {\n  APP_INITIALIZER,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n} from '@angular/core';\nimport { ConfigInitializerService } from './config-initializer.service';\nimport {\n  CONFIG_INITIALIZER,\n  CONFIG_INITIALIZER_FORROOT_GUARD,\n  ConfigInitializer,\n} from './config-initializer';\n\nexport function configInitializerFactory(\n  configInitializer: ConfigInitializerService,\n  initializers: ConfigInitializer[]\n) {\n  const isReady = () => configInitializer.initialize(initializers);\n  return isReady;\n}\n\n@NgModule({})\nexport class ConfigInitializerModule {\n  static forRoot(): ModuleWithProviders<ConfigInitializerModule> {\n    return {\n      ngModule: ConfigInitializerModule,\n      providers: [\n        {\n          provide: CONFIG_INITIALIZER_FORROOT_GUARD,\n          useValue: true,\n        },\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: configInitializerFactory,\n          deps: [\n            ConfigInitializerService,\n            [new Optional(), CONFIG_INITIALIZER],\n          ],\n        },\n      ],\n    };\n  }\n}\n","import { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsConfig } from './cms-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config';\n\n/**\n * The `CmsPageConfig` is used to build pages by configuration.\n * The interfaces are designed to have a clean configuration for\n * static CMS structure. Ordinary attributes that are not\n * required for configurable pages have been left out and\n * will not be serialized in the adapter logic.\n */\nexport interface CmsPageConfig {\n  /**\n   * When the `ignoreBackend` is set to true, the CMS backend\n   * will not be consumed. This saves network latency and is\n   * useful for commodity commerce pages.\n   * */\n  ignoreBackend?: boolean;\n\n  pageId?: string;\n\n  type?: string;\n\n  /**\n   * The page title is typically used to display the page heading\n   * as well as for the page title tag. The latter is used for browser\n   * navigation as well as SEO and social share platforms.\n   */\n  title?: string;\n\n  /**\n   * the template is used to bind to the layout\n   * configuration and css layout class\n   */\n  template?: string;\n\n  /**\n   * The page slots represent various sections on the page that\n   * can contain components.\n   */\n  slots: { [key: string]: CmsPageSlotConfig };\n}\n\n/**\n * The `CmsPageSlotsConfig` (plural) holds `CmsPageSlotConfig` objects.\n */\nexport interface CmsPageSlotsConfig {\n  [key: string]: CmsPageSlotConfig;\n}\n\n/**\n * The `CmsPageSlotConfig` is a simplified configuration model\n * that can be used to configure slots in static configuration,\n * rather than loading from a backend.\n */\nexport interface CmsPageSlotConfig {\n  componentIds?: string[];\n  properties?: any;\n}\n\n/**\n * The `CmsStructureConfig` is used to build pages in Spartacus by configuration\n * instead of using a backend CMS system. The configuration can be used to build\n * complete pages or parts of a page. The `CmsStructureConfig` is optimized to\n * only require the necessary properties. Adapter logic is applied to serialize\n * the `CmsStructureConfig` into the required UI model.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CmsStructureConfig extends CmsConfig {\n  cmsStructure: {\n    components?: { [key: string]: ContentSlotComponentData | any };\n    pages?: CmsPageConfig[];\n    slots?: CmsPageSlotsConfig;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport {\n  CmsPageConfig,\n  CmsPageSlotsConfig,\n  CmsStructureConfig,\n} from '../config/cms-structure.config';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { CmsStructureModel } from '../model/page.model';\n\n/**\n * Service that provides access to CMS structure from a static\n * configuration or configuration file. This class uses static\n * configuration is designed in async fashion so that configurations\n * can be loaded from a file or stream.\n *\n * The intent of the `CmsStructureConfigService` however is to provide\n * fast loading pages and default cms structure for commodity commerce.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CmsStructureConfigService {\n  constructor(protected cmsDataConfig: CmsStructureConfig) {}\n\n  /**\n   * Merge the cms structure to the pageStructure. The page structure\n   * can either hold complete page structures or global structures that\n   * might apply to all pages (such has header coponents).\n   */\n  mergePageStructure(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.mergePage(pageId, pageStructure).pipe(\n      switchMap((page) => this.mergeSlots(page))\n    );\n  }\n\n  /**\n   *\n   * Returns boolean observable to indicate whether the page should not be\n   * loaded from the backend. This is useful for pages which are comoditized\n   * and follow best practice.\n   *\n   * By default, configurable pages are driven by static configuration,\n   * in order to allow for fast loading pages (preventing network delays).\n   */\n  shouldIgnoreBackend(pageId: string): Observable<boolean> {\n    return this.getPageFromConfig(pageId).pipe(\n      map((page) => !!page && !!page.ignoreBackend)\n    );\n  }\n\n  /**\n   * returns an Observable component data from the static configuration.\n   */\n  getComponentFromConfig(\n    componentId: string\n  ): Observable<ContentSlotComponentData | any> {\n    return of(this.getComponentById(componentId));\n  }\n\n  /**\n   * returns an Observable components data from the static configuration.\n   */\n  getComponentsFromConfig(\n    ids: string[]\n  ): Observable<ContentSlotComponentData[]> {\n    return of(ids.map((id) => this.getComponentById(id)));\n  }\n\n  /**\n   * returns an observable with the `PageConfig`.\n   */\n  protected getPageFromConfig(pageId: string): Observable<CmsPageConfig> {\n    return of(\n      this.cmsDataConfig.cmsStructure && this.cmsDataConfig.cmsStructure.pages\n        ? this.cmsDataConfig.cmsStructure.pages.find((p) => p.pageId === pageId)\n        : null\n    );\n  }\n\n  /**\n   * Merge page data from the configuration into the given structure, if any.\n   * If the given page structure is empty, a page is created and the page slots are\n   * are merged into the page.\n   */\n  protected mergePage(\n    pageId: string,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.getPageFromConfig(pageId).pipe(\n      switchMap((page) => {\n        if (page) {\n          // serialize page data\n          if (!pageStructure.page) {\n            pageStructure.page = {\n              ...page,\n            };\n            pageStructure.page.slots = {};\n          }\n          if (!pageStructure.page.slots) {\n            pageStructure.page.slots = {};\n          }\n          return this.mergeSlots(pageStructure, page.slots);\n        } else {\n          return of(pageStructure);\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds any pre-configured slots for pages that do not use them.\n   * If pages have a slot for the given position, the configiuration\n   * is ingored. Even if the slot does not have inner structure (such as\n   * components), so that the cms structure is able to override the (static)\n   * configuration.\n   */\n  protected mergeSlots(\n    pageStructure: CmsStructureModel,\n    slots?: CmsPageSlotsConfig\n  ): Observable<CmsStructureModel> {\n    // if no slots have been given, we use the global configured slots\n    if (\n      !slots &&\n      this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.slots\n    ) {\n      slots = this.cmsDataConfig.cmsStructure.slots;\n    }\n\n    if (!slots) {\n      return of(pageStructure);\n    }\n\n    for (const position of Object.keys(slots)) {\n      if (!Object.keys(pageStructure.page.slots).includes(position)) {\n        // the global slot isn't yet part of the page structure\n        pageStructure.page.slots[position] = {};\n\n        for (const component of this.getComponentsByPosition(slots, position)) {\n          if (!pageStructure.page.slots[position].components) {\n            pageStructure.page.slots[position].components = [];\n          }\n          pageStructure.page.slots[position].components.push({\n            uid: component.uid,\n            flexType: component.flexType,\n            typeCode: component.typeCode,\n          });\n          if (!pageStructure.components) {\n            pageStructure.components = [];\n          }\n\n          pageStructure.components.push(component);\n        }\n      }\n    }\n\n    return of(pageStructure);\n  }\n\n  protected getComponentsByPosition(\n    slots: CmsPageSlotsConfig,\n    position: string\n  ): ContentSlotComponentData[] {\n    const components = [];\n    if (slots[position] && slots[position].componentIds) {\n      for (const componentId of slots[position].componentIds) {\n        if (\n          this.cmsDataConfig.cmsStructure &&\n          this.cmsDataConfig.cmsStructure.components\n        ) {\n          const component = this.cmsDataConfig.cmsStructure.components[\n            componentId\n          ];\n          if (component) {\n            components.push({ uid: componentId, ...component });\n          }\n        }\n      }\n    }\n    return components;\n  }\n\n  protected getComponentById(componentId: string): ContentSlotComponentData {\n    return this.cmsDataConfig.cmsStructure &&\n      this.cmsDataConfig.cmsStructure.components\n      ? this.cmsDataConfig.cmsStructure.components[componentId]\n      : undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { OccConfig } from '../../../occ/config/occ-config';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { CmsComponentAdapter } from './cms-component.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentConnector {\n  constructor(\n    protected cmsStructureConfigService: CmsStructureConfigService,\n    protected adapter: CmsComponentAdapter,\n    protected config: OccConfig\n  ) {}\n\n  get<T extends CmsComponent>(\n    id: string,\n    pageContext: PageContext\n  ): Observable<T> {\n    return this.cmsStructureConfigService\n      .getComponentFromConfig(id)\n      .pipe(\n        switchMap((configuredComponent) =>\n          configuredComponent\n            ? of(configuredComponent)\n            : this.adapter.load(id, pageContext)\n        )\n      );\n  }\n\n  getList(ids: string[], pageContext: PageContext): Observable<CmsComponent[]> {\n    return this.cmsStructureConfigService.getComponentsFromConfig(ids).pipe(\n      switchMap((configuredComponents) => {\n        // check if we have some components that are not loaded from configuration\n        const missingIds = configuredComponents.reduce(\n          (acc, component, index) => {\n            if (component === undefined) {\n              acc.push(ids[index]);\n            }\n            return acc;\n          },\n          []\n        );\n\n        if (missingIds.length > 0) {\n          return (this.config.backend.occ.legacy\n            ? this.adapter.findComponentsByIdsLegacy(missingIds, pageContext)\n            : this.adapter.findComponentsByIds(missingIds, pageContext)\n          ).pipe(\n            map((loadedComponents) => [\n              ...configuredComponents.filter(Boolean),\n              ...loadedComponents,\n            ])\n          );\n        } else {\n          return of(configuredComponents);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { CmsComponent } from '../../../model/cms.model';\nimport { PageContext } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { withdrawOn } from '../../../util/withdraw-on';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class ComponentsEffects {\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector\n  ) {}\n\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    )\n  );\n\n  loadComponent$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n      | CmsActions.LoadCmsComponentFail\n    > =>\n      this.actions$.pipe(\n        ofType<CmsActions.LoadCmsComponent>(CmsActions.LOAD_CMS_COMPONENT),\n        groupBy((actions) => serializePageContext(actions.payload.pageContext)),\n        mergeMap((actionGroup) =>\n          actionGroup.pipe(\n            bufferDebounceTime(debounce, scheduler),\n            mergeMap((actions) =>\n              this.loadComponentsEffect(\n                actions.map((action) => action.payload.uid),\n                actions[0].payload.pageContext\n              )\n            )\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private loadComponentsEffect(\n    componentUids: string[],\n    pageContext: PageContext\n  ): Observable<\n    | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n    | CmsActions.LoadCmsComponentFail\n  > {\n    return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(\n      switchMap((components) => {\n        const actions: (\n          | CmsActions.LoadCmsComponentSuccess<CmsComponent>\n          | CmsActions.LoadCmsComponentFail\n        )[] = [];\n        const uidsLeft = new Set<string>(componentUids);\n        for (const component of components) {\n          actions.push(\n            new CmsActions.LoadCmsComponentSuccess({\n              component,\n              uid: component.uid,\n              pageContext,\n            })\n          );\n          uidsLeft.delete(component.uid);\n        }\n        // we have to emit LoadCmsComponentFail for all component's uids that\n        // are missing from the response\n        uidsLeft.forEach((uid) => {\n          actions.push(\n            new CmsActions.LoadCmsComponentFail({\n              uid,\n              pageContext,\n            })\n          );\n        });\n        return from(actions);\n      }),\n      catchError((error) =>\n        from(\n          componentUids.map(\n            (uid) =>\n              new CmsActions.LoadCmsComponentFail({\n                uid,\n                error: makeErrorSerializable(error),\n                pageContext,\n              })\n          )\n        )\n      )\n    );\n  }\n}\n","/**\n * @license\n * The MIT License\n * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n *\n * See:\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/glob.ts\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/aio/tests/deployment/shared/helpers.ts#L17\n * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/service-worker/config/src/generator.ts#L86\n */\n\nconst QUESTION_MARK = '[^/]';\nconst WILD_SINGLE = '[^/]*';\nconst WILD_OPEN = '(?:.+\\\\/)?';\nconst TO_ESCAPE_BASE = [\n  { replace: /\\./g, with: '\\\\.' },\n  { replace: /\\+/g, with: '\\\\+' },\n  { replace: /\\*/g, with: WILD_SINGLE },\n];\nconst TO_ESCAPE_WILDCARD_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: QUESTION_MARK },\n];\nconst TO_ESCAPE_LITERAL_QM = [\n  ...TO_ESCAPE_BASE,\n  { replace: /\\?/g, with: '\\\\?' },\n];\n\n/**\n * Converts the glob-like pattern into regex string.\n *\n * Patterns use a limited glob format:\n * `**` matches 0 or more path segments\n * `*` matches 0 or more characters excluding `/`\n * `?` matches exactly one character excluding `/` (but when @param literalQuestionMark is true, `?` is treated as normal character)\n * The `!` prefix marks the pattern as being negative, meaning that only URLs that don't match the pattern will be included\n *\n * @param glob glob-like pattern\n * @param literalQuestionMark when true, it tells that `?` is treated as a normal character\n */\nexport function globToRegex(glob: string, literalQuestionMark = false): string {\n  const toEscape = literalQuestionMark\n    ? TO_ESCAPE_LITERAL_QM\n    : TO_ESCAPE_WILDCARD_QM;\n  const segments = glob.split('/').reverse();\n  let regex = '';\n  while (segments.length > 0) {\n    const segment = segments.pop();\n    if (segment === '**') {\n      if (segments.length > 0) {\n        regex += WILD_OPEN;\n      } else {\n        regex += '.*';\n      }\n    } else {\n      const processed = toEscape.reduce(\n        (seg, escape) => seg.replace(escape.replace, escape.with),\n        segment\n      );\n      regex += processed;\n      if (segments.length > 0) {\n        regex += '\\\\/';\n      }\n    }\n  }\n  return regex;\n}\n\n/**\n * For given list of glob-like patterns, returns a matcher function.\n *\n * The matcher returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n */\nexport function getGlobMatcher(patterns: string[]): (url: string) => boolean {\n  const processedPatterns: {\n    positive: boolean;\n    regex: RegExp;\n  }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n    positive,\n    regex: new RegExp(regex),\n  }));\n\n  const includePatterns = processedPatterns.filter((spec) => spec.positive);\n  const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n  return (url: string) =>\n    includePatterns.some((pattern) => pattern.regex.test(url)) &&\n    !excludePatterns.some((pattern) => pattern.regex.test(url));\n}\n\n/**\n * Converts list of glob-like patterns into list of RegExps with information whether the glob pattern is positive or negative\n */\nexport function processGlobPatterns(\n  urls: string[]\n): { positive: boolean; regex: string }[] {\n  return urls.map((url) => {\n    const positive = !url.startsWith('!');\n    url = positive ? url : url.substr(1);\n    return { positive, regex: `^${globToRegex(url)}$` };\n  });\n}\n","import { Injectable } from '@angular/core';\nimport { processGlobPatterns } from './glob-utils';\n\n@Injectable({ providedIn: 'root' })\nexport class GlobService {\n  /**\n   * For given list of glob-like patterns, returns a validator function.\n   *\n   * The validator returns true for given URL only when ANY of the positive patterns is matched and NONE of the negative ones.\n   */\n  getValidator(patterns: string[]): (url: string) => boolean {\n    const processedPatterns: {\n      positive: boolean;\n      regex: RegExp;\n    }[] = processGlobPatterns(patterns).map(({ positive, regex }) => ({\n      positive,\n      regex: new RegExp(regex),\n    }));\n\n    const includePatterns = processedPatterns.filter((spec) => spec.positive);\n    const excludePatterns = processedPatterns.filter((spec) => !spec.positive);\n\n    return (url: string) =>\n      includePatterns.some((pattern) => pattern.regex.test(url)) &&\n      !excludePatterns.some((pattern) => pattern.regex.test(url));\n  }\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  Route,\n  UrlMatcher,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\nimport { GlobService } from '../../util/glob.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlMatcherService {\n  constructor(protected globService: GlobService) {}\n\n  /**\n   * Returns a matcher that is always fails\n   */\n  getFalsy(): UrlMatcher {\n    return function falsyUrlMatcher(): null {\n      return null;\n    };\n  }\n\n  /**\n   * Returns a matcher for given list of paths\n   */\n  getFromPaths(paths: string[]): UrlMatcher {\n    const matchers = paths.map((path) => this.getFromPath(path));\n    const matcher = this.getCombined(matchers);\n    if (isDevMode()) {\n      matcher['_paths'] = paths; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns a matcher that combines the given matchers\n   * */\n  getCombined(matchers: UrlMatcher[]): UrlMatcher {\n    const matcher = function combinedUrlMatchers(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      for (let i = 0; i < matchers.length; i++) {\n        const result = matchers[i](segments, segmentGroup, route);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    };\n    if (isDevMode()) {\n      matcher['_matchers'] = matchers; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Similar to Angular's defaultUrlMatcher. Differences:\n   * - the `path` comes from function's argument, not from `route.path`\n   * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function\n   */\n  protected getFromPath(path: string = ''): UrlMatcher {\n    const matcher = function pathUrlMatcher(\n      segments: UrlSegment[],\n      segmentGroup: UrlSegmentGroup,\n      route: Route\n    ): UrlMatchResult | null {\n      /**\n       * @license\n       * The MIT License\n       * Copyright (c) 2010-2019 Google LLC. http://angular.io/license\n       *\n       * See:\n       * - https://github.com/angular/angular/blob/6f5f481fdae03f1d8db36284b64c7b82d9519d85/packages/router/src/shared.ts#L121\n       */\n\n      // use function's argument, not the `route.path`\n      if (path === '') {\n        if (\n          route.pathMatch === 'full' &&\n          (segmentGroup.hasChildren() || segments.length > 0)\n        ) {\n          return null;\n        }\n        return { consumed: [], posParams: {} };\n      }\n\n      const parts = path.split('/'); // use function's argument, not the `route.path`\n\n      if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n      }\n\n      if (\n        route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)\n      ) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n      }\n\n      const posParams: { [key: string]: UrlSegment } = {};\n\n      // Check each config part against the actual URL\n      for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n          posParams[part.substring(1)] = segment;\n        } else if (part !== segment.path) {\n          // The actual URL part does not match the config, no match\n          return null;\n        }\n      }\n\n      return { consumed: segments.slice(0, parts.length), posParams };\n    };\n    if (isDevMode()) {\n      matcher['_path'] = path; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher\n   */\n  getOpposite(originalMatcher: UrlMatcher): UrlMatcher {\n    const matcher = function oppositeUrlMatcher(\n      segments: UrlSegment[],\n      group: UrlSegmentGroup,\n      route: Route\n    ) {\n      return originalMatcher(segments, group, route)\n        ? null\n        : { consumed: segments, posParams: {} };\n    };\n    if (isDevMode()) {\n      matcher['_originalMatcher'] = originalMatcher; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n\n  /**\n   * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.\n   */\n  getFromGlob(globPatterns: string[]): UrlMatcher {\n    const globValidator = this.globService.getValidator(globPatterns);\n\n    const matcher = function globUrlMatcher(\n      segments: UrlSegment[]\n    ): UrlMatchResult | null {\n      const fullPath = `/${segments.map((s) => s.path).join('/')}`;\n\n      return globValidator(fullPath)\n        ? { consumed: segments, posParams: {} }\n        : null;\n    };\n    if (isDevMode()) {\n      matcher['_globPatterns'] = globPatterns; // property added for easier debugging of routes\n    }\n    return matcher;\n  }\n}\n","import { Injectable, InjectionToken, Injector, isDevMode } from '@angular/core';\nimport { Route, Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from '../url-matcher/url-matcher-factory';\nimport { RouteConfig } from './routes-config';\nimport { RoutingConfigService } from './routing-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurableRoutesService {\n  constructor(\n    protected injector: Injector,\n    protected routingConfigService: RoutingConfigService,\n    protected urlMatcherService: UrlMatcherService\n  ) {}\n\n  protected initCalled = false; // guard not to call init() more than once\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   * Can be called only once.\n   */\n  init(): void {\n    if (!this.initCalled) {\n      this.initCalled = true;\n\n      this.configure();\n    }\n  }\n\n  /**\n   * Enhances existing Angular routes using the routing config of Spartacus.\n   */\n  protected configure(): void {\n    // Router could not be injected in constructor due to cyclic dependency with APP_INITIALIZER:\n    const router = this.injector.get(Router);\n    router.resetConfig(this.configureRoutes(router.config));\n  }\n\n  /**\n   * Sets the property `path` or `matcher` for the given routes, based on the Spartacus' routing configuration.\n   *\n   * @param routes list of Angular `Route` objects\n   */\n  protected configureRoutes(routes: Routes): Routes {\n    return routes.map((route) => {\n      const configuredRoute = this.configureRoute(route);\n\n      if (route.children && route.children.length) {\n        configuredRoute.children = this.configureRoutes(route.children);\n      }\n      return configuredRoute;\n    });\n  }\n\n  /**\n   * Sets the property `path` or `matcher` of the `Route`, based on the Spartacus' routing configuration.\n   * Uses the property `data.cxRoute` to determine the name of the route.\n   * It's the same name used as a key in the routing configuration: `routing.routes[ROUTE NAME]`.\n   *\n   * @param route Angular `Route` object\n   */\n  protected configureRoute(route: Route): Route {\n    const routeName = this.getRouteName(route);\n    if (routeName) {\n      const routeConfig = this.routingConfigService.getRouteConfig(routeName);\n      this.validateRouteConfig(routeConfig, routeName, route);\n\n      if (routeConfig?.disabled) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFalsy(),\n        };\n      } else if (routeConfig?.matchers) {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.resolveUrlMatchers(route, routeConfig?.matchers),\n        };\n      } else if (routeConfig?.paths?.length === 1) {\n        delete route.matcher;\n        return { ...route, path: routeConfig?.paths[0] };\n      } else {\n        delete route.path;\n        return {\n          ...route,\n          matcher: this.urlMatcherService.getFromPaths(\n            routeConfig?.paths || []\n          ),\n        };\n      }\n    }\n    return route; // if route doesn't have a name, just pass the original route\n  }\n\n  /**\n   * Creates a single `UrlMatcher` based on given matchers and factories of matchers.\n   *\n   * @param route Route object\n   * @param matchersOrFactories `UrlMatcher`s or injection tokens with a factory functions\n   *  that create UrlMatchers based on the given route.\n   */\n  protected resolveUrlMatchers(\n    route: Route,\n    matchersOrFactories: RouteConfig['matchers']\n  ): UrlMatcher {\n    const matchers: UrlMatcher[] = matchersOrFactories.map(\n      (matcherOrFactory) => {\n        return typeof matcherOrFactory === 'function'\n          ? matcherOrFactory // matcher\n          : this.resolveUrlMatcherFactory(route, matcherOrFactory); // factory injection token\n      }\n    );\n    return this.urlMatcherService.getCombined(matchers);\n  }\n\n  /**\n   * Creates an `UrlMatcher` based on the given route, using the factory function coming from the given injection token.\n   *\n   * @param route Route object\n   * @param factoryToken injection token with a factory function that will create an UrlMatcher using given route\n   */\n  protected resolveUrlMatcherFactory(\n    route: Route,\n    factoryToken: InjectionToken<UrlMatcherFactory>\n  ): UrlMatcher {\n    const factory = this.injector.get(factoryToken);\n    return factory(route);\n  }\n\n  /**\n   * Returns the name of the Route stored in its property `data.cxRoute`\n   * @param route\n   */\n  protected getRouteName(route: Route): string {\n    return route.data && route.data.cxRoute;\n  }\n\n  protected validateRouteConfig(\n    routeConfig: RouteConfig,\n    routeName: string,\n    route: Route\n  ) {\n    if (isDevMode()) {\n      // - null value of routeConfig or routeConfig.paths means explicit switching off the route - it's valid config\n      // - routeConfig with defined `matchers` is valid, even if `paths` are undefined\n      if (\n        routeConfig === null ||\n        routeConfig.paths === null ||\n        routeConfig?.matchers\n      ) {\n        return;\n      }\n\n      // undefined value of routeConfig or routeConfig.paths is a misconfiguration\n      if (!routeConfig?.paths) {\n        this.warn(\n          `Could not configure the named route '${routeName}'`,\n          route,\n          `due to undefined config or undefined 'paths' property for this route`\n        );\n        return;\n      }\n    }\n  }\n\n  private warn(...args) {\n    if (isDevMode()) {\n      console.warn(...args);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { UrlCommands } from './url-command';\n\n@Pipe({\n  name: 'cxUrl',\n})\nexport class UrlPipe implements PipeTransform {\n  constructor(private urlService: SemanticPathService) {}\n\n  transform(commands: UrlCommands): any[] {\n    return this.urlService.transform(commands);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { SemanticPathService } from './semantic-path.service';\nimport { Product } from '../../../model/product.model';\n@Pipe({\n  name: 'cxProductUrl',\n})\nexport class ProductURLPipe implements PipeTransform {\n  constructor(private semanticPath: SemanticPathService) {}\n  transform(product: Product) {\n    return this.semanticPath.transform({ cxRoute: 'product', params: product });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlPipe } from './url.pipe';\nimport { ProductURLPipe } from './product-url.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [UrlPipe, ProductURLPipe],\n  exports: [UrlPipe, ProductURLPipe],\n})\nexport class UrlModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ExternalRoutesConfig {\n  routing?: {\n    internal?: string[];\n  };\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({ providedIn: 'root' })\nexport class ExternalRoutesGuard implements CanActivate {\n  constructor(\n    protected winRef: WindowRef,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Redirects to different storefront system for anticipated URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (isPlatformBrowser(this.platformId)) {\n      this.redirect(route, state);\n    }\n    return false;\n  }\n\n  /**\n   * Redirects to anticipated URL using full page reload, not Angular routing\n   */\n  protected redirect(_: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const window = this.winRef.nativeWindow;\n\n    if (window && window.location) {\n      window.location.href = state.url;\n    }\n  }\n}\n","import { ExternalRoutesService } from './external-routes.service';\n\nexport function addExternalRoutesFactory(service: ExternalRoutesService) {\n  const result = () => {\n    service.addRoutes();\n  };\n  return result;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Router, Routes, UrlMatcher } from '@angular/router';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { ExternalRoutesConfig } from './external-routes-config';\nimport { ExternalRoutesGuard } from './external-routes.guard';\n\n/**\n * Service that helps redirecting to different storefront systems for configured URLs\n */\n@Injectable()\nexport class ExternalRoutesService {\n  constructor(\n    protected config: ExternalRoutesConfig,\n    protected urlMatcherService: UrlMatcherService,\n    protected injector: Injector\n  ) {}\n\n  protected get internalUrlPatterns(): ExternalRoutesConfig['routing']['internal'] {\n    return (\n      (this.config && this.config.routing && this.config.routing.internal) || []\n    );\n  }\n\n  /**\n   * Prepends routes (to the Router.config) that are responsible for redirecting to a different storefront system\n   */\n  addRoutes(): void {\n    const router: Router = this.injector.get(Router);\n    const newRoutes = this.getRoutes();\n    if (newRoutes.length) {\n      router.resetConfig([...newRoutes, ...router.config]);\n    }\n  }\n\n  /**\n   * Returns routes that are responsible for redirection to different storefront systems\n   */\n  protected getRoutes(): Routes {\n    if (!this.internalUrlPatterns.length) {\n      return [];\n    }\n    const routes: Routes = [];\n\n    routes.push({\n      pathMatch: 'full',\n      matcher: this.getUrlMatcher(),\n      canActivate: [ExternalRoutesGuard],\n      component: {} as any,\n    });\n\n    return routes;\n  }\n\n  /**\n   * Returns the URL matcher for the external route\n   */\n  protected getUrlMatcher(): UrlMatcher {\n    const matcher = this.urlMatcherService.getFromGlob(\n      this.internalUrlPatterns\n    );\n    return this.urlMatcherService.getOpposite(matcher); // the external route should be activated only when it's NOT an internal route\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { addExternalRoutesFactory } from './external-routes.providers';\nimport { ExternalRoutesService } from './external-routes.service';\n\n/**\n * Prepends the external route that redirects to a different storefront system for configured URLs\n */\n@NgModule()\nexport class ExternalRoutesModule {\n  static forRoot(): ModuleWithProviders<ExternalRoutesModule> {\n    return {\n      ngModule: ExternalRoutesModule,\n      providers: [\n        ExternalRoutesService,\n        {\n          provide: APP_INITIALIZER,\n          multi: true,\n          useFactory: addExternalRoutesFactory,\n          deps: [ExternalRoutesService],\n        },\n      ],\n    };\n  }\n}\n","import { PageType } from '../../model/cms.model';\n\nexport class PageContext {\n  id: string;\n  type?: PageType;\n\n  constructor(id: string, type?: PageType) {\n    this.id = id;\n    this.type = type;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingConfig } from '../configurable-routes/config/routing-config';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesService {\n  private nonProtectedPaths: string[][] = []; // arrays of paths' segments list\n\n  protected get routingConfig(): RoutingConfig['routing'] {\n    return this.config && this.config.routing;\n  }\n\n  /**\n   * Returns 'protected' property (boolean) from routing config\n   *\n   * @returns boolean\n   */\n  public get shouldProtect(): boolean {\n    return this.routingConfig.protected;\n  }\n\n  constructor(protected config: RoutingConfig) {\n    if (this.shouldProtect) {\n      // pre-process config for performance:\n      this.nonProtectedPaths = this.getNonProtectedPaths().map((path) =>\n        this.getSegments(path)\n      );\n    }\n  }\n\n  /**\n   * Tells if the url is protected\n   */\n  isUrlProtected(urlSegments: string[]): boolean {\n    return (\n      this.shouldProtect &&\n      !this.matchAnyPath(urlSegments, this.nonProtectedPaths)\n    );\n  }\n\n  /**\n   * Tells whether the url matches at least one of the paths\n   */\n  protected matchAnyPath(\n    urlSegments: string[],\n    pathsSegments: string[][]\n  ): boolean {\n    return pathsSegments.some((pathSegments) =>\n      this.matchPath(urlSegments, pathSegments)\n    );\n  }\n\n  /**\n   * Tells whether the url matches the path\n   */\n  protected matchPath(urlSegments: string[], pathSegments: string[]): boolean {\n    if (urlSegments.length !== pathSegments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < pathSegments.length; i++) {\n      const pathSeg = pathSegments[i];\n      const urlSeg = urlSegments[i];\n\n      // compare only static segments:\n      if (!pathSeg.startsWith(':') && pathSeg !== urlSeg) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns a list of paths that are not protected\n   */\n  protected getNonProtectedPaths(): string[] {\n    return Object.values(this.routingConfig.routes).reduce(\n      (acc, routeConfig) =>\n        routeConfig.protected === false && // must be explicitly false, ignore undefined\n        routeConfig.paths &&\n        routeConfig.paths.length\n          ? acc.concat(routeConfig.paths)\n          : acc,\n      []\n    );\n  }\n\n  /**\n   * Splits the url by slashes\n   */\n  protected getSegments(url: string): string[] {\n    return (url || '').split('/');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { AuthGuard } from '../../auth/guards/auth.guard';\nimport { ProtectedRoutesService } from './protected-routes.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProtectedRoutesGuard implements CanActivate {\n  constructor(\n    protected service: ProtectedRoutesService,\n    protected authGuard: AuthGuard\n  ) {}\n\n  /**\n   * When the anticipated url is protected, it switches to the AuthGuard. Otherwise emits true.\n   */\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    let urlSegments: string[] = route.url.map((seg) => seg.path);\n\n    // For the root path `/` ActivatedRoute contains an empty array of segments:\n    urlSegments = urlSegments.length ? urlSegments : [''];\n\n    if (this.service.isUrlProtected(urlSegments)) {\n      return this.authGuard.canActivate();\n    }\n    return of(true);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { CmsRoute } from '../../models/cms-route';\nimport { RoutingActions } from '../actions/index';\n\n@Injectable()\nexport class RouterEffects {\n  @Effect({ dispatch: false })\n  navigate$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap(({ path, query: queryParams, extras }) => {\n      this.router.navigate(path, { queryParams, ...extras });\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBuUrl$: Observable<any> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_GO_BY_URL),\n    map((action: RoutingActions.RouteGoAction) => action.payload),\n    tap((url) => {\n      this.router.navigateByUrl(url);\n    })\n  );\n\n  @Effect({ dispatch: false })\n  clearCmsRoutes$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    tap(() => {\n      const filteredConfig = this.router.config.filter(\n        (route: CmsRoute) => !(route.data && route.data.cxCmsRouteContext)\n      );\n      if (filteredConfig.length !== this.router.config.length) {\n        this.router.resetConfig(filteredConfig);\n      }\n    })\n  );\n\n  @Effect({ dispatch: false })\n  navigateBack$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_BACK),\n    tap(() => this.location.back())\n  );\n\n  @Effect({ dispatch: false })\n  navigateForward$: Observable<Action> = this.actions$.pipe(\n    ofType(RoutingActions.ROUTER_FORWARD),\n    tap(() => this.location.forward())\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private location: Location\n  ) {}\n}\n","import { RouterEffects } from './router.effect';\n\nexport const effects: any[] = [RouterEffects];\n\nexport * from './router.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\nimport * as fromNgrxRouter from '@ngrx/router-store';\nimport { ActionReducerMap } from '@ngrx/store';\nimport { PageType } from '../../../model/cms.model';\nimport { CmsActivatedRouteSnapshot } from '../../models/cms-route';\nimport { PageContext } from '../../models/page-context.model';\nimport {\n  ActivatedRouterStateSnapshot,\n  RouterState,\n  State,\n} from '../routing-state';\n\nexport const initialState: RouterState = {\n  navigationId: 0,\n  state: {\n    url: '',\n    queryParams: {},\n    params: {},\n    context: {\n      id: '',\n    },\n    cmsRequired: false,\n  },\n  nextState: undefined,\n};\n\nexport function getReducers(): ActionReducerMap<State> {\n  return {\n    router: reducer,\n  };\n}\n\nexport function reducer(\n  state: RouterState = initialState,\n  action: any\n): RouterState {\n  switch (action.type) {\n    case fromNgrxRouter.ROUTER_NAVIGATION: {\n      return {\n        ...state,\n        nextState: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_ERROR:\n    case fromNgrxRouter.ROUTER_CANCEL: {\n      return {\n        ...state,\n        nextState: undefined,\n      };\n    }\n\n    case fromNgrxRouter.ROUTER_NAVIGATED: {\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n        nextState: undefined,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  State\n>> = new InjectionToken<ActionReducerMap<State>>('RouterReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\n/* The serializer is there to parse the RouterStateSnapshot,\nand to reduce the amount of properties to be passed to the reducer.\n */\nexport class CustomSerializer\n  implements\n    fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot {\n    const { url } = routerState;\n    const { queryParams } = routerState.root;\n\n    let state: CmsActivatedRouteSnapshot = routerState.root as CmsActivatedRouteSnapshot;\n    let cmsRequired = false;\n    let context: PageContext;\n\n    while (state.firstChild) {\n      state = state.firstChild as CmsActivatedRouteSnapshot;\n\n      // we use context information embedded in Cms driven routes from any parent route\n      if (state.data && state.data.cxCmsRouteContext) {\n        context = state.data.cxCmsRouteContext;\n      }\n\n      // we assume, that any route that has CmsPageGuard or it's child\n      // is cmsRequired\n      if (\n        !cmsRequired &&\n        (context ||\n          (state.routeConfig &&\n            state.routeConfig.canActivate &&\n            state.routeConfig.canActivate.find(\n              (x) => x && x.guardName === 'CmsPageGuard'\n            )))\n      ) {\n        cmsRequired = true;\n      }\n    }\n    const { params } = state;\n\n    // we give smartedit preview page a PageContext\n    if (state.url.length > 0 && state.url[0].path === 'cx-preview') {\n      context = {\n        id: 'smartedit-preview',\n        type: PageType.CONTENT_PAGE,\n      };\n    } else {\n      if (params['productCode']) {\n        context = { id: params['productCode'], type: PageType.PRODUCT_PAGE };\n      } else if (params['categoryCode']) {\n        context = { id: params['categoryCode'], type: PageType.CATEGORY_PAGE };\n      } else if (params['brandCode']) {\n        context = { id: params['brandCode'], type: PageType.CATEGORY_PAGE };\n      } else if (state.data.pageLabel !== undefined) {\n        context = { id: state.data.pageLabel, type: PageType.CONTENT_PAGE };\n      } else if (!context) {\n        if (state.url.length > 0) {\n          const pageLabel =\n            '/' + state.url.map((urlSegment) => urlSegment.path).join('/');\n          context = {\n            id: pageLabel,\n            type: PageType.CONTENT_PAGE,\n          };\n        } else {\n          context = {\n            id: 'homepage',\n            type: PageType.CONTENT_PAGE,\n          };\n        }\n      }\n    }\n\n    return { url, queryParams, params, context, cmsRequired };\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterState,\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { ConfigurableRoutesService } from './configurable-routes/configurable-routes.service';\nimport { effects } from './store/effects/index';\nimport {\n  CustomSerializer,\n  reducerProvider,\n  reducerToken,\n} from './store/reducers/router.reducer';\nimport { ROUTING_FEATURE } from './store/routing-state';\n\nexport function initConfigurableRoutes(\n  service: ConfigurableRoutesService\n): () => void {\n  const result = () => service.init(); // workaround for AOT compilation (see https://stackoverflow.com/a/51977115)\n  return result;\n}\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ROUTING_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n    StoreRouterConnectingModule.forRoot({\n      routerState: RouterState.Minimal,\n      stateKey: ROUTING_FEATURE, // name of reducer key\n    }),\n  ],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [\n        reducerProvider,\n        {\n          provide: RouterStateSerializer,\n          useClass: CustomSerializer,\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: initConfigurableRoutes,\n          deps: [ConfigurableRoutesService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport { RoutingConfigService } from '../configurable-routes';\nimport { UrlMatcherService } from '../services/url-matcher.service';\nimport { UrlMatcherFactory } from './url-matcher-factory';\n\nexport function getDefaultUrlMatcherFactory(\n  routingConfigService: RoutingConfigService,\n  urlMatcherService: UrlMatcherService\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const routeName = route.data && route.data['cxRoute'];\n    const routeConfig = routingConfigService.getRouteConfig(routeName);\n    const paths = (routeConfig && routeConfig.paths) || [];\n    return urlMatcherService.getFromPaths(paths);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for spartacus routes containing property `data.cxRoute`.\n * The provided url matcher matches the configured `paths` from routing config.\n *\n * If this matcher doesn't fit the requirements, it can be replaced with custom matcher\n * or additional matchers can be added for a specific route. See for example PRODUCT_DETAILS_URL_MATCHER.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const DEFAULT_URL_MATCHER = new InjectionToken<UrlMatcherFactory>(\n  'DEFAULT_URL_MATCHER',\n  {\n    providedIn: 'root',\n    factory: () =>\n      getDefaultUrlMatcherFactory(\n        inject(RoutingConfigService),\n        inject(UrlMatcherService)\n      ),\n  }\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, filter, map, mergeMap, take } from 'rxjs/operators';\nimport { RoutingService } from '../../../routing/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsComponentConnector } from '../../connectors/component/cms-component.connector';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class NavigationEntryItemEffects {\n  @Effect()\n  loadNavigationItems$: Observable<\n    | CmsActions.LoadCmsNavigationItemsSuccess\n    | CmsActions.LoadCmsNavigationItemsFail\n  > = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_NAVIGATION_ITEMS),\n    map((action: CmsActions.LoadCmsNavigationItems) => action.payload),\n    map((payload) => {\n      return {\n        ids: this.getIdListByItemType(payload.items),\n        nodeId: payload.nodeId,\n      };\n    }),\n    mergeMap((data) => {\n      if (data.ids.componentIds.length > 0) {\n        return this.routingService.getRouterState().pipe(\n          filter((routerState) => routerState !== undefined),\n          map((routerState) => routerState.state.context),\n          take(1),\n          mergeMap((pageContext) =>\n            // download all items in one request\n            this.cmsComponentConnector\n              .getList(data.ids.componentIds, pageContext)\n              .pipe(\n                map(\n                  (components) =>\n                    new CmsActions.LoadCmsNavigationItemsSuccess({\n                      nodeId: data.nodeId,\n                      components: components,\n                    })\n                ),\n                catchError((error) =>\n                  of(\n                    new CmsActions.LoadCmsNavigationItemsFail(\n                      data.nodeId,\n                      makeErrorSerializable(error)\n                    )\n                  )\n                )\n              )\n          )\n        );\n      } else if (data.ids.pageIds.length > 0) {\n        // TODO: future work\n        // dispatch action to load cms page one by one\n      } else if (data.ids.mediaIds.length > 0) {\n        // TODO: future work\n        // send request to get list of media\n      } else {\n        return of(\n          new CmsActions.LoadCmsNavigationItemsFail(\n            data.nodeId,\n            'navigation nodes are empty'\n          )\n        );\n      }\n    })\n  );\n\n  // We only consider 3 item types: cms page, cms component, and media.\n  getIdListByItemType(\n    itemList: any[]\n  ): { pageIds: string[]; componentIds: string[]; mediaIds: string[] } {\n    const pageIds: string[] = [];\n    const componentIds: string[] = [];\n    const mediaIds: string[] = [];\n\n    itemList.forEach((item) => {\n      if (item.superType === 'AbstractCMSComponent') {\n        componentIds.push(item.id);\n      } else if (item.superType === 'AbstractPage') {\n        pageIds.push(item.id);\n      } else if (item.superType === 'AbstractMedia') {\n        mediaIds.push(item.id);\n      }\n    });\n    return { pageIds: pageIds, componentIds: componentIds, mediaIds: mediaIds };\n  }\n\n  constructor(\n    private actions$: Actions,\n    private cmsComponentConnector: CmsComponentConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { CmsPageAdapter } from './cms-page.adapter';\nimport { CmsStructureConfigService } from '../../services/cms-structure-config.service';\nimport { PageContext } from '../../../routing/models/page-context.model';\nimport { CmsStructureModel } from '../../model/page.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageConnector {\n  constructor(\n    protected cmsPageAdapter: CmsPageAdapter,\n    protected cmsStructureConfigService: CmsStructureConfigService\n  ) {}\n\n  /**\n   * Returns an observable with the page structure. The page structure is\n   * typically loaded from a backend, but can also be returned from static\n   * configuration (see `CmsStructureConfigService`).\n   */\n  get(pageContext: PageContext): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService\n      .shouldIgnoreBackend(pageContext.id)\n      .pipe(\n        switchMap((loadFromConfig) => {\n          if (!loadFromConfig) {\n            return this.cmsPageAdapter.load(pageContext).pipe(\n              catchError((error) => {\n                if (\n                  error instanceof HttpErrorResponse &&\n                  error.status === 400\n                ) {\n                  return of({});\n                } else {\n                  return throwError(error);\n                }\n              })\n            );\n          } else {\n            return of({});\n          }\n        }),\n        switchMap((page) => this.mergeDefaultPageStructure(pageContext, page))\n      );\n  }\n\n  /**\n   *\n   * Merge default page structure inot the given `CmsStructureModel`.\n   * This is benefitial for a fast setup of the UI without necessary\n   * finegrained CMS setup.\n   */\n  private mergeDefaultPageStructure(\n    pageContext: PageContext,\n    pageStructure: CmsStructureModel\n  ): Observable<CmsStructureModel> {\n    return this.cmsStructureConfigService.mergePageStructure(\n      pageContext.id,\n      pageStructure\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n} from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { RoutingService } from '../../../routing/index';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { CmsPageConnector } from '../../connectors/page/cms-page.connector';\nimport { CmsStructureModel } from '../../model/page.model';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\n\n@Injectable()\nexport class PageEffects {\n  @Effect()\n  refreshPage$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      AuthActions.LOGOUT,\n      AuthActions.LOGIN\n    ),\n    switchMap(() =>\n      this.routingService.getRouterState().pipe(\n        filter(\n          (routerState) =>\n            routerState &&\n            routerState.state &&\n            routerState.state.cmsRequired &&\n            !routerState.nextState\n        ),\n        take(1),\n        map((routerState) => routerState.state.context),\n        mergeMap((context) => of(new CmsActions.LoadCmsPageData(context)))\n      )\n    )\n  );\n\n  @Effect()\n  loadPageData$: Observable<Action> = this.actions$.pipe(\n    ofType(CmsActions.LOAD_CMS_PAGE_DATA),\n    map((action: CmsActions.LoadCmsPageData) => action.payload),\n    groupBy((pageContext) => serializePageContext(pageContext)),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((pageContext) =>\n          this.cmsPageConnector.get(pageContext).pipe(\n            mergeMap((cmsStructure: CmsStructureModel) => {\n              const actions: Action[] = [\n                new CmsActions.CmsGetComponentFromPage(\n                  cmsStructure.components.map((component) => ({\n                    component,\n                    pageContext,\n                  }))\n                ),\n                new CmsActions.LoadCmsPageDataSuccess(\n                  pageContext,\n                  cmsStructure.page\n                ),\n              ];\n\n              const pageLabel = cmsStructure.page.label;\n              // For content pages the page label returned from backend can be different than page ID initially assumed from route.\n              // In such a case let's save the success response not only for initially assumed page ID, but also for correct page label.\n              if (pageLabel && pageLabel !== pageContext.id) {\n                actions.unshift(\n                  new CmsActions.CmsSetPageSuccessIndex(\n                    { id: pageLabel, type: pageContext.type },\n                    cmsStructure.page\n                  )\n                );\n              }\n\n              return actions;\n            }),\n            catchError((error) =>\n              of(\n                new CmsActions.LoadCmsPageDataFail(\n                  pageContext,\n                  makeErrorSerializable(error)\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cmsPageConnector: CmsPageConnector,\n    private routingService: RoutingService\n  ) {}\n}\n","import { ComponentsEffects } from './components.effect';\nimport { NavigationEntryItemEffects } from './navigation-entry-item.effect';\nimport { PageEffects } from './page.effect';\n\nexport const effects: any[] = [\n  PageEffects,\n  ComponentsEffects,\n  NavigationEntryItemEffects,\n];\n\nexport * from './components.effect';\nexport * from './navigation-entry-item.effect';\nexport * from './page.effect';\n","import { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { serializePageContext } from '../../utils/cms-utils';\nimport { CmsActions } from '../actions/index';\nimport { ComponentsContext } from '../cms-state';\n\nexport const initialState: ComponentsContext = {\n  component: undefined,\n  pageContext: {},\n};\n\nfunction componentExistsReducer<T>(\n  state: boolean | undefined,\n  action: CmsActions.CmsComponentAction<T>\n): boolean {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL:\n      return false;\n\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE:\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS:\n      return true;\n  }\n  return state;\n}\n\nexport function reducer<T>(\n  state = initialState,\n  action: CmsActions.CmsComponentAction<T>\n): ComponentsContext {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_COMPONENT: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_FAIL: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.LOAD_CMS_COMPONENT_SUCCESS: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      const context = serializePageContext(action.payload.pageContext, true);\n      return {\n        ...state,\n        component: action.payload.component as T,\n        pageContext: {\n          ...state.pageContext,\n          [context]: pageContextReducer(state.pageContext[context], action),\n        },\n      };\n    }\n    case CmsActions.CMS_GET_COMPONENT_FROM_PAGE: {\n      const pageContextReducer = loaderReducer<boolean>(\n        action.meta.entityType,\n        componentExistsReducer\n      );\n      if (!Array.isArray(action.payload)) {\n        const context = serializePageContext(action.payload.pageContext, true);\n        return {\n          ...state,\n          component: action.payload.component as T,\n          pageContext: {\n            ...state.pageContext,\n            [context]: pageContextReducer(state.pageContext[context], action),\n          },\n        };\n      }\n    }\n  }\n  return state;\n}\n","import { NodeItem } from '../../model/node-item.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: NodeItem = undefined;\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.CmsNavigationEntryItemAction\n): NodeItem {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_NAVIGATION_ITEMS_SUCCESS: {\n      if (action.payload.components) {\n        const components = action.payload.components;\n        const newItem: NodeItem = components.reduce(\n          (compItems: { [uid_type: string]: any }, component: any) => {\n            return {\n              ...compItems,\n              [`${component.uid}_AbstractCMSComponent`]: component,\n            };\n          },\n          {\n            ...{},\n          }\n        );\n\n        return {\n          ...state,\n          ...newItem,\n        };\n      }\n    }\n  }\n\n  return state;\n}\n","import { EntityState } from '../../../state/utils/entity/entity-state';\nimport { Page } from '../../model/page.model';\nimport { CmsActions } from '../actions/index';\n\nexport const initialState: EntityState<Page> = { entities: {} };\n\nexport function reducer(\n  state = initialState,\n  action: CmsActions.LoadCmsPageDataSuccess\n): EntityState<Page> {\n  switch (action.type) {\n    case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n      const page: Page = action.payload;\n      return { ...state, entities: { ...state.entities, [page.pageId]: page } };\n    }\n  }\n  return state;\n}\n","import { CmsActions } from '../actions/index';\n\nexport const initialState = undefined;\n\nexport function reducer(\n  entityType: string\n): (\n  state: string,\n  action:\n    | CmsActions.LoadCmsPageDataSuccess\n    | CmsActions.LoadCmsPageDataFail\n    | CmsActions.CmsSetPageFailIndex\n) => string {\n  return (\n    state = initialState,\n    action:\n      | CmsActions.LoadCmsPageDataSuccess\n      | CmsActions.LoadCmsPageDataFail\n      | CmsActions.CmsSetPageSuccessIndex\n      | CmsActions.CmsSetPageFailIndex\n  ): string => {\n    if (action.meta && action.meta.entityType === entityType) {\n      switch (action.type) {\n        case CmsActions.LOAD_CMS_PAGE_DATA_SUCCESS: {\n          return action.payload.pageId;\n        }\n\n        case CmsActions.LOAD_CMS_PAGE_DATA_FAIL: {\n          return initialState;\n        }\n\n        case CmsActions.CMS_SET_PAGE_FAIL_INDEX: {\n          return action.payload;\n        }\n\n        case CmsActions.CMS_SET_PAGE_SUCCESS_INDEX: {\n          return action.payload.pageId;\n        }\n      }\n    }\n    return state;\n  };\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { PageType } from '../../../model/cms.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { entityReducer } from '../../../state/utils/entity/entity.reducer';\nimport { NodeItem } from '../../model/node-item.model';\nimport {\n  CmsState,\n  COMPONENT_ENTITY,\n  NAVIGATION_DETAIL_ENTITY,\n  StateWithCms,\n} from '../cms-state';\nimport * as fromComponentsReducer from './components.reducer';\nimport * as fromNavigation from './navigation-entry-item.reducer';\nimport * as fromPageReducer from './page-data.reducer';\nimport * as fromPageIndexReducer from './page-index.reducer';\n\nexport function getReducers(): ActionReducerMap<CmsState> {\n  return {\n    page: combineReducers({\n      pageData: fromPageReducer.reducer,\n      index: combineReducers({\n        content: entityLoaderReducer<string>(\n          PageType.CONTENT_PAGE,\n          fromPageIndexReducer.reducer(PageType.CONTENT_PAGE)\n        ),\n        product: entityLoaderReducer<string>(\n          PageType.PRODUCT_PAGE,\n          fromPageIndexReducer.reducer(PageType.PRODUCT_PAGE)\n        ),\n        category: entityLoaderReducer<string>(\n          PageType.CATEGORY_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATEGORY_PAGE)\n        ),\n        catalog: entityLoaderReducer<string>(\n          PageType.CATALOG_PAGE,\n          fromPageIndexReducer.reducer(PageType.CATALOG_PAGE)\n        ),\n      }),\n    }),\n    components: entityReducer(COMPONENT_ENTITY, fromComponentsReducer.reducer),\n    navigation: entityLoaderReducer<NodeItem>(\n      NAVIGATION_DETAIL_ENTITY,\n      fromNavigation.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  CmsState\n>> = new InjectionToken<ActionReducerMap<CmsState>>('CmsReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCmsState(\n  reducer: ActionReducer<StateWithCms, Action>\n): ActionReducer<StateWithCms, Action> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.LANGUAGE_CHANGE ||\n      action.type === AuthActions.LOGOUT ||\n      action.type === AuthActions.LOGIN\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<StateWithCms>[] = [clearCmsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { CMS_FEATURE } from './cms-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function cmsStoreConfigFactory(): StateConfig {\n  // if we want to reuse CMS_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [CMS_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(CMS_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(cmsStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class CmsStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultCmsModuleConfig } from './config/default-cms-config';\nimport { CmsService } from './facade/cms.service';\nimport { CmsPageTitleModule } from './page/page.module';\nimport { CmsStoreModule } from './store/cms-store.module';\n\n@NgModule({\n  imports: [CmsStoreModule, CmsPageTitleModule],\n})\nexport class CmsModule {\n  static forRoot(): ModuleWithProviders<CmsModule> {\n    return {\n      ngModule: CmsModule,\n      providers: [CmsService, provideDefaultConfig(defaultCmsModuleConfig)],\n    };\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { Page, PageMeta } from '../model/page.model';\nimport { PageMetaResolver } from '../page/page-meta.resolver';\nimport { CmsService } from './cms.service';\nimport { resolveApplicable } from '../../util/applicable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageMetaService {\n  constructor(\n    @Optional()\n    @Inject(PageMetaResolver)\n    protected resolvers: PageMetaResolver[],\n    protected cms: CmsService\n  ) {\n    this.resolvers = this.resolvers || [];\n  }\n  /**\n   * The list of resolver interfaces will be evaluated for the pageResolvers.\n   *\n   * TOOD: optimize browser vs SSR resolvers; image, robots and description\n   *       aren't needed during browsing.\n   * TODO: we can make the list of resolver types configurable\n   */\n  protected resolverMethods: { [key: string]: string } = {\n    title: 'resolveTitle',\n    heading: 'resolveHeading',\n    description: 'resolveDescription',\n    breadcrumbs: 'resolveBreadcrumbs',\n    image: 'resolveImage',\n    robots: 'resolveRobots',\n  };\n\n  getMeta(): Observable<PageMeta> {\n    return this.cms.getCurrentPage().pipe(\n      filter(Boolean),\n      switchMap((page: Page) => {\n        const metaResolver = this.getMetaResolver(page);\n\n        if (metaResolver) {\n          return this.resolve(metaResolver);\n        } else {\n          // we do not have a page resolver\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * If a `PageResolver` has implemented a resolver interface, the resolved data\n   * is merged into the `PageMeta` object.\n   * @param metaResolver\n   */\n  protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta> {\n    const resolveMethods: any[] = Object.keys(this.resolverMethods)\n      .filter((key) => metaResolver[this.resolverMethods[key]])\n      .map((key) =>\n        metaResolver[this.resolverMethods[key]]().pipe(\n          map((data) => ({\n            [key]: data,\n          }))\n        )\n      );\n\n    return combineLatest(resolveMethods).pipe(\n      map((data) => Object.assign({}, ...data))\n    );\n  }\n\n  /**\n   * Return the resolver with the best match, based on a score\n   * generated by the resolver.\n   *\n   * Resolvers match by default on `PageType` and `page.template`.\n   */\n  protected getMetaResolver(page: Page): PageMetaResolver {\n    return resolveApplicable(this.resolvers, [page], [page]);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { filter, take, takeWhile } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { Page } from '../../cms/model/page.model';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { BaseSiteService } from '../../site-context/facade/base-site.service';\nimport { WindowRef } from '../../window/window-ref';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SmartEditService {\n  private _cmsTicketId: string;\n  private isPreviewPage = false;\n  private _currentPageId: string;\n  private _launchedInSmartEdit = false;\n\n  private defaultPreviewProductCode: string;\n  private defaultPreviewCategoryCode: string;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected routingService: RoutingService,\n    protected baseSiteService: BaseSiteService,\n    protected zone: NgZone,\n    protected winRef: WindowRef\n  ) {\n    this.getCmsTicket();\n\n    if (winRef.nativeWindow) {\n      const window = winRef.nativeWindow as any;\n      // rerender components and slots after editing\n      window.smartedit = window.smartedit || {};\n      window.smartedit.renderComponent = (\n        componentId,\n        componentType,\n        parentId\n      ) => {\n        return this.renderComponent(componentId, componentType, parentId);\n      };\n\n      // reprocess page\n      window.smartedit.reprocessPage = this.reprocessPage;\n    }\n  }\n\n  get cmsTicketId(): string {\n    return this._cmsTicketId;\n  }\n\n  protected getCmsTicket() {\n    combineLatest([\n      this.cmsService.getCurrentPage(),\n      this.routingService.getRouterState(),\n    ])\n      .pipe(\n        takeWhile(([cmsPage]) => cmsPage === undefined),\n        filter(([, routerState]) => {\n          if (routerState.nextState && !this._cmsTicketId) {\n            this._cmsTicketId =\n              routerState.nextState.queryParams['cmsTicketId'];\n            if (this._cmsTicketId) {\n              return true;\n            }\n          }\n          return false;\n        }),\n        take(1)\n      )\n      .subscribe(() => {\n        this._launchedInSmartEdit = true;\n        this.getDefaultPreviewCode();\n      });\n  }\n\n  protected getDefaultPreviewCode() {\n    this.baseSiteService\n      .getBaseSiteData()\n      .pipe(\n        filter((site) => Object.keys(site).length !== 0),\n        take(1)\n      )\n      .subscribe((site) => {\n        this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;\n        this.defaultPreviewProductCode = site.defaultPreviewProductCode;\n\n        this.addPageContract();\n      });\n  }\n\n  protected addPageContract() {\n    this.cmsService.getCurrentPage().subscribe((cmsPage) => {\n      if (cmsPage && this._cmsTicketId) {\n        this._currentPageId = cmsPage.pageId;\n\n        // before adding contract to page, we need redirect to that page\n        this.goToPreviewPage(cmsPage);\n\n        // remove old page contract\n        const previousContract = [];\n        Array.from(this.winRef.document.body.classList).forEach((attr) =>\n          previousContract.push(attr)\n        );\n        previousContract.forEach((attr) =>\n          this.winRef.document.body.classList.remove(attr)\n        );\n\n        // add new page contract\n        if (cmsPage.properties && cmsPage.properties.smartedit) {\n          const seClasses = cmsPage.properties.smartedit.classes.split(' ');\n          seClasses.forEach((classItem) => {\n            this.winRef.document.body.classList.add(classItem);\n          });\n        }\n      }\n    });\n  }\n\n  protected goToPreviewPage(cmsPage: Page) {\n    // only the first page is the smartedit preview page\n    if (!this.isPreviewPage) {\n      this.isPreviewPage = true;\n      if (\n        cmsPage.type === PageType.PRODUCT_PAGE &&\n        this.defaultPreviewProductCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'product',\n          params: { code: this.defaultPreviewProductCode, name: '' },\n        });\n      } else if (\n        cmsPage.type === PageType.CATEGORY_PAGE &&\n        this.defaultPreviewCategoryCode\n      ) {\n        this.routingService.go({\n          cxRoute: 'category',\n          params: { code: this.defaultPreviewCategoryCode },\n        });\n      }\n    }\n  }\n\n  protected renderComponent(\n    componentId: string,\n    componentType?: string,\n    parentId?: string\n  ): boolean {\n    if (componentId) {\n      this.zone.run(() => {\n        // without parentId, it is slot\n        if (!parentId) {\n          if (this._currentPageId) {\n            this.cmsService.refreshPageById(this._currentPageId);\n          } else {\n            this.cmsService.refreshLatestPage();\n          }\n        } else if (componentType) {\n          this.cmsService.refreshComponent(componentId);\n        }\n      });\n    }\n\n    return true;\n  }\n\n  protected reprocessPage() {\n    // TODO: reprocess page API\n  }\n\n  /**\n   * Whether the app launched in smart edit\n   */\n  isLaunchedInSmartEdit(): boolean {\n    return this._launchedInSmartEdit;\n  }\n}\n","import { Injectable, Renderer2 } from '@angular/core';\nimport { SmartEditService } from '../../smart-edit/services/smart-edit.service';\nimport { ContentSlotComponentData } from '../model/content-slot-component-data.model';\nimport { ContentSlotData } from '../model/content-slot-data.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicAttributeService {\n  constructor(protected smartEditService: SmartEditService) {}\n\n  /**\n   * Add dynamic attributes to DOM. These attributes are extracted from the properties of cms items received from backend.\n   * There can by many different groups of properties, one of them is smartedit. But EC allows addons to create different groups.\n   * For example, personalization may add 'script' group etc.\n   * @param element: slot or cms component element\n   * @param renderer\n   * @param cmsRenderingContext: an object containing properties in each cms item response data\n   */\n  addDynamicAttributes(\n    element: Element,\n    renderer: Renderer2,\n    cmsRenderingContext: {\n      componentData?: ContentSlotComponentData;\n      slotData?: ContentSlotData;\n    }\n  ): void {\n    const properties =\n      cmsRenderingContext.componentData?.properties ||\n      cmsRenderingContext.slotData?.properties;\n\n    if (properties && this.smartEditService.isLaunchedInSmartEdit()) {\n      // check each group of properties, e.g. smartedit\n      Object.keys(properties).forEach((group) => {\n        const name = 'data-' + group + '-';\n        const groupProps = properties[group];\n\n        // check each property in the group\n        Object.keys(groupProps).forEach((propName) => {\n          const propValue = groupProps[propName];\n          if (propName === 'classes') {\n            const classes = propValue.split(' ');\n            classes.forEach((classItem) => {\n              element.classList.add(classItem);\n            });\n          } else {\n            renderer.setAttribute(\n              element,\n              name +\n                propName\n                  .split(/(?=[A-Z])/)\n                  .join('-')\n                  .toLowerCase(),\n              propValue\n            );\n          }\n        });\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class FeaturesConfig {\n  features?: {\n    [featureToggle: string]: string | boolean;\n  };\n}\n","import { FeaturesConfig } from '../config/features-config';\n\nfunction isFeatureConfig(config: any): config is FeaturesConfig {\n  return typeof config === 'object' && config.features;\n}\n\nfunction isInLevel(level, version) {\n  if (level === '*') {\n    return true;\n  }\n  const levelParts = level.split('.');\n  const versionParts = version.split('.');\n\n  for (let i = 0; i < versionParts.length; i++) {\n    const versionNumberPart = Number(versionParts[i]);\n    const levelNumberPart = Number(levelParts[i]) || 0;\n\n    if (versionNumberPart !== levelNumberPart) {\n      return levelNumberPart > versionNumberPart;\n    }\n  }\n  return true;\n}\n\nexport function isFeatureLevel(config: unknown, level: string): boolean {\n  if (isFeatureConfig(config)) {\n    return level[0] === '!'\n      ? !isInLevel(config.features.level, level.substr(1, level.length))\n      : isInLevel(config.features.level, level);\n  }\n}\n\nexport function isFeatureEnabled(config: unknown, feature: string): boolean {\n  if (isFeatureConfig(config)) {\n    const featureConfig =\n      feature[0] === '!'\n        ? config.features[feature.substr(1, feature.length)]\n        : config.features[feature];\n\n    const result =\n      typeof featureConfig === 'string'\n        ? isFeatureLevel(config, featureConfig)\n        : featureConfig;\n\n    return feature[0] === '!' ? !result : result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FeaturesConfig } from '../config/features-config';\nimport {\n  isFeatureEnabled,\n  isFeatureLevel,\n} from '../utils/feature-config-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureConfigService {\n  constructor(protected config: FeaturesConfig) {}\n\n  isLevel(version: string): boolean {\n    return isFeatureLevel(this.config, version);\n  }\n\n  isEnabled(feature: string) {\n    return isFeatureEnabled(this.config, feature);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeatureLevel]',\n})\nexport class FeatureLevelDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeatureLevel(level: string | number) {\n    if (this.featureConfig.isLevel(level.toString()) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isLevel(level.toString()) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FeatureConfigService } from '../services/feature-config.service';\n\n@Directive({\n  selector: '[cxFeature]',\n})\nexport class FeatureDirective {\n  constructor(\n    protected templateRef: TemplateRef<any>,\n    protected viewContainer: ViewContainerRef,\n    protected featureConfig: FeatureConfigService\n  ) {}\n\n  private hasView = false;\n\n  @Input() set cxFeature(feature: string) {\n    if (this.featureConfig.isEnabled(feature) && !this.hasView) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.hasView = true;\n    } else if (!this.featureConfig.isEnabled(feature) && this.hasView) {\n      this.viewContainer.clear();\n      this.hasView = false;\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FeaturesConfig } from './config/features-config';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { FeatureLevelDirective } from './directives/feature-level.directive';\nimport { FeatureDirective } from './directives/feature.directive';\n\n@NgModule({\n  declarations: [FeatureLevelDirective, FeatureDirective],\n  exports: [FeatureLevelDirective, FeatureDirective],\n})\nexport class FeaturesConfigModule {\n  static forRoot(\n    defaultLevel?: string\n  ): ModuleWithProviders<FeaturesConfigModule> {\n    return {\n      ngModule: FeaturesConfigModule,\n      providers: [\n        provideDefaultConfig(<FeaturesConfig>{\n          features: {\n            level: defaultLevel || '*',\n          },\n        }),\n      ],\n    };\n  }\n}\n","import { isDevMode, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, getLocaleId } from '@angular/common';\nimport { LanguageService } from '../site-context/facade/language.service';\n\n// type CxDatePipe, not DatePipe, due to conflict with Angular's DatePipe - problem occurs for the backward compatibility compiler of Ivy\n@Pipe({ name: 'cxDate' })\nexport class CxDatePipe extends DatePipe implements PipeTransform {\n  constructor(protected language: LanguageService) {\n    super(null);\n  }\n\n  transform(value: any, format?: string, timezone?: string): string | null {\n    return super.transform(value, format, timezone, this.getLang());\n  }\n\n  private getLang() {\n    const lang = this.getActiveLang();\n    try {\n      getLocaleId(lang);\n      return lang;\n    } catch {\n      this.reportMissingLocaleData(lang);\n      return 'en';\n    }\n  }\n\n  private getActiveLang(): string {\n    let result;\n    this.language\n      .getActive()\n      .subscribe((lang) => (result = lang))\n      .unsubscribe();\n    return result;\n  }\n\n  private reportMissingLocaleData(lang: string) {\n    if (isDevMode()) {\n      console.warn(\n        `cxDate pipe: No locale data registered for '${lang}' (see https://angular.io/api/common/registerLocaleData).`\n      );\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { TranslationService } from './translation.service';\nimport { shallowEqualObjects } from '../util/compare-equal-objects';\nimport { Translatable, TranslatableParams } from './translatable';\n\n@Pipe({ name: 'cxTranslate', pure: false })\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  private lastKey: string;\n  private lastOptions: object;\n  private translatedValue: string;\n  private sub: Subscription;\n\n  constructor(\n    protected service: TranslationService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  transform(\n    input: Translatable | string,\n    options: TranslatableParams = {}\n  ): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n\n    this.translate(key, options);\n    return this.translatedValue;\n  }\n\n  private translate(key: any, options: object) {\n    if (\n      key !== this.lastKey ||\n      !shallowEqualObjects(options, this.lastOptions)\n    ) {\n      this.lastKey = key;\n      this.lastOptions = options;\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n      this.sub = this.service\n        .translate(key, options, true)\n        .subscribe((val) => this.markForCheck(val));\n    }\n  }\n\n  private markForCheck(value: string) {\n    this.translatedValue = value;\n    this.cd.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { TranslationResources } from '../translation-resources';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class I18nConfig {\n  i18n?: {\n    /**\n     * When there are missing translation resources for the active language, the fallback language will be used.\n     */\n    fallbackLang?: string | false;\n\n    /**\n     * Configuration for lazy loading of translation files.\n     * For eager loading of translations please use config option `i18n.resources`\n     */\n\n    backend?: {\n      /**\n       * The path to JSON translations. It should contain placeholders:\n       * - `{{lng}}` for language\n       * - `{{ns}}` for the name of chunk.\n       *\n       * Example:\n       * `assets/i18n-assets/{{lng}}/{{ns}}.json`\n       */\n\n      loadPath?: string;\n    };\n\n    /**\n     * Reference to translation resources that are eagerly bundled with JS app.\n     * For lazy loading of translations please use config option `i18n.backend` instead.\n     */\n    resources?: TranslationResources;\n\n    /**\n     * Logs i18n events (like loading translation resources) to the console. Don't use in production!\n     */\n    debug?: boolean;\n\n    /**\n     * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.\n     */\n    chunks?: {\n      [chunk: string]: string[];\n    };\n  };\n}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { I18nConfig } from './config/i18n-config';\n\n@Injectable()\nexport class TranslationChunkService {\n  protected duplicates: { [key: string]: string[] } = {};\n  protected chunks: { [key: string]: string } = {};\n  constructor(protected config: I18nConfig) {\n    const chunks = (config.i18n && config.i18n.chunks) || {};\n    Object.keys(chunks).forEach((chunk) => {\n      chunks[chunk].forEach((key) => {\n        if (this.chunks.hasOwnProperty(key)) {\n          if (!this.duplicates[key]) {\n            this.duplicates[key] = [this.chunks[key]];\n          }\n          this.duplicates[key].push(chunk);\n        } else {\n          this.chunks[key] = chunk;\n        }\n      });\n    });\n    if (Object.keys(this.duplicates).length > 0 && isDevMode()) {\n      this.warnDuplicates(this.duplicates);\n    }\n  }\n\n  protected readonly KEY_SEPARATOR = '.';\n\n  getChunkNameForKey(key: string): string {\n    const mainKey = (key || '').split(this.KEY_SEPARATOR)[0];\n    const chunk = this.chunks && this.chunks[mainKey];\n\n    if (!chunk) {\n      return mainKey; // fallback to main key as a chunk\n    }\n    return chunk;\n  }\n\n  private warnDuplicates(items: { [key: string]: string[] }): void {\n    const dupes: string[] = [];\n    Object.keys(items).forEach((key) => {\n      dupes.push(\n        `* '${key}' found in chunks: ${items[key].join(', ')}. Used '${\n          this.chunks[key]\n        }.${key}'.`\n      );\n    });\n    console.warn(\n      `Duplicated keys has been found in the config of i18n chunks:\\n${dupes.join(\n        '\\n'\n      )}`\n    );\n  }\n}\n","import { I18nConfig } from './i18n-config';\n\nexport const defaultI18nConfig: I18nConfig = {\n  i18n: {\n    fallbackLang: false,\n    debug: false,\n  },\n};\n","import { HttpClient } from '@angular/common/http';\nimport i18next, { InitOptions } from 'i18next';\nimport i18nextXhrBackend from 'i18next-xhr-backend';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { TranslationResources } from '../translation-resources';\n\nexport function i18nextInit(\n  configInit: ConfigInitializerService,\n  languageService: LanguageService,\n  httpClient: HttpClient,\n  serverRequestOrigin: string\n): () => Promise<any> {\n  return () =>\n    configInit.getStableConfig('i18n').then((config) => {\n      let i18nextConfig: InitOptions = {\n        ns: [], // don't preload any namespaces\n        fallbackLng: config.i18n.fallbackLang,\n        debug: config.i18n.debug,\n        interpolation: {\n          escapeValue: false,\n        },\n      };\n      if (config.i18n.backend) {\n        i18next.use(i18nextXhrBackend);\n        const loadPath = getLoadPath(\n          config.i18n.backend.loadPath,\n          serverRequestOrigin\n        );\n        const backend = {\n          loadPath,\n          ajax: i18nextGetHttpClient(httpClient),\n        };\n        i18nextConfig = { ...i18nextConfig, backend };\n      }\n\n      return i18next.init(i18nextConfig, () => {\n        // Don't use i18next's 'resources' config key for adding static translations,\n        // because it will disable loading chunks from backend. We add resources here, in the init's callback.\n        i18nextAddTranslations(config.i18n.resources);\n        syncI18nextWithSiteContext(languageService);\n      });\n    });\n}\n\nexport function i18nextAddTranslations(resources: TranslationResources = {}) {\n  Object.keys(resources).forEach((lang) => {\n    Object.keys(resources[lang]).forEach((chunkName) => {\n      i18next.addResourceBundle(\n        lang,\n        chunkName,\n        resources[lang][chunkName],\n        true,\n        true\n      );\n    });\n  });\n}\n\nexport function syncI18nextWithSiteContext(language: LanguageService) {\n  // always update language of i18next on site context (language) change\n  language.getActive().subscribe((lang) => i18next.changeLanguage(lang));\n}\n\n/**\n * Returns a function appropriate for i18next to make http calls for JSON files.\n * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options\n *\n * It uses Angular HttpClient under the hood, so it works in SSR.\n * @param httpClient Angular http client\n */\nexport function i18nextGetHttpClient(\n  httpClient: HttpClient\n): (url: string, options: object, callback: Function, data: object) => void {\n  return (url: string, _options: object, callback: Function, _data: object) => {\n    httpClient.get(url, { responseType: 'text' }).subscribe(\n      (data) => callback(data, { status: 200 }),\n      (error) => callback(null, { status: error.status })\n    );\n  };\n}\n\n/**\n * Resolves the relative path to the absolute one in SSR, using the server request's origin.\n * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:\n * - https://github.com/angular/angular/issues/19224\n * - https://github.com/angular/universal/issues/858\n */\nexport function getLoadPath(path: string, serverRequestOrigin: string): string {\n  if (!path) {\n    return undefined;\n  }\n  if (serverRequestOrigin && !path.match(/^http(s)?:\\/\\//)) {\n    if (path.startsWith('/')) {\n      path = path.slice(1);\n    }\n    if (path.startsWith('./')) {\n      path = path.slice(2);\n    }\n    const result = `${serverRequestOrigin}/${path}`;\n    return result;\n  }\n  return path;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { APP_INITIALIZER, Optional, Provider } from '@angular/core';\nimport { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';\nimport { LanguageService } from '../../site-context/facade/language.service';\nimport { SERVER_REQUEST_ORIGIN } from '../../ssr/ssr.providers';\nimport { i18nextInit } from './i18next-init';\n\nexport const i18nextProviders: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: i18nextInit,\n    deps: [\n      ConfigInitializerService,\n      LanguageService,\n      HttpClient,\n      [new Optional(), SERVER_REQUEST_ORIGIN],\n    ],\n    multi: true,\n  },\n];\n","import { Injectable, isDevMode } from '@angular/core';\nimport i18next from 'i18next';\nimport { Observable } from 'rxjs';\nimport { I18nConfig } from '../config/i18n-config';\nimport { TranslationChunkService } from '../translation-chunk.service';\nimport { TranslationService } from '../translation.service';\n\n@Injectable({ providedIn: 'root' })\nexport class I18nextTranslationService implements TranslationService {\n  private readonly NON_BREAKING_SPACE = String.fromCharCode(160);\n  protected readonly NAMESPACE_SEPARATOR = ':';\n\n  constructor(\n    protected config: I18nConfig,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  translate(\n    key: string,\n    options: any = {},\n    whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    // If we've already loaded the chunk (or failed to load), we should immediately emit the value\n    // (or the fallback value in case the key is missing).\n\n    // Moreover, we SHOULD emit a value (or a fallback value) synchronously (not in a promise/setTimeout).\n    // Otherwise, we the will trigger additional deferred change detection in a view that consumes the returned observable,\n    // which together with `switchMap` operator may lead to an infinite loop.\n\n    const chunkName = this.translationChunk.getChunkNameForKey(key);\n    const namespacedKey = this.getNamespacedKey(key, chunkName);\n\n    return new Observable<string>((subscriber) => {\n      const translate = () => {\n        if (!i18next.isInitialized) {\n          return;\n        }\n        if (i18next.exists(namespacedKey, options)) {\n          subscriber.next(i18next.t(namespacedKey, options));\n        } else {\n          if (whitespaceUntilLoaded) {\n            subscriber.next(this.NON_BREAKING_SPACE);\n          }\n          i18next.loadNamespaces(chunkName, () => {\n            if (!i18next.exists(namespacedKey, options)) {\n              this.reportMissingKey(key, chunkName);\n              subscriber.next(this.getFallbackValue(namespacedKey));\n            } else {\n              subscriber.next(i18next.t(namespacedKey, options));\n            }\n          });\n        }\n      };\n\n      translate();\n      i18next.on('languageChanged', translate);\n      return () => i18next.off('languageChanged', translate);\n    });\n  }\n\n  loadChunks(chunkNames: string | string[]): Promise<any> {\n    return i18next.loadNamespaces(chunkNames);\n  }\n\n  /**\n   * Returns a fallback value in case when the given key is missing\n   * @param key\n   */\n  protected getFallbackValue(key: string): string {\n    return isDevMode() ? `[${key}]` : this.NON_BREAKING_SPACE;\n  }\n\n  private reportMissingKey(key: string, chunkName: string) {\n    if (isDevMode()) {\n      console.warn(\n        `Translation key missing '${key}' in the chunk '${chunkName}'`\n      );\n    }\n  }\n\n  private getNamespacedKey(key: string, chunk: string): string {\n    return chunk + this.NAMESPACE_SEPARATOR + key;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultI18nConfig } from './config/default-i18n-config';\nimport { CxDatePipe } from './date.pipe';\nimport { i18nextProviders } from './i18next/i18next-providers';\nimport { I18nextTranslationService } from './i18next/i18next-translation.service';\nimport { TranslatePipe } from './translate.pipe';\nimport { TranslationChunkService } from './translation-chunk.service';\nimport { TranslationService } from './translation.service';\n\n@NgModule({\n  declarations: [TranslatePipe, CxDatePipe],\n  exports: [TranslatePipe, CxDatePipe],\n})\nexport class I18nModule {\n  static forRoot(): ModuleWithProviders<I18nModule> {\n    return {\n      ngModule: I18nModule,\n      providers: [\n        provideDefaultConfig(defaultI18nConfig),\n        { provide: TranslationService, useExisting: I18nextTranslationService },\n        TranslationChunkService,\n        ...i18nextProviders,\n      ],\n    };\n  }\n}\n","export function mockTranslate(key: string, options: any = {}) {\n  const optionsString = Object.keys(options)\n    .sort()\n    .map((optionName) => `${optionName}:${options[optionName]}`)\n    .join(' ');\n  return optionsString ? `${key} ${optionsString}` : key;\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { mockTranslate } from './mock-translate';\nimport { Translatable } from '../translatable';\n\n@Pipe({ name: 'cxTranslate' })\nexport class MockTranslatePipe implements PipeTransform {\n  transform(input: Translatable | string, options: object = {}): string {\n    if ((input as Translatable).raw) {\n      return (input as Translatable).raw;\n    }\n\n    const key = typeof input === 'string' ? input : input.key;\n    if (typeof input !== 'string') {\n      options = { ...options, ...input.params };\n    }\n    return mockTranslate(key, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TranslationService } from '../translation.service';\nimport { mockTranslate } from './mock-translate';\n\n@Injectable()\nexport class MockTranslationService implements TranslationService {\n  translate(\n    key: string,\n    options: any = {},\n    _whitespaceUntilLoaded: boolean = false\n  ): Observable<string> {\n    return new Observable<string>((subscriber) => {\n      const value = mockTranslate(key, options);\n      subscriber.next(value);\n      subscriber.complete();\n    });\n  }\n\n  loadChunks(_chunks: string | string[]): Promise<any> {\n    return Promise.resolve();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({ name: 'cxDate' })\nexport class MockDatePipe extends DatePipe implements PipeTransform {\n  transform(value: any, format?: string, timezone?: string): string {\n    return super.transform(value, format, timezone, 'en');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MockTranslatePipe } from './mock-translate.pipe';\nimport { TranslationService } from '../translation.service';\nimport { MockTranslationService } from './mock-translation.service';\nimport { MockDatePipe } from './mock-date.pipe';\n\n@NgModule({\n  declarations: [MockTranslatePipe, MockDatePipe],\n  exports: [MockTranslatePipe, MockDatePipe],\n  providers: [\n    { provide: TranslationService, useClass: MockTranslationService },\n  ],\n})\nexport class I18nTestingModule {}\n","import { OccConfig } from '../../occ/config/occ-config';\nimport { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class KymaConfig extends OccConfig {\n  authentication?: {\n    kyma_client_id?: string;\n    kyma_client_secret?: string;\n  };\n}\n","import { LoaderState } from '../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\n\nexport const KYMA_FEATURE = 'kyma';\nexport const OPEN_ID_TOKEN_DATA = '[Kyma Auth] Open ID Token Data';\n\nexport interface StateWithKyma {\n  [KYMA_FEATURE]: KymaState;\n}\n\nexport interface KymaState {\n  openIdToken: LoaderState<OpenIdToken>;\n}\n","import { StateUtils } from '../../../state/utils/index';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport const LOAD_OPEN_ID_TOKEN = '[Kyma] Load Open ID Token';\nexport const LOAD_OPEN_ID_TOKEN_FAIL = '[Kyma] Load Open ID Token Fail';\nexport const LOAD_OPEN_ID_TOKEN_SUCCESS = '[Kyma] Load Open ID Token Success';\n\nexport class LoadOpenIdToken extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_OPEN_ID_TOKEN;\n  constructor(public payload: { username: string; password: string }) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport class LoadOpenIdTokenFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_FAIL;\n  constructor(public payload: any) {\n    super(OPEN_ID_TOKEN_DATA, payload);\n  }\n}\n\nexport class LoadOpenIdTokenSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_OPEN_ID_TOKEN_SUCCESS;\n  constructor(public payload: OpenIdToken) {\n    super(OPEN_ID_TOKEN_DATA);\n  }\n}\n\nexport type OpenIdTokenActions =\n  | LoadOpenIdToken\n  | LoadOpenIdTokenFail\n  | LoadOpenIdTokenSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { KymaState, KYMA_FEATURE, StateWithKyma } from '../kyma-state';\n\nexport const getKymaState: MemoizedSelector<\n  StateWithKyma,\n  KymaState\n> = createFeatureSelector<KymaState>(KYMA_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { StateWithKyma } from '../kyma-state';\nimport { getKymaState } from './feature.selector';\n\nexport const getOpenIdTokenState: MemoizedSelector<\n  StateWithKyma,\n  LoaderState<OpenIdToken>\n> = createSelector(getKymaState, (state) => state.openIdToken);\n\nexport const getOpenIdTokenValue: MemoizedSelector<\n  StateWithKyma,\n  OpenIdToken\n> = createSelector(getOpenIdTokenState, StateUtils.loaderValueSelector);\n\nexport const getOpenIdTokenLoading: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderLoadingSelector);\n\nexport const getOpenIdTokenSuccess: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderSuccessSelector);\n\nexport const getOpenIdTokenError: MemoizedSelector<\n  StateWithKyma,\n  boolean\n> = createSelector(getOpenIdTokenState, StateUtils.loaderErrorSelector);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { OpenIdToken } from '../models/kyma-token-types.model';\nimport { KymaActions } from '../store/actions/index';\nimport { StateWithKyma } from '../store/kyma-state';\nimport { KymaSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KymaService {\n  constructor(protected store: Store<StateWithKyma>) {}\n\n  /**\n   * Authorizes using the Kyma OAuth client with scope `openid`.\n   *\n   * @param username a username\n   * @param password a password\n   */\n  authorizeOpenId(username: string, password: string): void {\n    this.store.dispatch(\n      new KymaActions.LoadOpenIdToken({ username, password })\n    );\n  }\n\n  /**\n   * Returns the `OpenIdToken`, which was previously retrieved using `authorizeOpenId` method.\n   */\n  getOpenIdToken(): Observable<OpenIdToken> {\n    return this.store.pipe(select(KymaSelectors.getOpenIdTokenValue));\n  }\n}\n","import { KymaConfig } from './kyma-config';\n\nexport const defaultKymaConfig: KymaConfig = {\n  authentication: {\n    kyma_client_id: 'client4kyma',\n    kyma_client_secret: 'secret',\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { KymaConfig } from '../../config/kyma-config';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\n\nconst OAUTH_ENDPOINT = '/authorizationserver/oauth/token';\n\n@Injectable()\nexport class OpenIdAuthenticationTokenService {\n  constructor(private config: KymaConfig, private http: HttpClient) {}\n\n  loadOpenIdAuthenticationToken(\n    username: string,\n    password: string\n  ): Observable<OpenIdToken> {\n    const url = this.getOAuthEndpoint();\n    const params = new HttpParams()\n      .set(\n        'client_id',\n        encodeURIComponent(this.config.authentication.kyma_client_id)\n      )\n      .set(\n        'client_secret',\n        encodeURIComponent(this.config.authentication.kyma_client_secret)\n      )\n      .set('grant_type', 'password') // authorization_code, client_credentials, password\n      .set('username', username)\n      .set('password', password)\n      .set('scope', 'openid');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n\n    return this.http\n      .post<OpenIdToken>(url, params, { headers })\n      .pipe(catchError((error) => throwError(error)));\n  }\n\n  private getOAuthEndpoint(): string {\n    return (this.config.backend.occ.baseUrl || '') + OAUTH_ENDPOINT;\n  }\n}\n","import { OpenIdAuthenticationTokenService } from './open-id-token/open-id-token.service';\n\nexport const KymaServices: any[] = [OpenIdAuthenticationTokenService];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map, withLatestFrom } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { OpenIdAuthenticationTokenService } from '../../services/open-id-token/open-id-token.service';\nimport { KymaActions } from '../actions/index';\n\n@Injectable()\nexport class OpenIdTokenEffect {\n  @Effect()\n  triggerOpenIdTokenLoading$: Observable<\n    KymaActions.LoadOpenIdToken\n  > = this.actions$.pipe(\n    ofType<KymaActions.LoadOpenIdTokenSuccess>(\n      AuthActions.LOAD_USER_TOKEN_SUCCESS\n    ),\n    withLatestFrom(\n      this.actions$.pipe(\n        ofType<AuthActions.LoadUserToken>(AuthActions.LOAD_USER_TOKEN)\n      )\n    ),\n    map(\n      ([, loginAction]) =>\n        new KymaActions.LoadOpenIdToken({\n          username: loginAction.payload.userId,\n          password: loginAction.payload.password,\n        })\n    )\n  );\n\n  @Effect()\n  loadOpenIdToken$: Observable<\n    KymaActions.OpenIdTokenActions\n  > = this.actions$.pipe(\n    ofType(KymaActions.LOAD_OPEN_ID_TOKEN),\n    map((action: KymaActions.LoadOpenIdToken) => action.payload),\n    exhaustMap((payload) =>\n      this.openIdTokenService\n        .loadOpenIdAuthenticationToken(payload.username, payload.password)\n        .pipe(\n          map((token) => new KymaActions.LoadOpenIdTokenSuccess(token)),\n          catchError((error) =>\n            of(\n              new KymaActions.LoadOpenIdTokenFail(makeErrorSerializable(error))\n            )\n          )\n        )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private openIdTokenService: OpenIdAuthenticationTokenService\n  ) {}\n}\n","import { OpenIdTokenEffect } from './open-id-token.effect';\n\nexport const effects: any[] = [OpenIdTokenEffect];\n\nexport * from './open-id-token.effect';\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport { OpenIdToken } from '../../models/kyma-token-types.model';\nimport { KymaState, OPEN_ID_TOKEN_DATA } from '../kyma-state';\n\nexport function getReducers(): ActionReducerMap<KymaState> {\n  return {\n    openIdToken: loaderReducer<OpenIdToken>(OPEN_ID_TOKEN_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  KymaState\n>> = new InjectionToken<ActionReducerMap<KymaState>>('KymaReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearKymaState(\n  reducer: ActionReducer<KymaState, Action>\n): ActionReducer<KymaState, Action> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = {\n        ...state,\n        openIdToken: undefined,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearKymaState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport { StateConfig, StorageSyncType } from '../../state/config/state-config';\nimport { StateModule } from '../../state/state.module';\nimport { effects } from './effects/index';\nimport { KYMA_FEATURE } from './kyma-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function kymaStoreConfigFactory(): StateConfig {\n  // if we want to reuse KYMA_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      storageSync: {\n        keys: {\n          'kyma.openIdToken.value': StorageSyncType.LOCAL_STORAGE,\n        },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StateModule,\n    StoreModule.forFeature(KYMA_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(kymaStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class KymaStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultKymaConfig } from './config/default-kyma-config';\nimport { KymaServices } from './services/index';\nimport { KymaStoreModule } from './store/kyma-store.module';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, KymaStoreModule],\n  providers: [provideDefaultConfig(defaultKymaConfig), ...KymaServices],\n})\nexport class KymaModule {}\n","import { PersonalizationConfig } from './personalization-config';\n\nexport const defaultPersonalizationConfig: PersonalizationConfig = {\n  personalization: {\n    enabled: false,\n    httpHeaderName: {\n      id: 'Occ-Personalization-Id',\n      timestamp: 'Occ-Personalization-Time',\n    },\n    context: {\n      slotPosition: 'PlaceholderContentSlot',\n      componentId: 'PersonalizationScriptComponent',\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PersonalizationConfig {\n  personalization: {\n    enabled?: boolean;\n    httpHeaderName?: {\n      id: string;\n      timestamp: string;\n    };\n    context?: {\n      slotPosition?: string;\n      componentId?: string;\n    };\n  };\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_ID_KEY = 'personalization-id';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationIdInterceptor implements HttpInterceptor {\n  private personalizationId: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.id.toLowerCase();\n        this.personalizationId = this.winRef.localStorage.getItem(\n          PERSONALIZATION_ID_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_ID_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_ID_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.personalizationId &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.personalizationId,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedId = event.headers.get(this.requestHeader);\n            if (this.personalizationId !== receivedId) {\n              this.personalizationId = receivedId;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_ID_KEY,\n                this.personalizationId\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { OccEndpointsService } from '../../occ/services/occ-endpoints.service';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { WindowRef } from '../../window/window-ref';\nimport { isPlatformBrowser } from '@angular/common';\n\nconst PERSONALIZATION_TIME_KEY = 'personalization-time';\n\n@Injectable({ providedIn: 'root' })\nexport class OccPersonalizationTimeInterceptor implements HttpInterceptor {\n  private timestamp: string;\n  private requestHeader: string;\n  private enabled = false;\n\n  constructor(\n    private config: PersonalizationConfig,\n    private occEndpoints: OccEndpointsService,\n    private winRef: WindowRef,\n    @Inject(PLATFORM_ID) private platform: any\n  ) {\n    if (isPlatformBrowser(this.platform)) {\n      this.enabled =\n        (this.winRef.localStorage && this.config.personalization.enabled) ||\n        false;\n\n      if (this.enabled) {\n        this.requestHeader = this.config.personalization.httpHeaderName.timestamp.toLowerCase();\n        this.timestamp = this.winRef.localStorage.getItem(\n          PERSONALIZATION_TIME_KEY\n        );\n      } else if (this.winRef.localStorage.getItem(PERSONALIZATION_TIME_KEY)) {\n        this.winRef.localStorage.removeItem(PERSONALIZATION_TIME_KEY);\n      }\n    }\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.enabled) {\n      return next.handle(request);\n    }\n\n    if (\n      this.timestamp &&\n      request.url.includes(this.occEndpoints.getBaseEndpoint())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.timestamp,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      tap((event) => {\n        if (event instanceof HttpResponse) {\n          if (event.headers.keys().includes(this.requestHeader)) {\n            const receivedTimestamp = event.headers.get(this.requestHeader);\n            if (this.timestamp !== receivedTimestamp) {\n              this.timestamp = receivedTimestamp;\n              this.winRef.localStorage.setItem(\n                PERSONALIZATION_TIME_KEY,\n                this.timestamp\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { OccPersonalizationIdInterceptor } from './occ-personalization-id.interceptor';\nimport { OccPersonalizationTimeInterceptor } from './occ-personalization-time.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationIdInterceptor,\n    multi: true,\n  },\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccPersonalizationTimeInterceptor,\n    multi: true,\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultPersonalizationConfig } from './config/default-personalization-config';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class PersonalizationModule {\n  static forRoot(): ModuleWithProviders<PersonalizationModule> {\n    return {\n      ngModule: PersonalizationModule,\n      providers: [\n        provideDefaultConfig(defaultPersonalizationConfig),\n        ...interceptors,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { ContentSlotComponentData } from '../../cms/model/content-slot-component-data.model';\nimport { ContentSlotData } from '../../cms/model/content-slot-data.model';\nimport { Page } from '../../cms/model/page.model';\nimport { PersonalizationConfig } from '../config/personalization-config';\nimport { PersonalizationContext } from '../model/personalization-context.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersonalizationContextService {\n  constructor(\n    protected config: PersonalizationConfig,\n    protected cmsService: CmsService\n  ) {}\n\n  getPersonalizationContext(): Observable<PersonalizationContext> {\n    return this.cmsService.getCurrentPage().pipe(\n      filter(Boolean),\n      map(\n        (page: Page) =>\n          page.slots[this.config.personalization.context.slotPosition]\n      ),\n      filter(Boolean),\n      map((slot: ContentSlotData) =>\n        slot.components.find(\n          (i) => i.uid === this.config.personalization.context.componentId\n        )\n      ),\n      filter(Boolean),\n      map((component: ContentSlotComponentData) =>\n        this.buildPersonalizationContext(component.properties.script.data)\n      )\n    );\n  }\n\n  private buildPersonalizationContext(data: string): PersonalizationContext {\n    const context = JSON.parse(atob(data));\n    context.actions.forEach((action) => {\n      Object.keys(action).forEach((key) => {\n        action[key] = atob(action[key]);\n      });\n    });\n    for (let i = 0; i < context.segments.length; i++) {\n      context.segments[i] = atob(context.segments[i]);\n    }\n    return context;\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap } from '@ngrx/store';\nimport { EntityLoaderState } from '../../../state/utils/entity-loader/entity-loader-state';\nimport { entityLoaderReducer } from '../../../state/utils/entity-loader/entity-loader.reducer';\nimport { PROCESS_FEATURE } from '../process-state';\n\nexport function getReducers<T>(): ActionReducer<EntityLoaderState<T>> {\n  return entityLoaderReducer(PROCESS_FEATURE);\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  EntityLoaderState<any>\n>> = new InjectionToken<ActionReducerMap<EntityLoaderState<any>>>(\n  'ProcessReducers'\n);\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import {\n  ENTITY_FAIL_ACTION,\n  ENTITY_LOAD_ACTION,\n  ENTITY_RESET_ACTION,\n  ENTITY_SUCCESS_ACTION,\n  entityFailMeta,\n  EntityLoaderMeta,\n  entityLoadMeta,\n  entityResetMeta,\n  entitySuccessMeta,\n} from '../entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\n\nexport namespace EntityScopedLoaderActions {\n  export interface EntityScopedLoaderMeta extends EntityLoaderMeta {\n    scope?: string;\n  }\n\n  export interface EntityScopedLoaderAction extends Action {\n    readonly payload?: any;\n    readonly meta?: EntityScopedLoaderMeta;\n  }\n\n  export function entityScopedLoadMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityLoadMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedFailMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string,\n    error?: any\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityFailMeta(entityType, id, error),\n      scope,\n    };\n  }\n\n  export function entityScopedSuccessMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entitySuccessMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export function entityScopedResetMeta(\n    entityType: string,\n    id: string | string[],\n    scope?: string\n  ): EntityScopedLoaderMeta {\n    return {\n      ...entityResetMeta(entityType, id),\n      scope,\n    };\n  }\n\n  export class EntityScopedLoadAction implements EntityScopedLoaderAction {\n    type = ENTITY_LOAD_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedLoadMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedFailAction implements EntityScopedLoaderAction {\n    type = ENTITY_FAIL_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      error?: any\n    ) {\n      this.meta = entityScopedFailMeta(entityType, id, scope, error);\n    }\n  }\n\n  export class EntityScopedSuccessAction implements EntityScopedLoaderAction {\n    type = ENTITY_SUCCESS_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(\n      entityType: string,\n      id: string | string[],\n      scope?: string,\n      public payload?: any\n    ) {\n      this.meta = entityScopedSuccessMeta(entityType, id, scope);\n    }\n  }\n\n  export class EntityScopedResetAction implements EntityScopedLoaderAction {\n    type = ENTITY_RESET_ACTION;\n    readonly meta: EntityScopedLoaderMeta;\n    constructor(entityType: string, id: string | string[], scope?: string) {\n      this.meta = entityScopedResetMeta(entityType, id, scope);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '../../state/state.module';\nimport { PROCESS_FEATURE } from './process-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [StateModule, StoreModule.forFeature(PROCESS_FEATURE, reducerToken)],\n  providers: [reducerProvider],\n})\nexport class ProcessStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ProcessStoreModule } from './store/process-store.module';\n\n@NgModule({\n  imports: [ProcessStoreModule],\n})\nexport class ProcessModule {\n  static forRoot(): ModuleWithProviders<ProcessModule> {\n    return {\n      ngModule: ProcessModule,\n      providers: [],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../../model/product.model';\nimport { ProductAdapter } from './product.adapter';\nimport { ScopedProductData } from './scoped-product-data';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductConnector {\n  constructor(protected adapter: ProductAdapter) {}\n\n  get(productCode: string, scope = ''): Observable<Product> {\n    return this.adapter.load(productCode, scope);\n  }\n\n  getMany(products: ScopedProductData[]): ScopedProductData[] {\n    if (!this.adapter.loadMany) {\n      return products.map((product) => ({\n        ...product,\n        data$: this.adapter.load(product.code, product.scope),\n      }));\n    }\n\n    return this.adapter.loadMany(products);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReference } from '../../../model/product.model';\nimport { ProductReferencesAdapter } from './product-references.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReferencesConnector {\n  constructor(protected adapter: ProductReferencesAdapter) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.adapter.load(productCode, referenceType, pageSize);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ProductReviewsAdapter } from './product-reviews.adapter';\nimport { Review } from '../../../model/product.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductReviewsConnector {\n  constructor(protected adapter: ProductReviewsAdapter) {}\n\n  get(productCode: string, maxCount?: number): Observable<Review[]> {\n    return this.adapter.load(productCode, maxCount);\n  }\n\n  add(productCode: string, review: any): Observable<Review> {\n    return this.adapter.post(productCode, review);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductSearchAdapter } from './product-search.adapter';\nimport { SearchConfig } from '../../model/search-config';\nimport { Observable } from 'rxjs';\nimport {\n  Suggestion,\n  ProductSearchPage,\n} from '../../../model/product-search.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSearchConnector {\n  constructor(protected adapter: ProductSearchAdapter) {}\n\n  search(\n    query: string,\n    searchConfig?: SearchConfig\n  ): Observable<ProductSearchPage> {\n    return this.adapter.search(query, searchConfig);\n  }\n\n  getSuggestions(term: string, pageSize?: number): Observable<Suggestion[]> {\n    return this.adapter.loadSuggestions(term, pageSize);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReference } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REFERENCES = '[Product] Load Product References Data';\nexport const LOAD_PRODUCT_REFERENCES_FAIL =\n  '[Product] Load Product References Data Fail';\nexport const LOAD_PRODUCT_REFERENCES_SUCCESS =\n  '[Product] Load Product References Data Success';\nexport const CLEAN_PRODUCT_REFERENCES = '[Product] Clean Product References';\n\nexport class LoadProductReferences implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES;\n  constructor(\n    public payload: {\n      productCode: string;\n      referenceType?: string;\n      pageSize?: number;\n    }\n  ) {}\n}\n\nexport class LoadProductReferencesFail implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReferencesSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REFERENCES_SUCCESS;\n  constructor(\n    public payload: {\n      productCode: string;\n      list: ProductReference[];\n    }\n  ) {}\n}\n\nexport class CleanProductReferences implements Action {\n  readonly type = CLEAN_PRODUCT_REFERENCES;\n}\n\n// action types\nexport type ProductReferencesAction =\n  | LoadProductReferences\n  | LoadProductReferencesFail\n  | LoadProductReferencesSuccess\n  | CleanProductReferences;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { Review } from '../../../model/product.model';\n\nexport const LOAD_PRODUCT_REVIEWS = '[Product] Load Product Reviews Data';\nexport const LOAD_PRODUCT_REVIEWS_FAIL =\n  '[Product] Load Product Reviews Data Fail';\nexport const LOAD_PRODUCT_REVIEWS_SUCCESS =\n  '[Product] Load Product Reviews Data Success';\nexport const POST_PRODUCT_REVIEW = '[Product] Post Product Review';\nexport const POST_PRODUCT_REVIEW_FAIL = '[Product] Post Product Review Fail';\nexport const POST_PRODUCT_REVIEW_SUCCESS =\n  '[Product] Post Product Review Success';\n\nexport class LoadProductReviews implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS;\n  constructor(public payload: string) {}\n}\n\nexport class LoadProductReviewsFail implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class LoadProductReviewsSuccess implements Action {\n  readonly type = LOAD_PRODUCT_REVIEWS_SUCCESS;\n  constructor(public payload: { productCode: string; list: Review[] }) {}\n}\n\nexport class PostProductReview implements Action {\n  readonly type = POST_PRODUCT_REVIEW;\n  constructor(public payload: { productCode: string; review: Review }) {}\n}\n\nexport class PostProductReviewFail implements Action {\n  readonly type = POST_PRODUCT_REVIEW_FAIL;\n  constructor(public payload: string) {}\n}\n\nexport class PostProductReviewSuccess implements Action {\n  readonly type = POST_PRODUCT_REVIEW_SUCCESS;\n  constructor(public payload: Review) {}\n}\n\n// action types\nexport type ProductReviewsAction =\n  | LoadProductReviews\n  | LoadProductReviewsFail\n  | LoadProductReviewsSuccess\n  | PostProductReview\n  | PostProductReviewFail\n  | PostProductReviewSuccess;\n","import { Action } from '@ngrx/store';\nimport { ErrorModel } from '../../../model/misc.model';\nimport {\n  ClearSearch,\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { SearchConfig } from '../../model/search-config';\n\nexport const SEARCH_PRODUCTS = '[Product] Search Products';\nexport const SEARCH_PRODUCTS_FAIL = '[Product] Search Products Fail';\nexport const SEARCH_PRODUCTS_SUCCESS = '[Product] Search Products Success';\nexport const GET_PRODUCT_SUGGESTIONS = '[Product] Get Product Suggestions';\nexport const GET_PRODUCT_SUGGESTIONS_SUCCESS =\n  '[Product] Get Product Suggestions Success';\nexport const GET_PRODUCT_SUGGESTIONS_FAIL =\n  '[Product] Get Product Suggestions Fail';\nexport const CLEAR_PRODUCT_SEARCH_RESULT =\n  '[Product] Clear Product Search Result';\n\nexport class SearchProducts implements Action {\n  readonly type = SEARCH_PRODUCTS;\n  constructor(\n    public payload: { queryText: string; searchConfig: SearchConfig },\n    public auxiliary?: boolean\n  ) {}\n}\n\nexport class SearchProductsFail implements Action {\n  readonly type = SEARCH_PRODUCTS_FAIL;\n  constructor(public payload: ErrorModel, public auxiliary?: boolean) {}\n}\n\nexport class SearchProductsSuccess implements Action {\n  readonly type = SEARCH_PRODUCTS_SUCCESS;\n  constructor(public payload: ProductSearchPage, public auxiliary?: boolean) {}\n}\n\nexport class GetProductSuggestions implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS;\n  constructor(public payload: { term: string; searchConfig: SearchConfig }) {}\n}\n\nexport class GetProductSuggestionsSuccess implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_SUCCESS;\n  constructor(public payload: Suggestion[]) {}\n}\n\nexport class GetProductSuggestionsFail implements Action {\n  readonly type = GET_PRODUCT_SUGGESTIONS_FAIL;\n  constructor(public payload: ErrorModel) {}\n}\n\nexport class ClearProductSearchResult implements Action {\n  readonly type = CLEAR_PRODUCT_SEARCH_RESULT;\n  constructor(\n    public payload: ClearSearch = {\n      clearPageResults: false,\n      clearSearchboxResults: false,\n    }\n  ) {}\n}\n\n// action types\nexport type ProductSearchAction =\n  | SearchProducts\n  | SearchProductsFail\n  | SearchProductsSuccess\n  | GetProductSuggestions\n  | GetProductSuggestionsSuccess\n  | GetProductSuggestionsFail\n  | ClearProductSearchResult;\n","import { Product } from '../../../model/product.model';\nimport { PRODUCT_DETAIL_ENTITY } from '../product-state';\nimport { EntityLoaderMeta } from '../../../state/utils/entity-loader/entity-loader.action';\nimport { Action } from '@ngrx/store';\nimport { EntityScopedLoaderActions } from '../../../state/utils/scoped-loader/entity-scoped-loader.actions';\n\nexport const LOAD_PRODUCT = '[Product] Load Product Data';\nexport const LOAD_PRODUCT_FAIL = '[Product] Load Product Data Fail';\nexport const LOAD_PRODUCT_SUCCESS = '[Product] Load Product Data Success';\n\nexport interface ProductMeta extends EntityLoaderMeta {\n  scope?: string;\n}\n\nexport interface EntityScopedLoaderAction extends Action {\n  readonly payload?: any;\n  readonly meta?: ProductMeta;\n}\n\nexport class LoadProduct extends EntityScopedLoaderActions.EntityScopedLoadAction {\n  readonly type = LOAD_PRODUCT;\n  constructor(public payload: string, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload, scope);\n  }\n}\n\nexport class LoadProductFail extends EntityScopedLoaderActions.EntityScopedFailAction {\n  readonly type = LOAD_PRODUCT_FAIL;\n  constructor(productCode: string, public payload: any, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, productCode, scope, payload);\n  }\n}\n\nexport class LoadProductSuccess extends EntityScopedLoaderActions.EntityScopedSuccessAction {\n  readonly type = LOAD_PRODUCT_SUCCESS;\n  constructor(public payload: Product, scope = '') {\n    super(PRODUCT_DETAIL_ENTITY, payload.code, scope);\n  }\n}\n\n// action types\nexport type ProductAction = LoadProduct | LoadProductFail | LoadProductSuccess;\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../model/product-search.model';\nimport { Product, ProductReference, Review } from '../../model/product.model';\nimport { EntityScopedLoaderState } from '../../state/utils/scoped-loader/scoped-loader.state';\n\nexport const PRODUCT_FEATURE = 'product';\nexport const PRODUCT_DETAIL_ENTITY = '[Product] Detail Entity';\n\nexport interface StateWithProduct {\n  [PRODUCT_FEATURE]: ProductsState;\n}\n\nexport interface ProductsState {\n  details: EntityScopedLoaderState<Product>;\n  search: ProductsSearchState;\n  reviews: ProductReviewsState;\n  references: ProductReferencesState;\n}\n\nexport interface ProductsSearchState {\n  results: ProductSearchPage;\n  suggestions: Suggestion[];\n  auxResults: ProductSearchPage;\n}\n\nexport interface ProductReviewsState {\n  productCode: string;\n  list: Review[];\n}\n\nexport interface ProductReferencesState {\n  productCode: string;\n  list: ProductReference[];\n}\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductsState,\n  PRODUCT_FEATURE,\n  StateWithProduct,\n} from '../product-state';\n\nexport const getProductsState: MemoizedSelector<\n  StateWithProduct,\n  ProductsState\n> = createFeatureSelector<ProductsState>(PRODUCT_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ProductReference } from '../../../model/product.model';\nimport {\n  ProductReferencesState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReferencesState: MemoizedSelector<\n  StateWithProduct,\n  ProductReferencesState\n> = createSelector(\n  getProductsState,\n  (state: ProductsState) => state.references\n);\n\nexport const getSelectedProductReferencesFactory = (\n  productCode: string,\n  referenceType: string\n): MemoizedSelector<StateWithProduct, ProductReference[]> => {\n  return createSelector(getProductReferencesState, (referenceTypeData) => {\n    if (referenceTypeData.productCode === productCode) {\n      if (!!referenceTypeData.list) {\n        if (referenceType) {\n          return referenceTypeData.list.filter(\n            (item) => item.referenceType === referenceType\n          );\n        }\n\n        return referenceTypeData.list;\n      } else {\n        return [];\n      }\n    }\n  });\n};\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Review } from '../../../model/product.model';\nimport {\n  ProductReviewsState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductReviewsState: MemoizedSelector<\n  StateWithProduct,\n  ProductReviewsState\n> = createSelector(getProductsState, (state: ProductsState) => state.reviews);\n\nexport const getSelectedProductReviewsFactory = (\n  productCode\n): MemoizedSelector<StateWithProduct, Review[]> => {\n  return createSelector(getProductReviewsState, (reviewData) => {\n    if (reviewData.productCode === productCode) {\n      return reviewData.list;\n    }\n  });\n};\n","import {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductsSearchState } from '../product-state';\n\nexport const initialState: ProductsSearchState = {\n  results: {},\n  suggestions: [],\n  auxResults: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductSearchAction\n): ProductsSearchState {\n  switch (action.type) {\n    case ProductActions.SEARCH_PRODUCTS_SUCCESS: {\n      const results = action.payload;\n      const res = action.auxiliary ? { auxResults: results } : { results };\n      return {\n        ...state,\n        ...res,\n      };\n    }\n\n    case ProductActions.GET_PRODUCT_SUGGESTIONS_SUCCESS: {\n      const suggestions: Suggestion[] = action.payload;\n\n      return {\n        ...state,\n        suggestions,\n      };\n    }\n\n    case ProductActions.CLEAR_PRODUCT_SEARCH_RESULT: {\n      return {\n        ...state,\n        results: action.payload.clearPageResults ? {} : state.results,\n        suggestions: action.payload.clearSearchboxResults\n          ? []\n          : state.suggestions,\n        auxResults: action.payload.clearSearchboxResults\n          ? {}\n          : state.auxResults,\n      };\n    }\n  }\n  return state;\n}\n\nexport const getSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.results;\nexport const getAuxSearchResults = (\n  state: ProductsSearchState\n): ProductSearchPage => state.auxResults;\nexport const getProductSuggestions = (\n  state: ProductsSearchState\n): Suggestion[] => state.suggestions;\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  ProductSearchPage,\n  Suggestion,\n} from '../../../model/product-search.model';\nimport {\n  ProductsSearchState,\n  ProductsState,\n  StateWithProduct,\n} from '../product-state';\nimport * as fromProductSearch from '../reducers/product-search.reducer';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductsSearchState: MemoizedSelector<\n  StateWithProduct,\n  ProductsSearchState\n> = createSelector(getProductsState, (state: ProductsState) => state.search);\n\nexport const getSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(getProductsSearchState, fromProductSearch.getSearchResults);\n\nexport const getAuxSearchResults: MemoizedSelector<\n  StateWithProduct,\n  ProductSearchPage\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getAuxSearchResults\n);\n\nexport const getProductSuggestions: MemoizedSelector<\n  StateWithProduct,\n  Suggestion[]\n> = createSelector(\n  getProductsSearchState,\n  fromProductSearch.getProductSuggestions\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { ProductsState, StateWithProduct } from '../product-state';\nimport { getProductsState } from './feature.selector';\n\nexport const getProductState: MemoizedSelector<\n  StateWithProduct,\n  StateUtils.EntityLoaderState<Product>\n> = createSelector(getProductsState, (state: ProductsState) => state.details);\n\nexport const getSelectedProductStateFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, StateUtils.LoaderState<Product>> => {\n  return createSelector(\n    getProductState,\n    (details) =>\n      StateUtils.entityLoaderStateSelector(details, code)[scope] ||\n      StateUtils.initialLoaderState\n  );\n};\n\nexport const getSelectedProductFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, Product> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderValueSelector(productState)\n  );\n};\n\nexport const getSelectedProductLoadingFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderLoadingSelector(productState)\n  );\n};\n\nexport const getSelectedProductSuccessFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderSuccessSelector(productState)\n  );\n};\n\nexport const getSelectedProductErrorFactory = (\n  code: string,\n  scope = ''\n): MemoizedSelector<StateWithProduct, boolean> => {\n  return createSelector(\n    getSelectedProductStateFactory(code, scope),\n    (productState) => StateUtils.loaderErrorSelector(productState)\n  );\n};\n\nexport const getAllProductCodes: MemoizedSelector<\n  StateWithProduct,\n  string[]\n> = createSelector(getProductState, (details) => {\n  return Object.keys(details.entities);\n});\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ProductReference } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReferenceService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  get(\n    productCode: string,\n    referenceType?: string,\n    pageSize?: number\n  ): Observable<ProductReference[]> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductReferencesFactory(\n          productCode,\n          referenceType\n        )\n      ),\n      tap((references) => {\n        if (references === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReferences({\n              productCode,\n              referenceType,\n              pageSize,\n            })\n          );\n        }\n      })\n    );\n  }\n\n  cleanReferences(): void {\n    this.store.dispatch(new ProductActions.CleanProductReferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Review } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductReviewService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  getByProductCode(productCode: string): Observable<Review[]> {\n    return this.store.pipe(\n      select(ProductSelectors.getSelectedProductReviewsFactory(productCode)),\n      tap((reviews) => {\n        if (reviews === undefined && productCode !== undefined) {\n          this.store.dispatch(\n            new ProductActions.LoadProductReviews(productCode)\n          );\n        }\n      })\n    );\n  }\n\n  add(productCode: string, review: Review): void {\n    this.store.dispatch(\n      new ProductActions.PostProductReview({\n        productCode: productCode,\n        review,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { SearchConfig } from '../model/search-config';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ProductSearchService {\n  constructor(protected store: Store<StateWithProduct>) {}\n\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts({\n        queryText: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getSearchResults));\n  }\n\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearPageResults: true,\n      })\n    );\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport {\n  combineLatest,\n  defer,\n  merge,\n  Observable,\n  of,\n  SchedulerLike,\n  using,\n} from 'rxjs';\nimport {\n  auditTime,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  shareReplay,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { deepMerge } from '../../config/utils/deep-merge';\nimport { Product } from '../../model/product.model';\nimport { LoadingScopesService } from '../../occ/services/loading-scopes.service';\nimport { withdrawOn } from '../../util/withdraw-on';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductLoadingService {\n  protected products: {\n    [code: string]: { [scope: string]: Observable<Product> };\n  } = {};\n\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected loadingScopes: LoadingScopesService,\n    protected actions$: Actions,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {}\n\n  get(productCode: string, scopes: string[]): Observable<Product> {\n    scopes = this.loadingScopes.expand('product', scopes);\n\n    this.initProductScopes(productCode, scopes);\n    return this.products[productCode][this.getScopesIndex(scopes)];\n  }\n\n  protected initProductScopes(productCode: string, scopes: string[]): void {\n    if (!this.products[productCode]) {\n      this.products[productCode] = {};\n    }\n\n    for (const scope of scopes) {\n      if (!this.products[productCode][scope]) {\n        this.products[productCode][scope] = this.getProductForScope(\n          productCode,\n          scope\n        );\n      }\n    }\n\n    if (scopes.length > 1) {\n      this.products[productCode][this.getScopesIndex(scopes)] = combineLatest(\n        scopes.map((scope) => this.products[productCode][scope])\n      ).pipe(\n        auditTime(0),\n        map((productParts) =>\n          productParts.every(Boolean)\n            ? deepMerge({}, ...productParts)\n            : undefined\n        ),\n        distinctUntilChanged()\n      );\n    }\n  }\n\n  protected getScopesIndex(scopes: string[]): string {\n    return scopes.join('ɵ');\n  }\n\n  /**\n   * Creates observable for providing specified product data for the scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductForScope(\n    productCode: string,\n    scope: string\n  ): Observable<Product> {\n    const shouldLoad$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductStateFactory(productCode, scope)\n      ),\n      map(\n        (productState) =>\n          !productState.loading && !productState.success && !productState.error\n      ),\n      distinctUntilChanged(),\n      filter((x) => x)\n    );\n\n    const isLoading$ = this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n\n    const productLoadLogic$ = merge(\n      shouldLoad$,\n      ...this.getProductReloadTriggers(productCode, scope)\n    ).pipe(\n      debounceTime(0),\n      withLatestFrom(isLoading$),\n      tap(([, isLoading]) => {\n        if (!isLoading) {\n          this.store.dispatch(\n            new ProductActions.LoadProduct(productCode, scope)\n          );\n        }\n      })\n    );\n\n    const productData$ = this.store.pipe(\n      select(ProductSelectors.getSelectedProductFactory(productCode, scope))\n    );\n\n    return using(\n      () => productLoadLogic$.subscribe(),\n      () => productData$\n    ).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n  }\n\n  /**\n   * Returns reload triggers for product per scope\n   *\n   * @param productCode\n   * @param scope\n   */\n  protected getProductReloadTriggers(\n    productCode: string,\n    scope: string\n  ): Observable<boolean>[] {\n    const triggers = [];\n\n    // max age trigger add\n    const maxAge = this.loadingScopes.getMaxAge('product', scope);\n    if (maxAge && isPlatformBrowser(this.platformId)) {\n      // we want to grab load product success and load product fail for this product and scope\n      const loadFinish$ = this.actions$.pipe(\n        filter(\n          (\n            action:\n              | ProductActions.LoadProductSuccess\n              | ProductActions.LoadProductFail\n          ) =>\n            (action.type === ProductActions.LOAD_PRODUCT_SUCCESS ||\n              action.type === ProductActions.LOAD_PRODUCT_FAIL) &&\n            action.meta.entityId === productCode &&\n            action.meta.scope === scope\n        )\n      );\n\n      const loadStart$ = this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        filter(\n          (action: ProductActions.LoadProduct) =>\n            action.payload === productCode && action.meta.scope === scope\n        )\n      );\n\n      triggers.push(this.getMaxAgeTrigger(loadStart$, loadFinish$, maxAge));\n    }\n\n    return triggers;\n  }\n\n  /**\n   * Generic method that returns stream triggering reload by maxAge\n   *\n   * Could be refactored to separate service in future to use in other\n   * max age reload implementations\n   *\n   * @param loadStart$ Stream that emits on load start\n   * @param loadFinish$ Stream that emits on load finish\n   * @param maxAge max age\n   */\n  private getMaxAgeTrigger(\n    loadStart$: Observable<any>,\n    loadFinish$: Observable<any>,\n    maxAge: number,\n    scheduler?: SchedulerLike\n  ): Observable<boolean> {\n    let timestamp = 0;\n\n    const now = () => (scheduler ? scheduler.now() : Date.now());\n\n    const timestamp$ = loadFinish$.pipe(tap(() => (timestamp = now())));\n\n    const shouldReload$: Observable<boolean> = defer(() => {\n      const age = now() - timestamp;\n\n      const timestampRefresh$ = timestamp$.pipe(\n        delay(maxAge, scheduler),\n        mapTo(true),\n        withdrawOn(loadStart$)\n      );\n\n      if (age > maxAge) {\n        // we should emit first value immediately\n        return merge(of(true), timestampRefresh$);\n      } else if (age === 0) {\n        // edge case, we should emit max age timeout after next load success\n        // could happen with artificial schedulers\n        return timestampRefresh$;\n      } else {\n        // we should emit first value when age will expire\n        return merge(\n          of(true).pipe(delay(maxAge - age, scheduler)),\n          timestampRefresh$\n        );\n      }\n    });\n\n    return shouldReload$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { Product } from '../../model/product.model';\nimport { ProductActions } from '../store/actions/index';\nimport { StateWithProduct } from '../store/product-state';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductLoadingService } from '../services/product-loading.service';\nimport { ProductScope } from '../model/product-scope';\nimport { DEFAULT_SCOPE } from '../../occ/occ-models/occ-endpoints.model';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    protected store: Store<StateWithProduct>,\n    protected productLoading: ProductLoadingService\n  ) {}\n\n  /**\n   * Returns the product observable. The product will be loaded\n   * whenever there's no value observed.\n   *\n   * The underlying product loader ensures that the product is\n   * only loaded once, even in case of parallel observers.\n   *\n   * You should provide product data scope you are interested in to not load all\n   * the data if not needed. You can provide more than one scope.\n   *\n   * @param productCode Product code to load\n   * @param scopes Scope or scopes of the product data\n   */\n  get(\n    productCode: string,\n    scopes: (ProductScope | string)[] | ProductScope | string = DEFAULT_SCOPE\n  ): Observable<Product> {\n    return productCode\n      ? this.productLoading.get(productCode, [].concat(scopes))\n      : of(undefined);\n  }\n\n  /**\n   * Returns boolean observable for product's loading state\n   */\n  isLoading(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductLoadingFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load success state\n   */\n  isSuccess(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductSuccessFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Returns boolean observable for product's load error state\n   */\n  hasError(\n    productCode: string,\n    scope: ProductScope | string = ''\n  ): Observable<boolean> {\n    return this.store.pipe(\n      select(\n        ProductSelectors.getSelectedProductErrorFactory(productCode, scope)\n      )\n    );\n  }\n\n  /**\n   * Reloads the product. The product is loaded implicetly\n   * whenever selected by the `get`, but in some cases an\n   * explicit reload might be needed.\n   */\n  reload(productCode: string, scope: ProductScope | string = ''): void {\n    this.store.dispatch(new ProductActions.LoadProduct(productCode, scope));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductSearchPage, Suggestion } from '../../model/index';\nimport { SearchConfig } from '../model/index';\nimport { ProductActions } from '../store/actions/index';\nimport { ProductSelectors } from '../store/selectors/index';\nimport { ProductSearchService } from './product-search.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchboxService extends ProductSearchService {\n  /**\n   * dispatch the search for the search box\n   */\n  search(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.SearchProducts(\n        {\n          queryText: query,\n          searchConfig: searchConfig,\n        },\n        true\n      )\n    );\n  }\n\n  getResults(): Observable<ProductSearchPage> {\n    return this.store.pipe(select(ProductSelectors.getAuxSearchResults));\n  }\n\n  /**\n   * clears the products and suggestions\n   */\n  clearResults(): void {\n    this.store.dispatch(\n      new ProductActions.ClearProductSearchResult({\n        clearSearchboxResults: true,\n      })\n    );\n  }\n\n  getSuggestionResults(): Observable<Suggestion[]> {\n    return this.store.pipe(select(ProductSelectors.getProductSuggestions));\n  }\n\n  searchSuggestions(query: string, searchConfig?: SearchConfig): void {\n    this.store.dispatch(\n      new ProductActions.GetProductSuggestions({\n        term: query,\n        searchConfig: searchConfig,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsService } from '../../cms/facade/cms.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchPage } from '../../model/product-search.model';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Product Listing Page.\n *\n * The page title, and breadcrumbs are resolved in this implementation only.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryPageMetaResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  // reusable observable for search page data\n  protected searchPage$: Observable<\n    ProductSearchPage | Page\n  > = this.cms.getCurrentPage().pipe(\n    filter(Boolean),\n    switchMap((page: Page) =>\n      // only the existence of a plp component tells us if products\n      // are rendered or if this is an ordinary content page\n      this.hasProductListComponent(page)\n        ? this.productSearchService.getResults().pipe(filter(Boolean))\n        : of(page)\n    )\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected cms: CmsService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CATEGORY_PAGE;\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.searchPage$.pipe(\n      filter((page: ProductSearchPage) => !!page.pagination),\n      switchMap((p: ProductSearchPage) =>\n        this.translation.translate('pageMetaResolver.category.title', {\n          count: p.pagination.totalResults,\n          query: p.breadcrumbs?.length\n            ? p.breadcrumbs[0].facetValueName\n            : undefined,\n        })\n      )\n    );\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.searchPage$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [ProductSearchPage, string]) =>\n        p.breadcrumbs\n          ? this.resolveBreadcrumbData(<ProductSearchPage>p, label)\n          : null\n      )\n    );\n  }\n\n  protected resolveBreadcrumbData(\n    page: ProductSearchPage,\n    label: string\n  ): BreadcrumbMeta[] {\n    const breadcrumbs: BreadcrumbMeta[] = [];\n    breadcrumbs.push({ label: label, link: '/' });\n\n    for (const br of page.breadcrumbs) {\n      if (br.facetCode === 'category' || br.facetCode === 'allCategories') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/c/${br.facetValueCode}`,\n        });\n      }\n      if (br.facetCode === 'brand') {\n        breadcrumbs.push({\n          label: br.facetValueName,\n          link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,\n        });\n      }\n    }\n    return breadcrumbs;\n  }\n\n  protected hasProductListComponent(page: Page): boolean {\n    return !!Object.keys(page.slots).find(\n      (key) =>\n        !!page.slots[key].components.find(\n          (comp) =>\n            comp.typeCode === 'CMSProductListComponent' ||\n            comp.typeCode === 'ProductGridComponent'\n        )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { BreadcrumbMeta, Page } from '../../cms/model/page.model';\nimport {\n  PageBreadcrumbResolver,\n  PageMetaResolver,\n  PageTitleResolver,\n} from '../../cms/page';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { ProductSearchService } from '../../product/facade/product-search.service';\nimport { SemanticPathService } from '../../routing/configurable-routes/url-translation/semantic-path.service';\n\n/**\n * Resolves page meta data for the search result page, in case it's used\n * to query coupons. This is done by adding a `couponcode` query parameter\n * to the search page route.\n *\n * The page resolves an alternative page title and breadcrumb.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CouponSearchPageResolver extends PageMetaResolver\n  implements PageTitleResolver, PageBreadcrumbResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService,\n    protected authService: AuthService,\n    protected route: ActivatedRoute,\n    protected semanticPathService: SemanticPathService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.translation.translate('common.home'),\n      this.translation.translate('myCoupons.myCoupons'),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      map(([homeLabel, couponLabel, isLoggedIn]: [string, string, boolean]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: homeLabel, link: '/' });\n        if (isLoggedIn) {\n          breadcrumbs.push({\n            label: couponLabel,\n            link: this.semanticPathService.transform({\n              cxRoute: 'coupons',\n            }),\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  resolveTitle(): Observable<string> {\n    return this.total$.pipe(\n      switchMap((total: number) =>\n        this.translation.translate('pageMetaResolver.search.findProductTitle', {\n          count: total,\n          coupon: this.couponCode,\n        })\n      )\n    );\n  }\n\n  getScore(page: Page): number {\n    return super.getScore(page) + (this.couponCode ? 1 : -1);\n  }\n\n  protected get couponCode(): string {\n    return this.route.snapshot?.queryParams?.couponcode;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { BreadcrumbMeta, PageRobotsMeta } from '../../cms/model/page.model';\nimport { PageMetaResolver } from '../../cms/page/page-meta.resolver';\nimport {\n  PageBreadcrumbResolver,\n  PageDescriptionResolver,\n  PageHeadingResolver,\n  PageImageResolver,\n  PageRobotsResolver,\n  PageTitleResolver,\n} from '../../cms/page/page.resolvers';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { Product } from '../../model/product.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductService } from '../facade/product.service';\nimport { ProductScope } from '../model/product-scope';\n\n/**\n * Resolves the page data for the Product Detail Page\n * based on the `PageType.PRODUCT_PAGE`.\n *\n * The page title, heading, description, breadcrumbs and\n * first GALLERY image are resolved if available in the data.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageMetaResolver extends PageMetaResolver\n  implements\n    PageHeadingResolver,\n    PageTitleResolver,\n    PageDescriptionResolver,\n    PageBreadcrumbResolver,\n    PageImageResolver,\n    PageRobotsResolver {\n  // reusable observable for product data based on the current page\n  protected product$ = this.routingService.getRouterState().pipe(\n    map((state) => state.state.params['productCode']),\n    filter((code) => !!code),\n    switchMap((code) => this.productService.get(code, ProductScope.DETAILS)),\n    filter(Boolean)\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productService: ProductService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.PRODUCT_PAGE;\n  }\n\n  /**\n   * Resolves the page heading for the Product Detail Page.\n   * The page heading is used in the UI (`<h1>`), where as the page\n   * title is used by the browser and crawlers.\n   */\n  resolveHeading(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.heading', {\n          heading: p.name,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves the page title for the Product Detail Page. The page title\n   * is resolved with the product name, the first category and the manufactorer.\n   * The page title used by the browser (history, tabs) and crawlers.\n   */\n  resolveTitle(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) => {\n        let title = p.name;\n        title += this.resolveFirstCategory(p);\n        title += this.resolveManufacturer(p);\n        return this.translation.translate('pageMetaResolver.product.title', {\n          title: title,\n        });\n      })\n    );\n  }\n\n  /**\n   * Resolves the page description for the Product Detail Page. The description\n   * is based on the `product.summary`.\n   */\n  resolveDescription(): Observable<string> {\n    return this.product$.pipe(\n      switchMap((p: Product) =>\n        this.translation.translate('pageMetaResolver.product.description', {\n          description: p.summary,\n        })\n      )\n    );\n  }\n\n  /**\n   * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by\n   * a static home page crum and a crumb for each category.\n   */\n  resolveBreadcrumbs(): Observable<BreadcrumbMeta[]> {\n    return combineLatest([\n      this.product$.pipe(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([p, label]: [Product, string]) => {\n        const breadcrumbs = [];\n        breadcrumbs.push({ label: label, link: '/' });\n        for (const { name, code, url } of p.categories || []) {\n          breadcrumbs.push({\n            label: name || code,\n            link: url,\n          });\n        }\n        return breadcrumbs;\n      })\n    );\n  }\n\n  /**\n   * Resolves the main page image for the Product Detail Page. The product image\n   * is based on the PRIMARY product image. The zoom format is used by default.\n   */\n  resolveImage(): Observable<string> {\n    return this.product$.pipe(\n      map((p: Product) =>\n        (<any>p.images?.PRIMARY)?.zoom?.url\n          ? (<any>p.images.PRIMARY).zoom.url\n          : null\n      )\n    );\n  }\n\n  protected resolveFirstCategory(product: Product): string {\n    let firstCategory;\n    if (product.categories?.length > 0) {\n      firstCategory = product.categories[0];\n    }\n    return firstCategory\n      ? ` | ${firstCategory.name || firstCategory.code}`\n      : '';\n  }\n\n  protected resolveManufacturer(product: Product): string {\n    return product.manufacturer ? ` | ${product.manufacturer}` : '';\n  }\n\n  /**\n   * Resolves the robot information for the Product Detail Page. The\n   * robot instruction defaults to FOLLOW and INDEX for all product pages,\n   * regardless of whether they're purchasable or not.\n   */\n  resolveRobots(): Observable<PageRobotsMeta[]> {\n    return of([PageRobotsMeta.FOLLOW, PageRobotsMeta.INDEX]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { PageMetaResolver } from '../../cms';\nimport { TranslationService } from '../../i18n/translation.service';\nimport { PageType } from '../../model/cms.model';\nimport { RoutingService } from '../../routing/facade/routing.service';\nimport { ProductSearchService } from '../facade/product-search.service';\n\n/**\n * Resolves the page data for the Search Result Page based on the\n * `PageType.CATEGORY_PAGE` and the `SearchResultsListPageTemplate` template.\n *\n * Only the page title is resolved in the standard implemenation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchPageMetaResolver extends PageMetaResolver\n  implements PageMetaResolver {\n  protected total$: Observable<\n    number\n  > = this.productSearchService.getResults().pipe(\n    filter((data) => !!data?.pagination),\n    map((results) => results.pagination.totalResults)\n  );\n\n  protected query$: Observable<\n    string\n  > = this.routingService\n    .getRouterState()\n    .pipe(map((state) => state.state.params['query']));\n\n  constructor(\n    protected routingService: RoutingService,\n    protected productSearchService: ProductSearchService,\n    protected translation: TranslationService\n  ) {\n    super();\n    this.pageType = PageType.CONTENT_PAGE;\n    this.pageTemplate = 'SearchResultsListPageTemplate';\n  }\n\n  resolveTitle(): Observable<string> {\n    const sources = [this.total$, this.query$];\n    return combineLatest(sources).pipe(\n      switchMap(([t, q]: [number, string]) =>\n        this.translation.translate('pageMetaResolver.search.title', {\n          count: t,\n          query: q,\n        })\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReferencesConnector } from '../../connectors/references/product-references.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductReferencesEffects {\n  @Effect()\n  loadProductReferences$: Observable<\n    | ProductActions.LoadProductReferencesSuccess\n    | ProductActions.LoadProductReferencesFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REFERENCES),\n    map((action: ProductActions.LoadProductReferences) => action.payload),\n    mergeMap((payload) => {\n      return this.productReferencesConnector\n        .get(payload.productCode, payload.referenceType, payload.pageSize)\n        .pipe(\n          map((data) => {\n            return new ProductActions.LoadProductReferencesSuccess({\n              productCode: payload.productCode,\n              list: data,\n            });\n          }),\n          catchError((_error) =>\n            of(\n              new ProductActions.LoadProductReferencesFail({\n                message: payload.productCode,\n              } as ErrorModel)\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReferencesConnector: ProductReferencesConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport { ErrorModel } from '../../../model/misc.model';\nimport { ProductReviewsConnector } from '../../connectors/reviews/product-reviews.connector';\nimport { ProductActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class ProductReviewsEffects {\n  @Effect()\n  loadProductReviews$: Observable<\n    | ProductActions.LoadProductReviewsSuccess\n    | ProductActions.LoadProductReviewsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.LOAD_PRODUCT_REVIEWS),\n    map((action: ProductActions.LoadProductReviews) => action.payload),\n    mergeMap((productCode) => {\n      return this.productReviewsConnector.get(productCode).pipe(\n        map((data) => {\n          return new ProductActions.LoadProductReviewsSuccess({\n            productCode,\n            list: data,\n          });\n        }),\n        catchError((_error) =>\n          of(\n            new ProductActions.LoadProductReviewsFail({\n              message: productCode,\n            } as ErrorModel)\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  postProductReview: Observable<\n    | ProductActions.PostProductReviewSuccess\n    | ProductActions.PostProductReviewFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW),\n    map((action: ProductActions.PostProductReview) => action.payload),\n    mergeMap((payload) => {\n      return this.productReviewsConnector\n        .add(payload.productCode, payload.review)\n        .pipe(\n          map((reviewResponse) => {\n            return new ProductActions.PostProductReviewSuccess(reviewResponse);\n          }),\n          catchError((_error) =>\n            of(new ProductActions.PostProductReviewFail(payload.productCode))\n          )\n        );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  showGlobalMessageOnPostProductReviewSuccess$ = this.actions$.pipe(\n    ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS),\n    tap(() => {\n      this.globalMessageService.add(\n        { key: 'productReview.thankYouForReview' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productReviewsConnector: ProductReviewsConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductSearchConnector } from '../../connectors/search/product-search.connector';\nimport { ProductActions } from '../actions/index';\n\n@Injectable()\nexport class ProductsSearchEffects {\n  @Effect()\n  searchProducts$: Observable<\n    ProductActions.SearchProductsSuccess | ProductActions.SearchProductsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.SEARCH_PRODUCTS),\n    groupBy((action: ProductActions.SearchProducts) => action.auxiliary),\n    mergeMap((group) =>\n      group.pipe(\n        switchMap((action: ProductActions.SearchProducts) => {\n          return this.productSearchConnector\n            .search(action.payload.queryText, action.payload.searchConfig)\n            .pipe(\n              map((data) => {\n                return new ProductActions.SearchProductsSuccess(\n                  data,\n                  action.auxiliary\n                );\n              }),\n              catchError((error) =>\n                of(\n                  new ProductActions.SearchProductsFail(\n                    makeErrorSerializable(error),\n                    action.auxiliary\n                  )\n                )\n              )\n            );\n        })\n      )\n    )\n  );\n\n  @Effect()\n  getProductSuggestions$: Observable<\n    | ProductActions.GetProductSuggestionsSuccess\n    | ProductActions.GetProductSuggestionsFail\n  > = this.actions$.pipe(\n    ofType(ProductActions.GET_PRODUCT_SUGGESTIONS),\n    map((action: ProductActions.GetProductSuggestions) => action.payload),\n    switchMap((payload) => {\n      return this.productSearchConnector\n        .getSuggestions(payload.term, payload.searchConfig.pageSize)\n        .pipe(\n          map((suggestions) => {\n            if (suggestions === undefined) {\n              return new ProductActions.GetProductSuggestionsSuccess([]);\n            }\n            return new ProductActions.GetProductSuggestionsSuccess(suggestions);\n          }),\n          catchError((error) =>\n            of(\n              new ProductActions.GetProductSuggestionsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productSearchConnector: ProductSearchConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { merge, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { ProductConnector } from '../../connectors/product/product.connector';\nimport { ProductActions } from '../actions/index';\nimport { ScopedProductData } from '../../connectors/product/scoped-product-data';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { bufferDebounceTime } from '../../../util/buffer-debounce-time';\nimport { Action } from '@ngrx/store';\nimport { withdrawOn } from '../../../util/withdraw-on';\n\n@Injectable()\nexport class ProductEffects {\n  // we want to cancel all ongoing requests when currency or language changes,\n  private contextChange$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.CURRENCY_CHANGE,\n      SiteContextActions.LANGUAGE_CHANGE\n    )\n  );\n\n  loadProduct$ = createEffect(\n    () => ({ scheduler, debounce = 0 } = {}): Observable<\n      ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n    > =>\n      this.actions$.pipe(\n        ofType(ProductActions.LOAD_PRODUCT),\n        map((action: ProductActions.LoadProduct) => ({\n          code: action.payload,\n          scope: action.meta.scope,\n        })),\n        // we are grouping all load actions that happens at the same time\n        // to optimize loading and pass them all to productConnector.getMany\n        bufferDebounceTime(debounce, scheduler),\n        mergeMap((products) =>\n          merge(\n            ...this.productConnector\n              .getMany(products)\n              .map(this.productLoadEffect)\n          )\n        ),\n        withdrawOn(this.contextChange$)\n      )\n  );\n\n  private productLoadEffect(\n    productLoad: ScopedProductData\n  ): Observable<\n    ProductActions.LoadProductSuccess | ProductActions.LoadProductFail\n  > {\n    return productLoad.data$.pipe(\n      map(\n        (data) =>\n          new ProductActions.LoadProductSuccess(\n            { code: productLoad.code, ...data },\n            productLoad.scope\n          )\n      ),\n      catchError((error) => {\n        return of(\n          new ProductActions.LoadProductFail(\n            productLoad.code,\n            makeErrorSerializable(error),\n            productLoad.scope\n          )\n        );\n      })\n    );\n  }\n\n  constructor(\n    private actions$: Actions,\n    private productConnector: ProductConnector\n  ) {}\n}\n","import { ProductReferencesEffects } from './product-references.effect';\nimport { ProductReviewsEffects } from './product-reviews.effect';\nimport { ProductsSearchEffects } from './product-search.effect';\nimport { ProductEffects } from './product.effect';\n\nexport const effects: any[] = [\n  ProductsSearchEffects,\n  ProductEffects,\n  ProductReviewsEffects,\n  ProductReferencesEffects,\n];\n\nexport * from './product-references.effect';\nexport * from './product-reviews.effect';\nexport * from './product-search.effect';\nexport * from './product.effect';\n","import { ProductReference } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReferencesState } from '../product-state';\n\nexport const initialState: ProductReferencesState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReferencesAction\n): ProductReferencesState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REFERENCES_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        list: [...state.list, ...(list ? list : [])].reduce(\n          (\n            productReferences: ProductReference[],\n            productReference: ProductReference\n          ) => {\n            if (\n              !productReferences.some(\n                (obj) =>\n                  obj.referenceType === productReference.referenceType &&\n                  obj.target.code === productReference.target.code\n              )\n            ) {\n              productReferences.push(productReference);\n            }\n            return productReferences;\n          },\n          []\n        ),\n        productCode,\n      };\n    }\n\n    case ProductActions.CLEAN_PRODUCT_REFERENCES: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n\nexport const getProductReferenceList = (\n  state: ProductReferencesState\n): ProductReference[] => state.list;\nexport const getProductReferenceProductCode = (\n  state: ProductReferencesState\n): string => state.productCode;\n","import { Review } from '../../../model/product.model';\nimport { ProductActions } from '../actions/index';\nimport { ProductReviewsState } from '../product-state';\n\nexport const initialState: ProductReviewsState = {\n  productCode: '',\n  list: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: ProductActions.ProductReviewsAction\n): ProductReviewsState {\n  switch (action.type) {\n    case ProductActions.LOAD_PRODUCT_REVIEWS_SUCCESS: {\n      const productCode = action.payload.productCode;\n      const list = action.payload.list;\n\n      return {\n        ...state,\n        productCode,\n        list,\n      };\n    }\n  }\n\n  return state;\n}\n\nexport const getReviewList = (state: ProductReviewsState): Review[] =>\n  state.list;\nexport const getReviewProductCode = (state: ProductReviewsState): string =>\n  state.productCode;\n","import { loaderReducer } from '../loader/loader.reducer';\nimport { EntityScopedLoaderAction } from '../../../product/store/actions/product.action';\nimport { ScopedLoaderState } from './scoped-loader.state';\nimport { Action } from '@ngrx/store';\n\nexport const initialScopedLoaderState: ScopedLoaderState<any> = {};\n\n/**\n * Higher order reducer designed to add scope support for loader reducer\n *\n * @param entityType\n * @param reducer\n */\nexport function scopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: Action) => T\n): (\n  state: ScopedLoaderState<T>,\n  action: EntityScopedLoaderAction\n) => ScopedLoaderState<T> {\n  const loader = loaderReducer<T>(entityType, reducer);\n\n  return (\n    state: ScopedLoaderState<T> = initialScopedLoaderState,\n    action: EntityScopedLoaderAction\n  ): ScopedLoaderState<T> => {\n    if (action && action.meta && action.meta.entityType === entityType) {\n      return {\n        ...state,\n        [action.meta.scope ?? '']: loader(state[action.meta.scope], action),\n      };\n    }\n    return state;\n  };\n}\n","import {\n  EntityScopedLoaderState,\n  ScopedLoaderState,\n} from './scoped-loader.state';\nimport { scopedLoaderReducer } from './scoped-loader.reducer';\n\nimport { entityReducer } from '../entity/entity.reducer';\nimport { LoaderAction } from '../loader/loader.action';\nimport { EntityScopedLoaderActions } from './entity-scoped-loader.actions';\n\n/**\n * Higher order reducer that wraps scopedLoaderReducer and EntityReducer enhancing\n * single state reducer to support multiple entities with generic loading flags and scopes\n */\nexport function entityScopedLoaderReducer<T>(\n  entityType: string,\n  reducer?: (state: T, action: LoaderAction) => T\n): (\n  state: EntityScopedLoaderState<T>,\n  action: EntityScopedLoaderActions.EntityScopedLoaderAction\n) => EntityScopedLoaderState<T> {\n  return entityReducer<ScopedLoaderState<T>>(\n    entityType,\n    scopedLoaderReducer<T>(entityType, reducer)\n  );\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducer, ActionReducerMap, MetaReducer } from '@ngrx/store';\nimport { Product } from '../../../model/product.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { PRODUCT_DETAIL_ENTITY, ProductsState } from '../product-state';\nimport * as fromProductReferences from './product-references.reducer';\nimport * as fromProductReviews from './product-reviews.reducer';\nimport * as fromProductsSearch from './product-search.reducer';\nimport { entityScopedLoaderReducer } from '../../../state/utils/scoped-loader/entity-scoped-loader.reducer';\n\nexport function getReducers(): ActionReducerMap<ProductsState> {\n  return {\n    search: fromProductsSearch.reducer,\n    details: entityScopedLoaderReducer<Product>(PRODUCT_DETAIL_ENTITY),\n    reviews: fromProductReviews.reducer,\n    references: fromProductReferences.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  ProductsState\n>> = new InjectionToken<ActionReducerMap<ProductsState>>('ProductReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearProductsState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (\n      action.type === SiteContextActions.CURRENCY_CHANGE ||\n      action.type === SiteContextActions.LANGUAGE_CHANGE\n    ) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearProductsState];\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { provideDefaultConfigFactory } from '../../config/config.module';\nimport {\n  StateConfig,\n  StateTransferType,\n} from '../../state/config/state-config';\nimport { effects } from './effects/index';\nimport { PRODUCT_FEATURE } from './product-state';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\nexport function productStoreConfigFactory(): StateConfig {\n  // if we want to reuse PRODUCT_FEATURE const in config, we have to use factory instead of plain object\n  const config: StateConfig = {\n    state: {\n      ssrTransfer: {\n        keys: { [PRODUCT_FEATURE]: StateTransferType.TRANSFER_STATE },\n      },\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(PRODUCT_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [\n    provideDefaultConfigFactory(productStoreConfigFactory),\n    reducerProvider,\n  ],\n})\nexport class ProductStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PageMetaResolver } from '../cms/page/page-meta.resolver';\nimport { ProductReferenceService } from './facade/product-reference.service';\nimport { ProductReviewService } from './facade/product-review.service';\nimport { ProductSearchService } from './facade/product-search.service';\nimport { ProductService } from './facade/product.service';\nimport { CategoryPageMetaResolver } from './services/category-page-meta.resolver';\nimport { CouponSearchPageResolver } from './services/coupon-search-page-meta.resolver';\nimport { ProductPageMetaResolver } from './services/product-page-meta.resolver';\nimport { SearchPageMetaResolver } from './services/search-page-meta.resolver';\nimport { ProductStoreModule } from './store/product-store.module';\n\nconst pageTitleResolvers = [\n  {\n    provide: PageMetaResolver,\n    useExisting: ProductPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CategoryPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: SearchPageMetaResolver,\n    multi: true,\n  },\n  {\n    provide: PageMetaResolver,\n    useExisting: CouponSearchPageResolver,\n    multi: true,\n  },\n];\n\n@NgModule({\n  imports: [ProductStoreModule],\n})\nexport class ProductModule {\n  static forRoot(): ModuleWithProviders<ProductModule> {\n    return {\n      ngModule: ProductModule,\n      providers: [\n        ProductService,\n        ProductSearchService,\n        ProductReviewService,\n        ProductReferenceService,\n        ...pageTitleResolvers,\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SmartEditService } from '../services/smart-edit.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CmsTicketInterceptor implements HttpInterceptor {\n  constructor(private service: SmartEditService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (request.url.includes('/cms/') && this.service.cmsTicketId) {\n      request = request.clone({\n        setParams: {\n          cmsTicketId: this.service.cmsTicketId,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { CmsTicketInterceptor } from './cms-ticket.interceptor';\n\nexport const interceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: CmsTicketInterceptor,\n    multi: true,\n  },\n];\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { interceptors } from './http-interceptors/index';\n\n@NgModule({})\nexport class SmartEditModule {\n  static forRoot(): ModuleWithProviders<SmartEditModule> {\n    return {\n      ngModule: SmartEditModule,\n      providers: [...interceptors],\n    };\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from './ssr.providers';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null | undefined, html?: string | undefined) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(ngExpressEngine: NgExpressEngine): NgExpressEngine {\n    const result = function cxNgExpressEngine(\n      setupOptions: NgSetupOptions\n    ): NgExpressEngineInstance {\n      return (filePath, options, callback) => {\n        const engineInstance = ngExpressEngine({\n          ...setupOptions,\n          providers: [\n            ...getServerRequestProviders(options),\n            ...(setupOptions.providers || []),\n          ],\n        });\n        return engineInstance(filePath, options, callback);\n      };\n    };\n    return result;\n  }\n}\n\n/**\n * Returns Spartacus' providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(\n  options: RenderOptions\n): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useValue: getRequestUrl(options.req),\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useValue: getRequestOrigin(options.req),\n    },\n  ];\n}\n\nfunction getRequestUrl(req: any): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: any): string {\n  return req.protocol + '://' + req.get('host');\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '../../config/config.module';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl?: string;\n    apiKey?: string;\n    scale?: number;\n    selectedMarkerScale?: number;\n    radius?: number;\n  };\n}\n","import { StateUtils } from '../../state/utils';\nimport { StoreEntities } from '../model';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: StateUtils.LoaderState<FindStoresState>;\n  viewAllStores: StateUtils.LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { GeoPoint } from '../../../model/misc.model';\nimport { StateUtils } from '../../../state/utils/index';\nimport { StoreFinderSearchConfig } from '../../model/search-config';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: StoreFinderSearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n      radius?: number;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { StateUtils } from '../../../state/utils/index';\nimport { STORE_FINDER_DATA } from '../store-finder-state';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\n\nexport class ViewAllStores extends StateUtils.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '../../../state/utils/index';\nimport { LoaderState } from '../../../state/utils/loader/loader-state';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GeoPoint } from '../../model/misc.model';\nimport { WindowRef } from '../../window/window-ref';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  ViewAllStoresState,\n} from '../store/store-finder-state';\nimport { StoreFinderSearchConfig } from './../model/search-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../global-message/index';\nimport { RoutingService } from '../../routing/index';\n\n@Injectable()\nexport class StoreFinderService {\n  private geolocationWatchId: number = null;\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<FindStoresState> {\n    return this.store.pipe(select(StoreFinderSelectors.getFindStoresEntities));\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<ViewAllStoresState> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   * @param radius radius of the scope from the center point\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: StoreFinderSearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean,\n    radius?: number\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId = this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n        (pos: Position) => {\n          const position: GeoPoint = {\n            longitude: pos.coords.longitude,\n            latitude: pos.coords.latitude,\n          };\n\n          this.clearWatchGeolocation(\n            new StoreFinderActions.FindStores({\n              queryText: queryText,\n              searchConfig: searchConfig,\n              longitudeLatitude: position,\n              countryIsoCode: countryIsoCode,\n              radius: radius,\n            })\n          );\n        },\n        () => {\n          this.globalMessageService.add(\n            { key: 'storeFinder.geolocationNotEnabled' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.routingService.go(['/store-finder']);\n        }\n      );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n          radius: radius,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PointOfService } from '../../model/point-of-service.model';\n\n@Injectable()\nexport class StoreDataService {\n  readonly DECIMAL_BASE: 10;\n  readonly weekDays = {\n    0: 'Sun',\n    1: 'Mon',\n    2: 'Tue',\n    3: 'Wed',\n    4: 'Thu',\n    5: 'Fri',\n    6: 'Sat',\n  };\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number {\n    return location.geoPoint.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number {\n    return location.geoPoint.longitude;\n  }\n\n  /**\n   * Returns store closing time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreClosingTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.closingTime) {\n        return requestedDaySchedule.closingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Returns store opening time\n   * @param location store location\n   * @param date date to compare\n   */\n  getStoreOpeningTime(location: PointOfService, date: Date): string {\n    const requestedDaySchedule = this.getSchedule(location, date);\n\n    if (requestedDaySchedule) {\n      if (requestedDaySchedule.closed && requestedDaySchedule.closed === true) {\n        return 'closed';\n      }\n\n      if (requestedDaySchedule.openingTime) {\n        return requestedDaySchedule.openingTime.formattedHour;\n      }\n    }\n  }\n\n  /**\n   * Extracts schedule from the given location for the given date\n   * @param location location\n   * @param date date\n   *\n   * @returns payload describing the store's schedule for the given day.\n   */\n  protected getSchedule(location: PointOfService, date: Date): any {\n    const weekday = this.weekDays[date.getDay()];\n    return location.openingHours.weekDayOpeningList.find(\n      (weekDayOpeningListItem) => weekDayOpeningListItem.weekDay === weekday\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable()\nexport class ExternalJsFileLoader {\n  constructor(@Inject(DOCUMENT) protected document: any) {}\n\n  /**\n   * Loads a javascript from an external URL\n   * @param src URL for the script to be loaded\n   * @param params additional parameters to be attached to the given URL\n   * @param callback a function to be invoked after the script has been loaded\n   */\n  public load(src: string, params?: Object, callback?: EventListener): void {\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    if (params) {\n      script.src = src + this.parseParams(params);\n    } else {\n      script.src = src;\n    }\n\n    script.async = true;\n    script.defer = true;\n    if (callback) {\n      script.addEventListener('load', callback);\n    }\n\n    document.head.appendChild(script);\n  }\n\n  /**\n   * Parses the given object with parameters to a string \"param1=value1&param2=value2\"\n   * @param params object containing parameters\n   */\n  private parseParams(params: Object): string {\n    let result = '';\n    const keysArray = Object.keys(params);\n    if (keysArray.length > 0) {\n      result =\n        '?' +\n        keysArray\n          .map((key) => encodeURI(key) + '=' + encodeURI(params[key]))\n          .join('&');\n    }\n    return result;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { ExternalJsFileLoader } from './external-js-file-loader.service';\nimport { Injectable } from '@angular/core';\nimport { StoreDataService } from '../facade/store-data.service';\nimport { StoreFinderConfig } from '../config/store-finder-config';\n\n@Injectable()\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected externalJsFileLoader: ExternalJsFileLoader,\n    protected storeDataService: StoreDataService\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (this.googleMap === null) {\n      this.externalJsFileLoader.load(\n        this.config.googleMaps.apiUrl,\n        { key: this.config.googleMaps.apiKey },\n        () => {\n          this.drawMap(mapElement, locations, selectMarkerHandler);\n        }\n      );\n    } else {\n      this.drawMap(mapElement, locations, selectMarkerHandler);\n    }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeDataService.getStoreLatitude(locations[0]),\n      this.storeDataService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeDataService.getStoreLatitude(element),\n          this.storeDataService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n    radius: 50000,\n  },\n};\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: loaderReducer(STORE_FINDER_DATA),\n    viewAllStores: loaderReducer(STORE_FINDER_DATA),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  StoresState\n>> = new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport const metaReducers: MetaReducer<any>[] = [];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude,\n          payload.radius\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new StoreFinderActions.FindStoresFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.VIEW_ALL_STORES),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '../config/config.module';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreDataService } from './facade/store-data.service';\nimport { StoreFinderService } from './facade/store-finder.service';\nimport {\n  ExternalJsFileLoader,\n  GoogleMapRendererService,\n} from './service/index';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [\n    provideDefaultConfig(defaultStoreFinderConfig),\n    StoreFinderService,\n    StoreDataService,\n    GoogleMapRendererService,\n    ExternalJsFileLoader,\n  ],\n})\nexport class StoreFinderCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Title, User, UserSignUp } from '../../../model/misc.model';\nimport { UserAdapter } from './user.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConnector {\n  constructor(protected adapter: UserAdapter) {}\n\n  get(userId: string): Observable<User> {\n    return this.adapter.load(userId);\n  }\n\n  update(username: string, user: User): Observable<{}> {\n    return this.adapter.update(username, user);\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    return this.adapter.register(user);\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    return this.adapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<{}> {\n    return this.adapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<{}> {\n    return this.adapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<{}> {\n    return this.adapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{}> {\n    return this.adapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId: string): Observable<{}> {\n    return this.adapter.remove(userId);\n  }\n\n  getTitles(): Observable<Title[]> {\n    return this.adapter.loadTitles();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserConsentAdapter } from './user-consent.adapter';\nimport { ConsentTemplate } from '../../../model/consent.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserConsentConnector {\n  constructor(protected adapter: UserConsentAdapter) {}\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return this.adapter.loadConsents(userId);\n  }\n\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    return this.adapter.giveConsent(\n      userId,\n      consentTemplateId,\n      consentTemplateVersion\n    );\n  }\n\n  withdrawConsent(userId: string, consentCode: string): Observable<{}> {\n    return this.adapter.withdrawConsent(userId, consentCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserPaymentAdapter } from './user-payment.adapter';\nimport { Observable } from 'rxjs';\nimport { PaymentDetails } from '../../../model/cart.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentConnector {\n  constructor(protected adapter: UserPaymentAdapter) {}\n\n  getAll(userId: string): Observable<PaymentDetails[]> {\n    return this.adapter.loadAll(userId);\n  }\n\n  delete(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.delete(userId, paymentMethodID);\n  }\n\n  setDefault(userId: string, paymentMethodID: string): Observable<{}> {\n    return this.adapter.setDefault(userId, paymentMethodID);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../../model/order.model';\nimport { UserOrderAdapter } from './user-order.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderConnector {\n  constructor(protected adapter: UserOrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponNotification,\n  CustomerCoupon2Customer,\n} from '../../../model/customer-coupon.model';\nimport { CustomerCouponAdapter } from './customer-coupon.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponConnector {\n  constructor(protected adapter: CustomerCouponAdapter) {}\n\n  getCustomerCoupons(\n    userId: string,\n    pageSize: number,\n    currentPage: number,\n    sort: string\n  ): Observable<CustomerCouponSearchResult> {\n    return this.adapter.getCustomerCoupons(userId, pageSize, currentPage, sort);\n  }\n\n  turnOnNotification(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCouponNotification> {\n    return this.adapter.turnOnNotification(userId, couponCode);\n  }\n\n  turnOffNotification(userId: string, couponCode: string): Observable<{}> {\n    return this.adapter.turnOffNotification(userId, couponCode);\n  }\n\n  claimCustomerCoupon(\n    userId: string,\n    couponCode: string\n  ): Observable<CustomerCoupon2Customer> {\n    return this.adapter.claimCustomerCoupon(userId, couponCode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserInterestsAdapter } from './user-interests.adapter';\nimport { Observable } from 'rxjs';\nimport {\n  ProductInterestSearchResult,\n  ProductInterestEntryRelation,\n  NotificationType,\n} from '../../../model/product-interest.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsConnector {\n  constructor(protected adapter: UserInterestsAdapter) {}\n  getInterests(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): Observable<ProductInterestSearchResult> {\n    return this.adapter.getInterests(\n      userId,\n      pageSize,\n      currentPage,\n      sort,\n      productCode,\n      notificationType\n    );\n  }\n\n  removeInterest(\n    userId: string,\n    item: ProductInterestEntryRelation\n  ): Observable<any[]> {\n    return this.adapter.removeInterest(userId, item);\n  }\n\n  addInterest(\n    userId: string,\n    productCode: string,\n    notificationType: NotificationType\n  ): Observable<any> {\n    return this.adapter.addInterest(userId, productCode, notificationType);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { merge, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { AnonymousConsentsService } from '../../anonymous-consents/index';\nimport { AnonymousConsent, Consent } from '../../model/index';\nimport { UserConsentService } from './user-consent.service';\n\n/**\n * Unified facade for both anonymous and registered user consents.\n */\n@Injectable({ providedIn: 'root' })\nexport class ConsentService {\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected userConsentService: UserConsentService\n  ) {}\n\n  /**\n   * Returns either anonymous consent or registered consent as they are emmited.\n   * @param templateCode for which to return either anonymous or registered consent.\n   */\n  getConsent(templateCode: string): Observable<AnonymousConsent | Consent> {\n    return merge(\n      this.userConsentService.getConsent(templateCode),\n      this.anonymousConsentsService.getConsent(templateCode)\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a given consent.\n   * The method returns `false` if the consent doesn't exist or if it's withdrawn. Otherwise, `true` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentGivenByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return false;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentGiven(consent)\n          : this.userConsentService.isConsentGiven(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Checks if the `templateId`'s template has a withdrawn consent.\n   * The method returns `true` if the consent doesn't exist or if it's withdrawn. Otherwise, `false` is returned.\n   *\n   * @param templateId of a template which's consent should be checked\n   */\n  checkConsentWithdrawnByTemplateId(templateId: string): Observable<boolean> {\n    return this.getConsent(templateId).pipe(\n      map((consent) => {\n        if (!consent) {\n          return true;\n        }\n\n        return this.isAnonymousConsentType(consent)\n          ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n          : this.userConsentService.isConsentWithdrawn(consent);\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentGiven(consent)` or `this.userConsentService.isConsentGiven`\n   *\n   * @param consent a consent to check\n   */\n  isConsentGiven(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentGiven(consent)\n      : this.userConsentService.isConsentGiven(consent);\n  }\n\n  /**\n   *\n   * Checks the provided `consent`'s type and delegates to an appropriate method - `anonymousConsentsService.isConsentWithdrawn(consent)` or `this.userConsentService.isConsentWithdrawn`\n   *\n   * @param consent a consent to check\n   */\n  isConsentWithdrawn(consent: AnonymousConsent | Consent): boolean {\n    return this.isAnonymousConsentType(consent)\n      ? this.anonymousConsentsService.isConsentWithdrawn(consent)\n      : this.userConsentService.isConsentWithdrawn(consent);\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `AnonymousConsent`. Otherwise, `false` is returned.\n   */\n  isAnonymousConsentType(\n    consent: AnonymousConsent | Consent\n  ): consent is AnonymousConsent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as AnonymousConsent).templateCode !== undefined;\n  }\n\n  /**\n   * Returns `true` if the provided consent is of type `Consent`. Otherwise, `false` is returned.\n   */\n  isConsentType(consent: AnonymousConsent | Consent): consent is Consent {\n    if (!consent) {\n      return false;\n    }\n\n    return (consent as Consent).code !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Address, Country, Region } from '../../model/address.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAddressService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves user's addresses\n   */\n  loadAddresses(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserAddresses(userId));\n    });\n  }\n\n  /**\n   * Adds user address\n   * @param address a user address\n   */\n  addUserAddress(address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddUserAddress({\n          userId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Sets user address as default\n   * @param addressId a user address ID\n   */\n  setAddressAsDefault(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address: { defaultAddress: true },\n        })\n      );\n    });\n  }\n\n  /**\n   * Updates existing user address\n   * @param addressId a user address ID\n   * @param address a user address\n   */\n  updateUserAddress(addressId: string, address: Address): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateUserAddress({\n          userId,\n          addressId,\n          address,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes existing user address\n   * @param addressId a user address ID\n   */\n  deleteUserAddress(addressId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserAddress({\n          userId,\n          addressId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns addresses\n   */\n  getAddresses(): Observable<Address[]> {\n    return this.store.pipe(select(UsersSelectors.getAddresses));\n  }\n\n  /**\n   * Returns a loading flag for addresses\n   */\n  getAddressesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoading));\n  }\n\n  getAddressesLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));\n  }\n  /**\n   * Retrieves delivery countries\n   */\n  loadDeliveryCountries(): void {\n    this.store.dispatch(new UserActions.LoadDeliveryCountries());\n  }\n\n  /**\n   * Returns all delivery countries\n   */\n  getDeliveryCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));\n  }\n\n  /**\n   * Returns a country based on the provided `isocode`\n   * @param isocode an isocode for a country\n   */\n  getCountry(isocode: string): Observable<Country> {\n    return this.store.pipe(\n      select(UsersSelectors.countrySelectorFactory(isocode))\n    );\n  }\n\n  /**\n   * Retrieves regions for specified country by `countryIsoCode`\n   * @param countryIsoCode\n   */\n  loadRegions(countryIsoCode: string): void {\n    this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));\n  }\n\n  /**\n   * Clear regions in store - useful when changing country\n   */\n  clearRegions(): void {\n    this.store.dispatch(new UserActions.ClearRegions());\n  }\n\n  /**\n   * Returns all regions\n   */\n  getRegions(countryIsoCode: string): Observable<Region[]> {\n    return this.store.pipe(\n      select(UsersSelectors.getRegionsDataAndLoading),\n      map(({ regions, country, loading, loaded }) => {\n        if (!countryIsoCode && (loading || loaded)) {\n          this.clearRegions();\n          return [];\n        } else if (loading && !loaded) {\n          // don't interrupt loading\n          return [];\n        } else if (!loading && countryIsoCode !== country && countryIsoCode) {\n          // country changed - clear store and load new regions\n          if (country) {\n            this.clearRegions();\n          }\n          this.loadRegions(countryIsoCode);\n          return [];\n        }\n        return regions;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { ConsignmentTracking } from '../../model/consignment-tracking.model';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserOrderService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(UsersSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new UserActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(pageSize: number): Observable<OrderHistoryList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadUserOrders({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new UserActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(UsersSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new UserActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { CustomerCouponSearchResult } from '../../model/customer-coupon.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  CLAIM_CUSTOMER_COUPON_PROCESS_ID,\n  StateWithUser,\n  SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n  UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerCouponService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves customer's coupons\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadCustomerCoupons(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadCustomerCoupons({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns customer coupon search result\n   * @param pageSize page size\n   */\n  getCustomerCoupons(pageSize: number): Observable<CustomerCouponSearchResult> {\n    return combineLatest([\n      this.store.pipe(select(UsersSelectors.getCustomerCouponsState)),\n      this.getClaimCustomerCouponResultLoading(),\n    ]).pipe(\n      filter(([, loading]) => !loading),\n      tap(([customerCouponsState]) => {\n        const attemptedLoad =\n          customerCouponsState.loading ||\n          customerCouponsState.success ||\n          customerCouponsState.error;\n        if (!attemptedLoad) {\n          this.loadCustomerCoupons(pageSize);\n        }\n      }),\n      map(([customerCouponsState]) => customerCouponsState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for customer coupons\n   */\n  getCustomerCouponsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoaded));\n  }\n\n  /**\n   * Returns a loading flag for customer coupons\n   */\n  getCustomerCouponsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getCustomerCouponsLoading));\n  }\n\n  /**\n   * Subscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  subscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process loading flag\n   */\n  getSubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process success flag\n   */\n  getSubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the subscribe customer coupon notification process error flag\n   */\n  getSubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(SUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Unsubscribe a CustomerCoupon Notification\n   * @param couponCode a customer coupon code\n   */\n  unsubscribeCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UnsubscribeCustomerCoupon({\n          userId,\n          couponCode: couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process loading flag\n   */\n  getUnsubscribeCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process success flag\n   */\n  getUnsubscribeCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the unsubscribe customer coupon notification process error flag\n   */\n  getUnsubscribeCustomerCouponResultError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(UNSUBSCRIBE_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Claim a CustomerCoupon\n   * @param couponCode a customer coupon code\n   */\n  claimCustomerCoupon(couponCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.ClaimCustomerCoupon({\n          userId,\n          couponCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the claim customer coupon notification process success flag\n   */\n  getClaimCustomerCouponResultSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the claim customer coupon notification process loading flag\n   */\n  getClaimCustomerCouponResultLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CLAIM_CUSTOMER_COUPON_PROCESS_ID))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { Country } from '../../model/address.model';\nimport { PaymentDetails } from '../../model/cart.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserPaymentService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Loads all user's payment methods.\n   */\n  loadPaymentMethods(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadUserPaymentMethods(userId));\n    });\n  }\n\n  /**\n   * Returns all user's payment methods\n   */\n  getPaymentMethods(): Observable<PaymentDetails[]> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethods));\n  }\n\n  /**\n   * Returns a loading flag for payment methods\n   */\n  getPaymentMethodsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPaymentMethodsLoading));\n  }\n\n  getPaymentMethodsLoadedSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(UsersSelectors.getPaymentMethodsLoadedSuccess)\n    );\n  }\n  /**\n   * Sets the payment as a default one\n   * @param paymentMethodId a payment method ID\n   */\n  setPaymentMethodAsDefault(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.SetDefaultUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Deletes the payment method\n   *\n   * @param paymentMethodId a payment method ID\n   */\n  deletePaymentMethod(paymentMethodId: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.DeleteUserPaymentMethod({\n          userId,\n          paymentMethodId,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns all billing countries\n   */\n  getAllBillingCountries(): Observable<Country[]> {\n    return this.store.pipe(select(UsersSelectors.getAllBillingCountries));\n  }\n\n  /**\n   * Retrieves billing countries\n   */\n  loadBillingCountries(): void {\n    this.store.dispatch(new UserActions.LoadBillingCountries());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '../../model/order.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithUser } from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnRequestService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(pageSize: number): Observable<ReturnRequestList> {\n    return this.store.pipe(\n      select(UsersSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadOrderReturnRequestList({\n          userId,\n          pageSize,\n          currentPage,\n          sort,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new UserActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new UserActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport { NotificationPreference } from '../../model/notification-preference.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport { getProcessLoadingFactory } from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  StateWithUser,\n  UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserNotificationPreferenceService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Returns all notification preferences.\n   */\n  getPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getPreferences));\n  }\n\n  /**\n   * Returns all enabled notification preferences.\n   */\n  getEnabledPreferences(): Observable<NotificationPreference[]> {\n    return this.store.pipe(select(UsersSelectors.getEnabledPreferences));\n  }\n\n  /**\n   * Loads all notification preferences.\n   */\n  loadPreferences(): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(new UserActions.LoadNotificationPreferences(userId));\n    });\n  }\n\n  /**\n   * Clear all notification preferences.\n   */\n  clearPreferences(): void {\n    this.store.dispatch(new UserActions.ClearNotificationPreferences());\n  }\n\n  /**\n   * Returns a loading flag for notification preferences.\n   */\n  getPreferencesLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getPreferencesLoading));\n  }\n\n  /**\n   * Updating notification preferences.\n   * @param preferences a preference list\n   */\n  updatePreferences(preferences: NotificationPreference[]): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.UpdateNotificationPreferences({\n          userId,\n          preferences: preferences,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for updating preferences.\n   */\n  getUpdatePreferencesResultLoading(): Observable<boolean> {\n    return this.store.select(\n      getProcessLoadingFactory(UPDATE_NOTIFICATION_PREFERENCES_PROCESS_ID)\n    );\n  }\n\n  /**\n   * Resets the update notification preferences process state. The state needs to be\n   * reset after the process concludes, regardless if it's a success or an error.\n   */\n  resetNotificationPreferences(): void {\n    this.store.dispatch(new UserActions.ResetNotificationPreferences());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AuthService } from '../../auth/facade/auth.service';\nimport {\n  NotificationType,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n} from '../../model/product-interest.model';\nimport { StateWithProcess } from '../../process/store/process-state';\nimport {\n  getProcessErrorFactory,\n  getProcessLoadingFactory,\n  getProcessSuccessFactory,\n} from '../../process/store/selectors/process.selectors';\nimport { UserActions } from '../store/actions/index';\nimport { UsersSelectors } from '../store/selectors/index';\nimport {\n  ADD_PRODUCT_INTEREST_PROCESS_ID,\n  REMOVE_PRODUCT_INTERESTS_PROCESS_ID,\n  StateWithUser,\n} from '../store/user-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserInterestsService {\n  constructor(\n    protected store: Store<StateWithUser | StateWithProcess<void>>,\n    protected authService: AuthService\n  ) {}\n\n  /**\n   * Retrieves an product interest list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadProductInterests(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string,\n    productCode?: string,\n    notificationType?: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.LoadProductInterests({\n          userId,\n          pageSize: pageSize,\n          currentPage: currentPage,\n          sort: sort,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns product interests\n   */\n  getProductInterests(): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(select(UsersSelectors.getInterests));\n  }\n\n  /**\n   * Returns product interests\n   * @param pageSize the page size\n   */\n  getAndLoadProductInterests(\n    pageSize?: number\n  ): Observable<ProductInterestSearchResult> {\n    return this.store.pipe(\n      select(UsersSelectors.getInterestsState),\n      tap((interestListState) => {\n        const attemptedLoad =\n          interestListState.loading ||\n          interestListState.success ||\n          interestListState.error;\n        if (!attemptedLoad) {\n          this.loadProductInterests(pageSize);\n        }\n      }),\n      map((interestListState) => interestListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for product interests\n   */\n  getProdutInterestsLoading(): Observable<boolean> {\n    return this.store.pipe(select(UsersSelectors.getInterestsLoading));\n  }\n\n  /**\n   * Removes a ProductInterestRelation\n   * @param item product interest relation item\n   * @param singleDelete flag to delete only one interest\n   */\n  removeProdutInterest(\n    item: ProductInterestEntryRelation,\n    singleDelete?: boolean\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.RemoveProductInterest({\n          userId,\n          item: item,\n          singleDelete: singleDelete,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a loading flag for removing product interests.\n   */\n  getRemoveProdutInterestLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessLoadingFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a success flag for removing a product interests.\n   */\n  getRemoveProdutInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(REMOVE_PRODUCT_INTERESTS_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Add a new product interest.\n   *\n   * @param productCode the product code\n   * @param notificationType the notification type\n   */\n  addProductInterest(\n    productCode: string,\n    notificationType: NotificationType\n  ): void {\n    this.authService.invokeWithUserId((userId) => {\n      this.store.dispatch(\n        new UserActions.AddProductInterest({\n          userId,\n          productCode: productCode,\n          notificationType: notificationType,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns a success flag for adding a product interest.\n   */\n  getAddProductInterestSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessSuccessFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns a error flag for adding a product interest.\n   */\n  getAddProductInterestError(): Observable<boolean> {\n    return this.store.pipe(\n      select(getProcessErrorFactory(ADD_PRODUCT_INTEREST_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Reset product interest adding state.\n   */\n  resetAddInterestState(): void {\n    this.store.dispatch(new UserActions.ResetAddInterestState());\n  }\n\n  /**\n   * Reset product interest removing state.\n   */\n  resetRemoveInterestState(): void {\n    this.store.dispatch(new UserActions.ResetRemoveInterestState());\n  }\n\n  /**\n   * Clears product interests\n   */\n  clearProductInterests(): void {\n    this.store.dispatch(new UserActions.ClearProductInterests());\n  }\n}\n","import { UserActions } from '../actions/index';\nimport { BillingCountriesState } from '../user-state';\n\nexport const initialState: BillingCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.BillingCountriesAction | UserActions.ClearUserMiscsData\n): BillingCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_BILLING_COUNTRIES_SUCCESS: {\n      const billingCountries = action.payload;\n      const entities = billingCountries.reduce(\n        (countryEntities: { [isocode: string]: any }, name: any) => {\n          return {\n            ...countryEntities,\n            [name.isocode]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ConsignmentTracking } from '../../../model/index';\nimport { UserActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../user-state';\n\nexport const initialState: ConsignmentTrackingState = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case UserActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case UserActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Country } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { DeliveryCountriesState } from '../user-state';\n\nexport const initialState: DeliveryCountriesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.DeliveryCountriesAction | UserActions.ClearUserMiscsData\n): DeliveryCountriesState {\n  switch (action.type) {\n    case UserActions.LOAD_DELIVERY_COUNTRIES_SUCCESS: {\n      const deliveryCountries = action.payload;\n      const entities = deliveryCountries.reduce(\n        (countryEntities: { [isocode: string]: Country }, country: Country) => {\n          return {\n            ...countryEntities,\n            [country.isocode]: country,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { NotificationPreference } from '../../../model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: NotificationPreference[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.NotificationPreferenceAction\n): NotificationPreference[] {\n  switch (action.type) {\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_NOTIFICATION_PREFERENCES_SUCCESS:\n    case UserActions.UPDATE_NOTIFICATION_PREFERENCES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { Order } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { PaymentDetails } from '../../../model/cart.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: PaymentDetails[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserPaymentMethodsAction\n): PaymentDetails[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_PAYMENT_METHODS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case UserActions.LOAD_USER_PAYMENT_METHODS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Region } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\nimport { RegionsState } from '../user-state';\n\nexport const initialState: RegionsState = {\n  entities: [],\n  country: null,\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.RegionsAction | UserActions.ClearUserMiscsData\n): RegionsState {\n  switch (action.type) {\n    case UserActions.LOAD_REGIONS_SUCCESS: {\n      const entities: Region[] = action.payload.entities;\n      const country: string = action.payload.country;\n      if (entities || country) {\n        return {\n          ...state,\n          entities,\n          country,\n        };\n      }\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { UserActions } from '../actions/index';\n\nexport const initialState = false;\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ResetPasswordAction\n): boolean {\n  switch (action.type) {\n    case UserActions.RESET_PASSWORD_SUCCESS: {\n      return true;\n    }\n  }\n  return state;\n}\n","import { Title } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\nimport { TitlesState } from '../user-state';\n\nexport const initialState: TitlesState = {\n  entities: {},\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.TitlesAction | UserActions.ClearUserMiscsData\n): TitlesState {\n  switch (action.type) {\n    case UserActions.LOAD_TITLES_SUCCESS: {\n      const titles = action.payload;\n      const entities = titles.reduce(\n        (titleEntities: { [code: string]: Title }, name: Title) => {\n          return {\n            ...titleEntities,\n            [name.code]: name,\n          };\n        },\n        {\n          ...state.entities,\n        }\n      );\n\n      return {\n        ...state,\n        entities,\n      };\n    }\n\n    case UserActions.CLEAR_USER_MISCS_DATA: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { Address } from '../../../model/address.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: Address[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserAddressesAction\n): Address[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ADDRESSES_FAIL: {\n      return initialState;\n    }\n\n    case UserActions.LOAD_USER_ADDRESSES_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n  return state;\n}\n","import { ConsentTemplate } from '../../../model/consent.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ConsentTemplate[] = [];\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserConsentsAction\n): ConsentTemplate[] {\n  switch (action.type) {\n    case UserActions.LOAD_USER_CONSENTS_SUCCESS: {\n      const consents = action.payload;\n      return consents ? consents : initialState;\n    }\n\n    case UserActions.GIVE_USER_CONSENT_SUCCESS: {\n      const updatedConsentTemplate = action.consentTemplate;\n      return state.map((consentTemplate) =>\n        consentTemplate.id === updatedConsentTemplate.id\n          ? updatedConsentTemplate\n          : consentTemplate\n      );\n    }\n  }\n\n  return state;\n}\n","import { User } from '../../../model/misc.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: User = <User>{};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserDetailsAction | UserActions.EmailActions\n): User {\n  switch (action.type) {\n    case UserActions.LOAD_USER_DETAILS_SUCCESS: {\n      return action.payload;\n    }\n\n    case UserActions.UPDATE_USER_DETAILS_SUCCESS: {\n      const updatedDetails: User = {\n        ...state,\n        ...action.userUpdates,\n      };\n      return {\n        ...updatedDetails,\n        name: `${updatedDetails.firstName} ${updatedDetails.lastName}`,\n      };\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case UserActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import * as fromActions from '../actions/customer-coupon.action';\nimport {\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n} from '../../../model/customer-coupon.model';\n\nexport const initialState: CustomerCouponSearchResult = {\n  coupons: [],\n  sorts: [],\n  pagination: {},\n};\nexport function reducer(\n  state = initialState,\n  action: fromActions.CustomerCouponAction\n): CustomerCouponSearchResult {\n  switch (action.type) {\n    case fromActions.LOAD_CUSTOMER_COUPONS_SUCCESS: {\n      return action.payload;\n    }\n\n    case fromActions.SUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCustomerCoupon = action.payload.coupon;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCustomerCoupon.couponId\n          ? (customerCoupons[index] = updatedCustomerCoupon)\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n\n    case fromActions.UNSUBSCRIBE_CUSTOMER_COUPON_SUCCESS: {\n      const updatedCouponCode = action.payload;\n      const customerCoupons = new Array<CustomerCoupon>(state.coupons.length);\n      state.coupons.forEach((customerCoupon: CustomerCoupon, index) =>\n        customerCoupon.couponId === updatedCouponCode\n          ? (customerCoupons[index] = {\n              ...customerCoupon,\n              notificationOn: false,\n            })\n          : (customerCoupons[index] = customerCoupon)\n      );\n      return { ...state, coupons: customerCoupons };\n    }\n  }\n  return state;\n}\n","import { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\n\nexport const initialState: ProductInterestSearchResult = {\n  results: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.ProductInterestsAction\n): ProductInterestSearchResult {\n  switch (action.type) {\n    case UserActions.LOAD_PRODUCT_INTERESTS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case UserActions.LOAD_PRODUCT_INTERESTS_FAIL: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '../../../model/order.model';\nimport { UserActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: UserActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case UserActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  combineReducers,\n  MetaReducer,\n} from '@ngrx/store';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { Address } from '../../../model/address.model';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { ConsentTemplate } from '../../../model/consent.model';\nimport { NotificationPreference } from '../../../model/notification-preference.model';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport {\n  OrderHistoryList,\n  ReturnRequestList,\n  ReturnRequest,\n  Order,\n} from '../../../model/order.model';\nimport { loaderReducer } from '../../../state/utils/loader/loader.reducer';\nimport {\n  REGIONS,\n  RegionsState,\n  UserState,\n  USER_ADDRESSES,\n  USER_CONSENTS,\n  USER_ORDERS,\n  USER_PAYMENT_METHODS,\n  CUSTOMER_COUPONS,\n  NOTIFICATION_PREFERENCES,\n  PRODUCT_INTERESTS,\n  USER_RETURN_REQUESTS,\n  USER_ORDER_DETAILS,\n  USER_RETURN_REQUEST_DETAILS,\n} from '../user-state';\nimport * as fromBillingCountriesReducer from './billing-countries.reducer';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromDeliveryCountries from './delivery-countries.reducer';\nimport * as fromNotificationPreferenceReducer from './notification-preference.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromPaymentReducer from './payment-methods.reducer';\nimport * as fromRegionsReducer from './regions.reducer';\nimport * as fromResetPasswordReducer from './reset-password.reducer';\nimport * as fromTitlesReducer from './titles.reducer';\nimport * as fromAddressesReducer from './user-addresses.reducer';\nimport * as fromUserConsentsReducer from './user-consents.reducer';\nimport * as fromUserDetailsReducer from './user-details.reducer';\nimport * as fromUserOrdersReducer from './user-orders.reducer';\nimport * as fromCustomerCouponReducer from './customer-coupon.reducer';\nimport * as fromInterestsReducer from './product-interests.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\n\nexport function getReducers(): ActionReducerMap<UserState> {\n  return {\n    account: combineReducers({\n      details: fromUserDetailsReducer.reducer,\n    }),\n    addresses: loaderReducer<Address[]>(\n      USER_ADDRESSES,\n      fromAddressesReducer.reducer\n    ),\n    billingCountries: fromBillingCountriesReducer.reducer,\n    consents: loaderReducer<ConsentTemplate[]>(\n      USER_CONSENTS,\n      fromUserConsentsReducer.reducer\n    ),\n    payments: loaderReducer<PaymentDetails[]>(\n      USER_PAYMENT_METHODS,\n      fromPaymentReducer.reducer\n    ),\n    orders: loaderReducer<OrderHistoryList>(\n      USER_ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    order: loaderReducer<Order>(\n      USER_ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    orderReturn: loaderReducer<ReturnRequest>(USER_RETURN_REQUEST_DETAILS),\n    orderReturnList: loaderReducer<ReturnRequestList>(\n      USER_RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    countries: fromDeliveryCountries.reducer,\n    titles: fromTitlesReducer.reducer,\n    regions: loaderReducer<RegionsState>(REGIONS, fromRegionsReducer.reducer),\n    resetPassword: fromResetPasswordReducer.reducer,\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    customerCoupons: loaderReducer<CustomerCouponSearchResult>(\n      CUSTOMER_COUPONS,\n      fromCustomerCouponReducer.reducer\n    ),\n    notificationPreferences: loaderReducer<NotificationPreference[]>(\n      NOTIFICATION_PREFERENCES,\n      fromNotificationPreferenceReducer.reducer\n    ),\n    productInterests: loaderReducer<ProductInterestSearchResult>(\n      PRODUCT_INTERESTS,\n      fromInterestsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<\n  UserState\n>> = new InjectionToken<ActionReducerMap<UserState>>('UserReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearUserState(\n  reducer: ActionReducer<any>\n): ActionReducer<any> {\n  return function (state, action) {\n    if (action.type === AuthActions.LOGOUT) {\n      state = undefined;\n    }\n\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearUserState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class BillingCountriesEffect {\n  @Effect()\n  loadBillingCountries$: Observable<\n    UserActions.BillingCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_BILLING_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.BILLING).pipe(\n        map(\n          (countries) => new UserActions.LoadBillingCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadBillingCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ClearMiscsDataEffect {\n  @Effect()\n  clearMiscsData$: Observable<Action> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new UserActions.ClearUserMiscsData();\n    })\n  );\n\n  constructor(private actions$: Actions) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ConsignmentTracking } from '../../../model/consignment-tracking.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<\n    UserActions.ConsignmentTrackingAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_CONSIGNMENT_TRACKING),\n    map((action: UserActions.LoadConsignmentTracking) => action.payload),\n    switchMap((payload) => {\n      return this.userOrderConnector\n        .getConsignmentTracking(\n          payload.orderCode,\n          payload.consignmentCode,\n          payload.userId\n        )\n        .pipe(\n          map(\n            (tracking: ConsignmentTracking) =>\n              new UserActions.LoadConsignmentTrackingSuccess(tracking)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadConsignmentTrackingFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userOrderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { CountryType } from '../../../model/address.model';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class DeliveryCountriesEffects {\n  @Effect()\n  loadDeliveryCountries$: Observable<\n    UserActions.DeliveryCountriesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_DELIVERY_COUNTRIES),\n    switchMap(() => {\n      return this.siteConnector.getCountries(CountryType.SHIPPING).pipe(\n        map(\n          (countries) => new UserActions.LoadDeliveryCountriesSuccess(countries)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadDeliveryCountriesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ForgotPasswordEffects {\n  @Effect()\n  requestForgotPasswordEmail$: Observable<\n    | UserActions.ForgotPasswordEmailRequestSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ForgotPasswordEmailRequestFail\n  > = this.actions$.pipe(\n    ofType(UserActions.FORGOT_PASSWORD_EMAIL_REQUEST),\n    map((action: UserActions.ForgotPasswordEmailRequest) => {\n      return action.payload;\n    }),\n    concatMap((userEmailAddress) => {\n      return this.userAccountConnector\n        .requestForgotPasswordEmail(userEmailAddress)\n        .pipe(\n          switchMap(() => [\n            new UserActions.ForgotPasswordEmailRequestSuccess(),\n            new GlobalMessageActions.AddMessage({\n              text: { key: 'forgottenPassword.passwordResetEmailSent' },\n              type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n            }),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.ForgotPasswordEmailRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserNotificationPreferenceConnector } from '../../connectors/notification-preference/user-notification-preference.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class NotificationPreferenceEffects {\n  @Effect()\n  loadPreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.LoadNotificationPreferences) => action.payload),\n    switchMap((payload) =>\n      this.connector.loadAll(payload).pipe(\n        map(\n          (preferences) =>\n            new UserActions.LoadNotificationPreferencesSuccess(preferences)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.LoadNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  updatePreferences$: Observable<\n    UserActions.NotificationPreferenceAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_NOTIFICATION_PREFERENCES),\n    map((action: UserActions.UpdateNotificationPreferences) => action.payload),\n    mergeMap((payload) =>\n      this.connector.update(payload.userId, payload.preferences).pipe(\n        map(\n          () =>\n            new UserActions.UpdateNotificationPreferencesSuccess(\n              payload.preferences\n            )\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateNotificationPreferencesFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private connector: UserNotificationPreferenceConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Order } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<\n    UserActions.OrderDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_DETAILS),\n    map((action: UserActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new UserActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadOrderDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<UserActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER),\n    map((action: UserActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new UserActions.CancelOrderSuccess()),\n          catchError((error) => {\n            error.error?.errors.forEach((err) =>\n              this.globalMessageService.add(\n                err.message,\n                GlobalMessageType.MSG_TYPE_ERROR\n              )\n            );\n\n            return of(\n              new UserActions.CancelOrderFail(makeErrorSerializable(error))\n            );\n          })\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReturnRequest, ReturnRequestList } from '../../../model/order.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.CreateOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: UserActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new UserActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: UserActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new UserActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new UserActions.CancelOrderReturnRequestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<\n    UserActions.OrderReturnRequestAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: UserActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new UserActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new UserActions.LoadOrderReturnRequestListFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { PaymentDetails } from '../../../model/cart.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserPaymentConnector } from '../../connectors/payment/user-payment.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserPaymentMethodsEffects {\n  @Effect()\n  loadUserPaymentMethods$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_PAYMENT_METHODS),\n    map((action: UserActions.LoadUserPaymentMethods) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector.getAll(payload).pipe(\n        map((payments: PaymentDetails[]) => {\n          return new UserActions.LoadUserPaymentMethodsSuccess(payments);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserPaymentMethodsFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  setDefaultUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.SET_DEFAULT_USER_PAYMENT_METHOD),\n    map((action: UserActions.SetDefaultUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .setDefault(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.SetDefaultUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.SetDefaultUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n  @Effect()\n  deleteUserPaymentMethod$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_PAYMENT_METHOD),\n    map((action: UserActions.DeleteUserPaymentMethod) => action.payload),\n    mergeMap((payload) => {\n      return this.userPaymentMethodConnector\n        .delete(payload.userId, payload.paymentMethodId)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.DeleteUserPaymentMethodSuccess(data),\n            new UserActions.LoadUserPaymentMethods(payload.userId),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserPaymentMethodFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userPaymentMethodConnector: UserPaymentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { SiteConnector } from '../../../site-context/connectors/site.connector';\nimport { StateUtils } from '../../../state/utils/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserActions } from '../actions/index';\nimport { REGIONS } from '../user-state';\n\n@Injectable()\nexport class RegionsEffects {\n  @Effect()\n  loadRegions$: Observable<UserActions.RegionsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_REGIONS),\n    map((action: UserActions.LoadRegions) => {\n      return action.payload;\n    }),\n    switchMap((countryCode: string) => {\n      return this.siteConnector.getRegions(countryCode).pipe(\n        map(\n          (regions) =>\n            new UserActions.LoadRegionsSuccess({\n              entities: regions,\n              country: countryCode,\n            })\n        ),\n        catchError((error) =>\n          of(new UserActions.LoadRegionsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetRegions$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.CLEAR_USER_MISCS_DATA, UserActions.CLEAR_REGIONS),\n    map(() => {\n      return new StateUtils.LoaderResetAction(REGIONS);\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private siteConnector: SiteConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { from, Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class ResetPasswordEffects {\n  @Effect()\n  resetPassword$: Observable<\n    | UserActions.ResetPasswordSuccess\n    | GlobalMessageActions.AddMessage\n    | UserActions.ResetPasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.RESET_PASSWORD),\n    map((action: UserActions.ResetPassword) => action.payload),\n    switchMap(({ token, password }) => {\n      return this.userAccountConnector.resetPassword(token, password).pipe(\n        switchMap(() => [\n          new UserActions.ResetPasswordSuccess(),\n          new GlobalMessageActions.AddMessage({\n            text: { key: 'forgottenPassword.passwordResetSuccess' },\n            type: GlobalMessageType.MSG_TYPE_CONFIRMATION,\n          }),\n        ]),\n        catchError((error) => {\n          const actions: Array<\n            UserActions.ResetPasswordFail | GlobalMessageActions.AddMessage\n          > = [new UserActions.ResetPasswordFail(makeErrorSerializable(error))];\n          if (error?.error?.errors) {\n            error.error.errors.forEach((err) => {\n              if (err.message) {\n                actions.push(\n                  new GlobalMessageActions.AddMessage({\n                    text: { raw: err.message },\n                    type: GlobalMessageType.MSG_TYPE_ERROR,\n                  })\n                );\n              }\n            });\n          }\n          return from(actions);\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class TitlesEffects {\n  @Effect()\n  loadTitles$: Observable<UserActions.TitlesAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_TITLES),\n    switchMap(() => {\n      return this.userAccountConnector.getTitles().pipe(\n        map((titles) => {\n          return new UserActions.LoadTitlesSuccess(titles);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadTitlesFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdateEmailEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updateEmail$: Observable<\n    UserActions.UpdateEmailSuccessAction | UserActions.UpdateEmailErrorAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_EMAIL),\n    map((action: UserActions.UpdateEmailAction) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updateEmail(payload.uid, payload.password, payload.newUid)\n        .pipe(\n          map(() => new UserActions.UpdateEmailSuccessAction(payload.newUid)),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateEmailErrorAction(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UpdatePasswordEffects {\n  constructor(\n    private actions$: Actions,\n    private userAccountConnector: UserConnector\n  ) {}\n\n  @Effect()\n  updatePassword$: Observable<\n    UserActions.UpdatePasswordSuccess | UserActions.UpdatePasswordFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_PASSWORD),\n    map((action: UserActions.UpdatePassword) => action.payload),\n    concatMap((payload) =>\n      this.userAccountConnector\n        .updatePassword(\n          payload.userId,\n          payload.oldPassword,\n          payload.newPassword\n        )\n        .pipe(\n          map(() => new UserActions.UpdatePasswordSuccess()),\n          catchError((error) =>\n            of(new UserActions.UpdatePasswordFail(makeErrorSerializable(error)))\n          )\n        )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n} from '../../../global-message/index';\nimport { Address } from '../../../model/address.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserAddressConnector } from '../../connectors/address/user-address.connector';\nimport { UserAddressService } from '../../facade/user-address.service';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserAddressesEffects {\n  @Effect()\n  loadUserAddresses$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ADDRESSES),\n    map((action: UserActions.LoadUserAddresses) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector.getAll(payload).pipe(\n        map((addresses: Address[]) => {\n          return new UserActions.LoadUserAddressesSuccess(addresses);\n        }),\n        catchError((error) =>\n          of(\n            new UserActions.LoadUserAddressesFail(makeErrorSerializable(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  addUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS),\n    map((action: UserActions.AddUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .add(payload.userId, payload.address)\n        .pipe(\n          map((data: any) => {\n            return new UserActions.AddUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(new UserActions.AddUserAddressFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  updateUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS),\n    map((action: UserActions.UpdateUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .update(payload.userId, payload.addressId, payload.address)\n        .pipe(\n          map((data) => {\n            // don't show the message if just setting address as default\n            if (\n              payload.address &&\n              Object.keys(payload.address).length === 1 &&\n              payload.address.defaultAddress\n            ) {\n              return new UserActions.LoadUserAddresses(payload.userId);\n            } else {\n              return new UserActions.UpdateUserAddressSuccess(data);\n            }\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.UpdateUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  deleteUserAddress$: Observable<\n    UserActions.UserAddressesAction\n  > = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS),\n    map((action: UserActions.DeleteUserAddress) => action.payload),\n    mergeMap((payload) => {\n      return this.userAddressConnector\n        .delete(payload.userId, payload.addressId)\n        .pipe(\n          map((data) => {\n            return new UserActions.DeleteUserAddressSuccess(data);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.DeleteUserAddressFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about add success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnAddSuccess$ = this.actions$.pipe(\n    ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressAddSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about update success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnUpdateSuccess$ = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressUpdateSuccess');\n    })\n  );\n\n  /**\n   *  Reload addresses and notify about delete success\n   */\n  @Effect({ dispatch: false })\n  showGlobalMessageOnDeleteSuccess$ = this.actions$.pipe(\n    ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n    tap(() => {\n      this.loadAddresses();\n      this.showGlobalMessage('addressForm.userAddressDeleteSuccess');\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userAddressConnector: UserAddressConnector,\n    private userAddressService: UserAddressService,\n    private messageService: GlobalMessageService\n  ) {}\n\n  /**\n   * Show global confirmation message with provided text\n   */\n  private showGlobalMessage(text: string) {\n    this.messageService.add(\n      { key: text },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  private loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map } from 'rxjs/operators';\nimport { GlobalMessageType } from '../../../global-message/models/global-message.model';\nimport { GlobalMessageActions } from '../../../global-message/store/actions';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConsentConnector } from '../../connectors/consent/user-consent.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserConsentsEffect {\n  @Effect()\n  resetConsents$: Observable<\n    UserActions.ResetLoadUserConsents\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => new UserActions.ResetLoadUserConsents())\n  );\n\n  @Effect()\n  getConsents$: Observable<UserActions.UserConsentsAction> = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_CONSENTS),\n    map((action: UserActions.LoadUserConsents) => action.payload),\n    concatMap((userId) =>\n      this.userConsentConnector.loadConsents(userId).pipe(\n        map((consents) => new UserActions.LoadUserConsentsSuccess(consents)),\n        catchError((error) =>\n          of(new UserActions.LoadUserConsentsFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  giveConsent$: Observable<\n    UserActions.UserConsentsAction | GlobalMessageActions.RemoveMessagesByType\n  > = this.actions$.pipe(\n    ofType<UserActions.GiveUserConsent | UserActions.TransferAnonymousConsent>(\n      UserActions.GIVE_USER_CONSENT,\n      UserActions.TRANSFER_ANONYMOUS_CONSENT\n    ),\n    concatMap((action) =>\n      this.userConsentConnector\n        .giveConsent(\n          action.payload.userId,\n          action.payload.consentTemplateId,\n          action.payload.consentTemplateVersion\n        )\n        .pipe(\n          map((consent) => new UserActions.GiveUserConsentSuccess(consent)),\n          catchError((error) => {\n            const errors: Array<\n              | UserActions.UserConsentsAction\n              | GlobalMessageActions.RemoveMessagesByType\n            > = [\n              new UserActions.GiveUserConsentFail(makeErrorSerializable(error)),\n            ];\n            if (\n              action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&\n              error.status === 409\n            ) {\n              errors.push(\n                new GlobalMessageActions.RemoveMessagesByType(\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n            }\n            return of(...errors);\n          })\n        )\n    )\n  );\n\n  @Effect()\n  withdrawConsent$: Observable<\n    UserActions.UserConsentsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.WITHDRAW_USER_CONSENT),\n    map((action: UserActions.WithdrawUserConsent) => action.payload),\n    concatMap(({ userId, consentCode }) =>\n      this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(\n        map(() => new UserActions.WithdrawUserConsentSuccess()),\n        catchError((error) =>\n          of(\n            new UserActions.WithdrawUserConsentFail(\n              makeErrorSerializable(error)\n            )\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConsentConnector: UserConsentConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap } from 'rxjs/operators';\nimport { User } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserDetailsEffects {\n  @Effect()\n  loadUserDetails$: Observable<\n    UserActions.UserDetailsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_DETAILS),\n    map((action: UserActions.LoadUserDetails) => action.payload),\n    mergeMap((userId) => {\n      return this.userConnector.get(userId).pipe(\n        map((user: User) => {\n          return new UserActions.LoadUserDetailsSuccess(user);\n        }),\n        catchError((error) =>\n          of(new UserActions.LoadUserDetailsFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateUserDetails$: Observable<\n    UserActions.UpdateUserDetailsSuccess | UserActions.UpdateUserDetailsFail\n  > = this.actions$.pipe(\n    ofType(UserActions.UPDATE_USER_DETAILS),\n    map((action: UserActions.UpdateUserDetails) => action.payload),\n    concatMap((payload) =>\n      this.userConnector.update(payload.username, payload.userDetails).pipe(\n        map(\n          () => new UserActions.UpdateUserDetailsSuccess(payload.userDetails)\n        ),\n        catchError((error) =>\n          of(\n            new UserActions.UpdateUserDetailsFail(makeErrorSerializable(error))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderHistoryList } from '../../../model/order.model';\nimport { SiteContextActions } from '../../../site-context/store/actions/index';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserOrderConnector } from '../../connectors/order/user-order.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserOrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: UserOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<\n    UserActions.UserOrdersAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_USER_ORDERS),\n    map((action: UserActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getHistory(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((orders: OrderHistoryList) => {\n            return new UserActions.LoadUserOrdersSuccess(orders);\n          }),\n          catchError((error) =>\n            of(new UserActions.LoadUserOrdersFail(makeErrorSerializable(error)))\n          )\n        );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<\n    UserActions.ClearUserOrders\n  > = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new UserActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AuthActions } from '../../../auth/store/actions/index';\nimport { UserSignUp } from '../../../model/misc.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\nimport { UserConnector } from '../../connectors/user/user.connector';\nimport { UserActions } from '../actions/index';\n\n@Injectable()\nexport class UserRegisterEffects {\n  @Effect()\n  registerUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_USER),\n    map((action: UserActions.RegisterUser) => action.payload),\n    mergeMap((user: UserSignUp) =>\n      this.userConnector.register(user).pipe(\n        map(() => new UserActions.RegisterUserSuccess()),\n        catchError((error) =>\n          of(new UserActions.RegisterUserFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  registerGuest$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.LoadUserToken\n  > = this.actions$.pipe(\n    ofType(UserActions.REGISTER_GUEST),\n    map((action: UserActions.RegisterGuest) => action.payload),\n    mergeMap(({ guid, password }) =>\n      this.userConnector.registerGuest(guid, password).pipe(\n        switchMap((user) => [\n          new AuthActions.LoadUserToken({\n            userId: user.uid,\n            password: password,\n          }),\n          new UserActions.RegisterGuestSuccess(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RegisterGuestFail(makeErrorSerializable(error)))\n        )\n      )\n    )\n  );\n\n  @Effect()\n  removeUser$: Observable<\n    UserActions.UserRegisterOrRemoveAction | AuthActions.Logout\n  > = this.actions$.pipe(\n    ofType(UserActions.REMOVE_USER),\n    map((action: UserActions.RemoveUser) => action.payload),\n    mergeMap((userId: string) => {\n      return this.userConnector.remove(userId).pipe(\n        switchMap(() => [\n          new UserActions.RemoveUserSuccess(),\n          new AuthActions.Logout(),\n        ]),\n        catchError((error) =>\n          of(new UserActions.RemoveUserFail(makeErrorSerializable(error)))\n        )\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userConnector: UserConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as fromCustomerCouponsAction from '../actions/customer-coupon.action';\nimport { CustomerCouponConnector } from '../../connectors/customer-coupon/customer-coupon.connector';\nimport { CustomerCouponSearchResult } from '../../../model/customer-coupon.model';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class CustomerCouponEffects {\n  @Effect()\n  loadCustomerCoupons$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.LOAD_CUSTOMER_COUPONS),\n    map(\n      (action: fromCustomerCouponsAction.LoadCustomerCoupons) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .getCustomerCoupons(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map((coupons: CustomerCouponSearchResult) => {\n            return new fromCustomerCouponsAction.LoadCustomerCouponsSuccess(\n              coupons\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.LoadCustomerCouponsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  subscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.SUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.SubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOnNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map((data: any) => {\n            return new fromCustomerCouponsAction.SubscribeCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.SubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  unsubscribeCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.UNSUBSCRIBE_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.UnsubscribeCustomerCoupon) =>\n        action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .turnOffNotification(payload.userId, payload.couponCode)\n        .pipe(\n          map(() => {\n            return new fromCustomerCouponsAction.UnsubscribeCustomerCouponSuccess(\n              payload.couponCode\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.UnsubscribeCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  claimCustomerCoupon$: Observable<\n    fromCustomerCouponsAction.CustomerCouponAction\n  > = this.actions$.pipe(\n    ofType(fromCustomerCouponsAction.CLAIM_CUSTOMER_COUPON),\n    map(\n      (action: fromCustomerCouponsAction.ClaimCustomerCoupon) => action.payload\n    ),\n    mergeMap((payload) => {\n      return this.customerCouponConnector\n        .claimCustomerCoupon(payload.userId, payload.couponCode)\n        .pipe(\n          map((data) => {\n            return new fromCustomerCouponsAction.ClaimCustomerCouponSuccess(\n              data\n            );\n          }),\n          catchError((error) =>\n            of(\n              new fromCustomerCouponsAction.ClaimCustomerCouponFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private customerCouponConnector: CustomerCouponConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { UserActions } from '../actions/index';\nimport { ProductInterestSearchResult } from '../../../model/product-interest.model';\nimport { UserInterestsConnector } from '../../connectors/interests/user-interests.connector';\nimport { makeErrorSerializable } from '../../../util/serialization-utils';\n\n@Injectable()\nexport class ProductInterestsEffect {\n  constructor(\n    private actions$: Actions,\n    private userInterestsConnector: UserInterestsConnector\n  ) {}\n\n  @Effect()\n  loadProductInteres$: Observable<\n    UserActions.ProductInterestsAction\n  > = this.actions$.pipe(\n    ofType(UserActions.LOAD_PRODUCT_INTERESTS),\n    map((action: UserActions.LoadProductInterests) => action.payload),\n    switchMap((payload) => {\n      return this.userInterestsConnector\n        .getInterests(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          map((interests: ProductInterestSearchResult) => {\n            return new UserActions.LoadProductInterestsSuccess(interests);\n          }),\n          catchError((error) =>\n            of(\n              new UserActions.LoadProductInterestsFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  removeProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.REMOVE_PRODUCT_INTEREST),\n    map((action: UserActions.RemoveProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .removeInterest(payload.userId, payload.item)\n        .pipe(\n          switchMap((data) => [\n            new UserActions.LoadProductInterests(\n              payload.singleDelete\n                ? {\n                    userId: payload.userId,\n                    productCode: payload.item.product.code,\n                    notificationType:\n                      payload.item.productInterestEntry[0].interestType,\n                  }\n                : { userId: payload.userId }\n            ),\n            new UserActions.RemoveProductInterestSuccess(data),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.RemoveProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n\n  @Effect()\n  addProductInterest$: Observable<Action> = this.actions$.pipe(\n    ofType(UserActions.ADD_PRODUCT_INTEREST),\n    map((action: UserActions.AddProductInterest) => action.payload),\n    switchMap((payload) =>\n      this.userInterestsConnector\n        .addInterest(\n          payload.userId,\n          payload.productCode,\n          payload.notificationType\n        )\n        .pipe(\n          switchMap((res: any) => [\n            new UserActions.LoadProductInterests({\n              userId: payload.userId,\n              productCode: payload.productCode,\n              notificationType: payload.notificationType,\n            }),\n            new UserActions.AddProductInterestSuccess(res),\n          ]),\n          catchError((error) =>\n            of(\n              new UserActions.AddProductInterestFail(\n                makeErrorSerializable(error)\n              )\n            )\n          )\n        )\n    )\n  );\n}\n","import { BillingCountriesEffect } from './billing-countries.effect';\nimport { ClearMiscsDataEffect } from './clear-miscs-data.effect';\nimport { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { DeliveryCountriesEffects } from './delivery-countries.effect';\nimport { ForgotPasswordEffects } from './forgot-password.effect';\nimport { NotificationPreferenceEffects } from './notification-preference.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { UserPaymentMethodsEffects } from './payment-methods.effect';\nimport { RegionsEffects } from './regions.effect';\nimport { ResetPasswordEffects } from './reset-password.effect';\nimport { TitlesEffects } from './titles.effect';\nimport { UpdateEmailEffects } from './update-email.effect';\nimport { UpdatePasswordEffects } from './update-password.effect';\nimport { UserAddressesEffects } from './user-addresses.effect';\nimport { UserConsentsEffect } from './user-consents.effect';\nimport { UserDetailsEffects } from './user-details.effect';\nimport { UserOrdersEffect } from './user-orders.effect';\nimport { UserRegisterEffects } from './user-register.effect';\nimport { CustomerCouponEffects } from './customer-coupon.effect';\nimport { ProductInterestsEffect } from './product-interests.effect';\n\nexport const effects: any[] = [\n  ClearMiscsDataEffect,\n  DeliveryCountriesEffects,\n  RegionsEffects,\n  TitlesEffects,\n  UserDetailsEffects,\n  UserAddressesEffects,\n  UserPaymentMethodsEffects,\n  UserRegisterEffects,\n  UserOrdersEffect,\n  OrderDetailsEffect,\n  BillingCountriesEffect,\n  ResetPasswordEffects,\n  ForgotPasswordEffects,\n  UpdateEmailEffects,\n  UpdatePasswordEffects,\n  UserConsentsEffect,\n  ConsignmentTrackingEffects,\n  CustomerCouponEffects,\n  NotificationPreferenceEffects,\n  ProductInterestsEffect,\n  OrderReturnRequestEffect,\n];\n\nexport * from './billing-countries.effect';\nexport * from './clear-miscs-data.effect';\nexport * from './consignment-tracking.effect';\nexport * from './delivery-countries.effect';\nexport * from './notification-preference.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './payment-methods.effect';\nexport * from './regions.effect';\nexport * from './reset-password.effect';\nexport * from './titles.effect';\nexport * from './user-addresses.effect';\nexport * from './user-consents.effect';\nexport * from './user-details.effect';\nexport * from './user-orders.effect';\nexport * from './user-register.effect';\nexport * from './customer-coupon.effect';\nexport * from './product-interests.effect';\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { RouterModule } from '@angular/router';\n\nimport { metaReducers, reducerToken, reducerProvider } from './reducers/index';\nimport { effects } from './effects/index';\nimport { USER_FEATURE } from './user-state';\nimport { StateModule } from '../../state/state.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(USER_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n    RouterModule,\n  ],\n  providers: [reducerProvider],\n})\nexport class UserStoreModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserStoreModule } from './store/user-store.module';\n\n@NgModule({\n  imports: [UserStoreModule],\n})\nexport class UserModule {\n  static forRoot(): ModuleWithProviders<UserModule> {\n    return {\n      ngModule: UserModule,\n    };\n  }\n}\n","export const testestsd = 'sare';\n"]}