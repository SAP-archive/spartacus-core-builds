import { __extends } from "tslib";
import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateUtils } from '../../../state/utils/index';
import { REGISTER_USER_PROCESS_ID, REMOVE_USER_PROCESS_ID, } from '../user-state';
export var REGISTER_USER = '[User] Register User';
export var REGISTER_USER_FAIL = '[User] Register User Fail';
export var REGISTER_USER_SUCCESS = '[User] Register User Success';
export var RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';
export var REGISTER_GUEST = '[User] Register Guest';
export var REGISTER_GUEST_FAIL = '[User] Register Guest Fail';
export var REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';
export var REMOVE_USER = '[User] Remove User';
export var REMOVE_USER_FAIL = '[User] Remove User Fail';
export var REMOVE_USER_SUCCESS = '[User] Remove User Success';
export var REMOVE_USER_RESET = '[User] Reset Remove User Process State';
var RegisterUser = /** @class */ (function (_super) {
    __extends(RegisterUser, _super);
    function RegisterUser(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID) || this;
        _this.payload = payload;
        _this.type = REGISTER_USER;
        return _this;
    }
    return RegisterUser;
}(StateUtils.EntityLoadAction));
export { RegisterUser };
var RegisterUserFail = /** @class */ (function (_super) {
    __extends(RegisterUserFail, _super);
    function RegisterUserFail(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload) || this;
        _this.payload = payload;
        _this.type = REGISTER_USER_FAIL;
        return _this;
    }
    return RegisterUserFail;
}(StateUtils.EntityFailAction));
export { RegisterUserFail };
var RegisterUserSuccess = /** @class */ (function (_super) {
    __extends(RegisterUserSuccess, _super);
    function RegisterUserSuccess() {
        var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID) || this;
        _this.type = REGISTER_USER_SUCCESS;
        return _this;
    }
    return RegisterUserSuccess;
}(StateUtils.EntitySuccessAction));
export { RegisterUserSuccess };
var ResetRegisterUserProcess = /** @class */ (function (_super) {
    __extends(ResetRegisterUserProcess, _super);
    function ResetRegisterUserProcess() {
        var _this = _super.call(this, PROCESS_FEATURE, REGISTER_USER_PROCESS_ID) || this;
        _this.type = RESET_REGISTER_USER_PROCESS;
        return _this;
    }
    return ResetRegisterUserProcess;
}(StateUtils.EntityLoaderResetAction));
export { ResetRegisterUserProcess };
var RegisterGuest = /** @class */ (function () {
    function RegisterGuest(payload) {
        this.payload = payload;
        this.type = REGISTER_GUEST;
    }
    return RegisterGuest;
}());
export { RegisterGuest };
var RegisterGuestFail = /** @class */ (function () {
    function RegisterGuestFail(payload) {
        this.payload = payload;
        this.type = REGISTER_GUEST_FAIL;
    }
    return RegisterGuestFail;
}());
export { RegisterGuestFail };
var RegisterGuestSuccess = /** @class */ (function () {
    function RegisterGuestSuccess() {
        this.type = REGISTER_GUEST_SUCCESS;
    }
    return RegisterGuestSuccess;
}());
export { RegisterGuestSuccess };
var RemoveUser = /** @class */ (function (_super) {
    __extends(RemoveUser, _super);
    function RemoveUser(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID) || this;
        _this.payload = payload;
        _this.type = REMOVE_USER;
        return _this;
    }
    return RemoveUser;
}(StateUtils.EntityLoadAction));
export { RemoveUser };
var RemoveUserFail = /** @class */ (function (_super) {
    __extends(RemoveUserFail, _super);
    function RemoveUserFail(payload) {
        var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload) || this;
        _this.payload = payload;
        _this.type = REMOVE_USER_FAIL;
        return _this;
    }
    return RemoveUserFail;
}(StateUtils.EntityFailAction));
export { RemoveUserFail };
var RemoveUserSuccess = /** @class */ (function (_super) {
    __extends(RemoveUserSuccess, _super);
    function RemoveUserSuccess() {
        var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID) || this;
        _this.type = REMOVE_USER_SUCCESS;
        return _this;
    }
    return RemoveUserSuccess;
}(StateUtils.EntitySuccessAction));
export { RemoveUserSuccess };
var RemoveUserReset = /** @class */ (function (_super) {
    __extends(RemoveUserReset, _super);
    function RemoveUserReset() {
        var _this = _super.call(this, PROCESS_FEATURE, REMOVE_USER_PROCESS_ID) || this;
        _this.type = REMOVE_USER_RESET;
        return _this;
    }
    return RemoveUserReset;
}(StateUtils.EntityLoaderResetAction));
export { RemoveUserReset };
//# sourceMappingURL=data:application/json;base64,