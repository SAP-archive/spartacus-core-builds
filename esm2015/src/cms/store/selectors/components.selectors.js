import { createSelector } from '@ngrx/store';
import { initialLoaderState, StateEntitySelectors, StateLoaderSelectors, } from '../../../state/utils/index';
import { getCmsState } from './feature.selectors';
const ɵ0 = state => state.components;
export const getComponentsState = createSelector(getCmsState, ɵ0);
export const componentsContextSelectorFactory = (uid) => {
    return createSelector(getComponentsState, componentsState => StateEntitySelectors.entitySelector(componentsState, uid));
};
export const componentsLoaderStateSelectorFactory = (uid, context) => {
    return createSelector(componentsContextSelectorFactory(uid), componentsContext => (componentsContext &&
        componentsContext.pageContext &&
        componentsContext.pageContext[context]) ||
        initialLoaderState);
};
export const componentsContextExistsSelectorFactory = (uid, context) => {
    return createSelector(componentsLoaderStateSelectorFactory(uid, context), loaderState => StateLoaderSelectors.loaderValueSelector(loaderState) || false);
};
export const componentsDataSelectorFactory = (uid) => {
    return createSelector(componentsContextSelectorFactory(uid), state => state ? state.component : undefined);
};
export const componentsSelectorFactory = (uid, context) => {
    return createSelector(componentsDataSelectorFactory(uid), componentsContextExistsSelectorFactory(uid, context), (componentState, exists) => {
        if (componentState && exists) {
            return componentState;
        }
        else {
            return undefined;
        }
    });
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3N0b3JlL3NlbGVjdG9ycy9jb21wb25lbnRzLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQ0wsa0JBQWtCLEVBRWxCLG9CQUFvQixFQUNwQixvQkFBb0IsR0FDckIsTUFBTSw0QkFBNEIsQ0FBQztBQUVwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7V0FLbEIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVTtBQUh6RCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FHM0IsY0FBYyxDQUFDLFdBQVcsS0FBNEIsQ0FBQztBQUUzRCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxDQUM5QyxHQUFXLEVBQ3dDLEVBQUU7SUFDckQsT0FBTyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FDMUQsb0JBQW9CLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FDMUQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9DQUFvQyxHQUFHLENBQ2xELEdBQVcsRUFDWCxPQUFlLEVBQ3VDLEVBQUU7SUFDeEQsT0FBTyxjQUFjLENBQ25CLGdDQUFnQyxDQUFDLEdBQUcsQ0FBQyxFQUNyQyxpQkFBaUIsQ0FBQyxFQUFFLENBQ2xCLENBQUMsaUJBQWlCO1FBQ2hCLGlCQUFpQixDQUFDLFdBQVc7UUFDN0IsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLGtCQUFrQixDQUNyQixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0NBQXNDLEdBQUcsQ0FDcEQsR0FBVyxFQUNYLE9BQWUsRUFDMEIsRUFBRTtJQUMzQyxPQUFPLGNBQWMsQ0FDbkIsb0NBQW9DLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUNsRCxXQUFXLENBQUMsRUFBRSxDQUNaLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssQ0FDakUsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLENBQzNDLEdBQVcsRUFDbUMsRUFBRTtJQUNoRCxPQUFPLGNBQWMsQ0FBQyxnQ0FBZ0MsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUNuRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDcEMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQ3ZDLEdBQVcsRUFDWCxPQUFlLEVBQytCLEVBQUU7SUFDaEQsT0FBTyxjQUFjLENBQ25CLDZCQUE2QixDQUFDLEdBQUcsQ0FBQyxFQUNsQyxzQ0FBc0MsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEVBQ3BELENBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3pCLElBQUksY0FBYyxJQUFJLE1BQU0sRUFBRTtZQUM1QixPQUFPLGNBQWMsQ0FBQztTQUN2QjthQUFNO1lBQ0wsT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBNZW1vaXplZFNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQ21zQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY21zLm1vZGVsJztcbmltcG9ydCB7XG4gIGluaXRpYWxMb2FkZXJTdGF0ZSxcbiAgTG9hZGVyU3RhdGUsXG4gIFN0YXRlRW50aXR5U2VsZWN0b3JzLFxuICBTdGF0ZUxvYWRlclNlbGVjdG9ycyxcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgQ29tcG9uZW50c0NvbnRleHQsIENvbXBvbmVudHNTdGF0ZSwgU3RhdGVXaXRoQ21zIH0gZnJvbSAnLi4vY21zLXN0YXRlJztcbmltcG9ydCB7IGdldENtc1N0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9ycyc7XG5cbmV4cG9ydCBjb25zdCBnZXRDb21wb25lbnRzU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aENtcyxcbiAgQ29tcG9uZW50c1N0YXRlXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0Q21zU3RhdGUsIHN0YXRlID0+IHN0YXRlLmNvbXBvbmVudHMpO1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0NvbnRleHRTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgQ29tcG9uZW50c0NvbnRleHQ+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGdldENvbXBvbmVudHNTdGF0ZSwgY29tcG9uZW50c1N0YXRlID0+XG4gICAgU3RhdGVFbnRpdHlTZWxlY3RvcnMuZW50aXR5U2VsZWN0b3IoY29tcG9uZW50c1N0YXRlLCB1aWQpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0xvYWRlclN0YXRlU2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZyxcbiAgY29udGV4dDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgTG9hZGVyU3RhdGU8Ym9vbGVhbj4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGNvbXBvbmVudHNDb250ZXh0U2VsZWN0b3JGYWN0b3J5KHVpZCksXG4gICAgY29tcG9uZW50c0NvbnRleHQgPT5cbiAgICAgIChjb21wb25lbnRzQ29udGV4dCAmJlxuICAgICAgICBjb21wb25lbnRzQ29udGV4dC5wYWdlQ29udGV4dCAmJlxuICAgICAgICBjb21wb25lbnRzQ29udGV4dC5wYWdlQ29udGV4dFtjb250ZXh0XSkgfHxcbiAgICAgIGluaXRpYWxMb2FkZXJTdGF0ZVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNDb250ZXh0RXhpc3RzU2VsZWN0b3JGYWN0b3J5ID0gKFxuICB1aWQ6IHN0cmluZyxcbiAgY29udGV4dDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgYm9vbGVhbj4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgY29tcG9uZW50c0xvYWRlclN0YXRlU2VsZWN0b3JGYWN0b3J5KHVpZCwgY29udGV4dCksXG4gICAgbG9hZGVyU3RhdGUgPT5cbiAgICAgIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclZhbHVlU2VsZWN0b3IobG9hZGVyU3RhdGUpIHx8IGZhbHNlXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c0RhdGFTZWxlY3RvckZhY3RvcnkgPSAoXG4gIHVpZDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aENtcywgQ21zQ29tcG9uZW50PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3Rvcihjb21wb25lbnRzQ29udGV4dFNlbGVjdG9yRmFjdG9yeSh1aWQpLCBzdGF0ZSA9PlxuICAgIHN0YXRlID8gc3RhdGUuY29tcG9uZW50IDogdW5kZWZpbmVkXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50c1NlbGVjdG9yRmFjdG9yeSA9IChcbiAgdWlkOiBzdHJpbmcsXG4gIGNvbnRleHQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhDbXMsIENtc0NvbXBvbmVudD4gPT4ge1xuICByZXR1cm4gY3JlYXRlU2VsZWN0b3IoXG4gICAgY29tcG9uZW50c0RhdGFTZWxlY3RvckZhY3RvcnkodWlkKSxcbiAgICBjb21wb25lbnRzQ29udGV4dEV4aXN0c1NlbGVjdG9yRmFjdG9yeSh1aWQsIGNvbnRleHQpLFxuICAgIChjb21wb25lbnRTdGF0ZSwgZXhpc3RzKSA9PiB7XG4gICAgICBpZiAoY29tcG9uZW50U3RhdGUgJiYgZXhpc3RzKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICApO1xufTtcbiJdfQ==