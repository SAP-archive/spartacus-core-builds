import { createSelector } from '@ngrx/store';
import { StateLoaderSelectors } from '../../../state/utils/index';
import { getUserState } from './feature.selector';
const ɵ0 = (state) => state.regions;
export const getRegionsLoaderState = createSelector(getUserState, ɵ0);
const ɵ1 = (state) => {
    return StateLoaderSelectors.loaderValueSelector(state).entities;
};
export const getAllRegions = createSelector(getRegionsLoaderState, ɵ1);
const ɵ2 = (state) => ({
    loaded: StateLoaderSelectors.loaderSuccessSelector(state),
    loading: StateLoaderSelectors.loaderLoadingSelector(state),
    regions: StateLoaderSelectors.loaderValueSelector(state).entities,
    country: StateLoaderSelectors.loaderValueSelector(state).country,
});
export const getRegionsDataAndLoading = createSelector(getRegionsLoaderState, ɵ2);
const ɵ3 = (state) => StateLoaderSelectors.loaderValueSelector(state).country;
export const getRegionsCountry = createSelector(getRegionsLoaderState, ɵ3);
const ɵ4 = (state) => StateLoaderSelectors.loaderLoadingSelector(state);
export const getRegionsLoading = createSelector(getRegionsLoaderState, ɵ4);
const ɵ5 = (state) => StateLoaderSelectors.loaderSuccessSelector(state);
export const getRegionsLoaded = createSelector(getRegionsLoaderState, ɵ5);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaW9ucy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3BhcnRhY3VzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9zZWxlY3RvcnMvcmVnaW9ucy5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFFL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO1dBT2hELENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU87QUFMckMsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBRzlCLGNBQWMsQ0FDaEIsWUFBWSxLQUViLENBQUM7V0FPQSxDQUFDLEtBQWdDLEVBQUUsRUFBRTtJQUNuQyxPQUFPLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNsRSxDQUFDO0FBUEgsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUd0QixjQUFjLENBQ2hCLHFCQUFxQixLQUl0QixDQUFDO1dBWUEsQ0FBQyxLQUFnQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sRUFBRSxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7SUFDekQsT0FBTyxFQUFFLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztJQUMxRCxPQUFPLEVBQUUsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUTtJQUNqRSxPQUFPLEVBQUUsb0JBQW9CLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTztDQUNqRSxDQUFDO0FBZkosTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBUWpDLGNBQWMsQ0FDaEIscUJBQXFCLEtBT3RCLENBQUM7V0FPQSxDQUFDLEtBQWdDLEVBQUUsRUFBRSxDQUNuQyxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPO0FBTjNELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUcxQixjQUFjLENBQ2hCLHFCQUFxQixLQUd0QixDQUFDO1dBT0EsQ0FBQyxLQUFnQyxFQUFFLEVBQUUsQ0FDbkMsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO0FBTnJELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUcxQixjQUFjLENBQ2hCLHFCQUFxQixLQUd0QixDQUFDO1dBT0EsQ0FBQyxLQUFnQyxFQUFFLEVBQUUsQ0FDbkMsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO0FBTnJELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUd6QixjQUFjLENBQ2hCLHFCQUFxQixLQUd0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBSZWdpb24gfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hZGRyZXNzLm1vZGVsJztcbmltcG9ydCB7IFN0YXRlTG9hZGVyU2VsZWN0b3JzIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvaW5kZXgnO1xuaW1wb3J0IHsgTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9sb2FkZXIvbG9hZGVyLXN0YXRlJztcbmltcG9ydCB7IFJlZ2lvbnNTdGF0ZSwgU3RhdGVXaXRoVXNlciwgVXNlclN0YXRlIH0gZnJvbSAnLi4vdXNlci1zdGF0ZSc7XG5pbXBvcnQgeyBnZXRVc2VyU3RhdGUgfSBmcm9tICcuL2ZlYXR1cmUuc2VsZWN0b3InO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVnaW9uc0xvYWRlclN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+XG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFVzZXJTdGF0ZSxcbiAgKHN0YXRlOiBVc2VyU3RhdGUpID0+IHN0YXRlLnJlZ2lvbnNcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRBbGxSZWdpb25zOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBSZWdpb25bXVxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRSZWdpb25zTG9hZGVyU3RhdGUsXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmVnaW9uc1N0YXRlPikgPT4ge1xuICAgIHJldHVybiBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5lbnRpdGllcztcbiAgfVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldFJlZ2lvbnNEYXRhQW5kTG9hZGluZzogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoVXNlcixcbiAge1xuICAgIGxvYWRlZDogYm9vbGVhbjtcbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIHJlZ2lvbnM6IFJlZ2lvbltdO1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgfVxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRSZWdpb25zTG9hZGVyU3RhdGUsXG4gIChzdGF0ZTogTG9hZGVyU3RhdGU8UmVnaW9uc1N0YXRlPikgPT4gKHtcbiAgICBsb2FkZWQ6IFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclN1Y2Nlc3NTZWxlY3RvcihzdGF0ZSksXG4gICAgbG9hZGluZzogU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyTG9hZGluZ1NlbGVjdG9yKHN0YXRlKSxcbiAgICByZWdpb25zOiBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5lbnRpdGllcyxcbiAgICBjb3VudHJ5OiBTdGF0ZUxvYWRlclNlbGVjdG9ycy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5jb3VudHJ5LFxuICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldFJlZ2lvbnNDb3VudHJ5OiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBzdHJpbmdcbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0UmVnaW9uc0xvYWRlclN0YXRlLFxuICAoc3RhdGU6IExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT4pID0+XG4gICAgU3RhdGVMb2FkZXJTZWxlY3RvcnMubG9hZGVyVmFsdWVTZWxlY3RvcihzdGF0ZSkuY291bnRyeVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldFJlZ2lvbnNMb2FkaW5nOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PlxuICAgIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlckxvYWRpbmdTZWxlY3RvcihzdGF0ZSlcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRSZWdpb25zTG9hZGVkOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhVc2VyLFxuICBib29sZWFuXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSxcbiAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PlxuICAgIFN0YXRlTG9hZGVyU2VsZWN0b3JzLmxvYWRlclN1Y2Nlc3NTZWxlY3RvcihzdGF0ZSlcbik7XG4iXX0=