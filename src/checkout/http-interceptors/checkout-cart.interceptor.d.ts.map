{"version":3,"file":"checkout-cart.interceptor.d.ts","sources":["checkout-cart.interceptor.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { MultiCartService } from '../../cart/facade/multi-cart.service';\nimport { RoutingService } from '../../routing/index';\n/**\n * Interceptor that handles \"Cart not found\" errors while a user is in a checkout step.\n *\n * When a user doing a checkout has a \"Cart not found\" error, he is redirected to checkout and the cart is reloaded.\n * If a \"Cart not found\" error happens and the user is not on checkout, this interceptor does not perform any actions.\n */\nexport declare class CheckoutCartInterceptor implements HttpInterceptor {\n    protected routingService: RoutingService;\n    protected multiCartService: MultiCartService;\n    constructor(routingService: RoutingService, multiCartService: MultiCartService);\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n    /**\n     * Returns true if the parameter semantic route is part of \"checkout\"\n     * Checkout semantic routes:\n     * checkout\n     * checkoutPaymentType\n     * CheckoutShippingAddress\n     * checkoutDeliveryMode\n     * checkoutPaymentDetails\n     * checkoutReviewOrder\n     * checkoutLogin\n     * @param semanticRoute\n     */\n    protected isUserInCheckoutRoute(semanticRoute: string): boolean;\n    /**\n     * Checks of the error is for a cart not found, i.e. the cart doesn't exist anymore\n     *\n     * @param response\n     */\n    protected isCartNotFoundError(response: HttpErrorResponse): boolean;\n    protected getCartIdFromError(response: HttpErrorResponse): string;\n}\n"]}